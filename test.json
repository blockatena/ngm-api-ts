{
  "openapi": "3.0.2",
  "info": {
    "title": "NFTPort API",
    "description": "NFTPort API version 1.0.0",
    "version": "1.0.0",
    "contact": {
      "name": "Johannes Tammekänd, Co-Founder of NFTPort",
      "email": "johannes@nftport.xyz"
    },
    "x-logo": {
      "url": "https://assets.website-files.com/60f51fac359e025bed0dd19b/60f95e7556f5b3719a346ab1_nftport%20logo.svg"
    }
  },
  "servers": [
    {
      "url": "https://api.nftport.xyz"
    }
  ],
  "paths": {
    "/v0/nfts": {
      "get": {
        "tags": ["Contracts, Metadata & Assets"],
        "summary": "Retrieve all NFTs",
        "description": "Returns all ERC721 and ERC1155 NFTs that have been minted on a given chain. Can be set to ```include``` the NFT ```metadata```, ```file_information```,  ```contract_infomation``` and ```all``` which includes full details like in [Retrieve NFT details](../1.json/paths/~1v0~1nfts~1{contract_address}~1{token_id}/get). Ethereum, Polygon and Rinkeby are supported.\n\n**In this endpoint, non-Enterprise users can only retrieve NFTs minted in the past 90 days. Access to full history is available on the [Enterprise tier](https://www.nftport.xyz/pricing).**\n\n#### Useful for:\n* Big data analysis or analytics with all the NFTs.\n* Keeping track of all the created NFTs.\n* Importing all NFTs to your application.\n\n#### Related:\n* To get all NFTs per contract, see [Retrieve contract NFTs](../1.json/paths/~1v0~1nfts~1{contract_address}/get).\n* To get detailed information on the returned NFTs, see [Retrieve NFT details](../1.json/paths/~1v0~1nfts~1{contract_address}~1{token_id}/get).",
        "operationId": "nfts_v0_nfts_get",
        "parameters": [
          {
            "description": "Blockchain from which to query NFTs.",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/NftsRequestSupportedChain"
                }
              ],
              "description": "Blockchain from which to query NFTs."
            },
            "name": "chain",
            "in": "query"
          },
          {
            "description": "The number of results returned per page. Limit can range between 1 and 50, and the default is 50.",
            "required": false,
            "schema": {
              "title": "Page Size",
              "maximum": 50.0,
              "minimum": 1.0,
              "type": "integer",
              "description": "The number of results returned per page. Limit can range between 1 and 50, and the default is 50.",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          },
          {
            "description": "Continuation. Pass this value from the previous response to fetch the next page.",
            "required": false,
            "schema": {
              "title": "Continuation",
              "type": "string",
              "description": "Continuation. Pass this value from the previous response to fetch the next page."
            },
            "name": "continuation",
            "in": "query"
          },
          {
            "description": "Include optional data in the response. ```metadata``` includes NFT metadata, ```file_information``` includes extra information of the NFT’s file,  ```contract_infomation``` includes information of the NFT’s contract and ```all``` includes full details like in [Retrieve NFT details](../1.json/paths/~1v0~1nfts~1{contract_address}~1{token_id}/get). Fields can be combined to get desired result.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/GetNftsRequestInclude"
              },
              "description": "Include optional data in the response. ```metadata``` includes NFT metadata, ```file_information``` includes extra information of the NFT’s file,  ```contract_infomation``` includes information of the NFT’s contract and ```all``` includes full details like in [Retrieve NFT details](../1.json/paths/~1v0~1nfts~1{contract_address}~1{token_id}/get). Fields can be combined to get desired result.",
              "default": ["default"]
            },
            "name": "include",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON object with an ```nfts``` property that contains an array of up to ```page_size``` NFTs. Each entry in the array is a separate NFT. If no more NFTs are available, the resulting array will be empty.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NftsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v0/nfts/{contract_address}/{token_id}": {
      "get": {
        "tags": ["Contracts, Metadata & Assets"],
        "summary": "Retrieve NFT details",
        "description": "Returns details for a given NFT. These include ```metadata_url```, ```metadata``` such as name, description, attributes, etc., ```file_url```, ```cached_file_url``` and ```mint_date```. Ethereum, Polygon and Rinkeby are supported.\n\n#### Useful for:\n* For easily getting all the necessary information about a given NFT.\n\n#### Related:\n* For a quick start, see the [List of sample addresses and token IDs](../docs/About/SampleAddresses.md) to copy.\n* To get all NFTs per contract, see [Retrieve contract NFTs](../1.json/paths/~1v0~1nfts~1{contract_address}/get).\n* To get NFTs that a given account owns, see [Retrieve NFTs owned by an account](../1.json/paths/~1v0~1accounts~1{account_address}/get).",
        "operationId": "nft_details_v0_nfts__contract_address___token_id__get",
        "parameters": [
          {
            "description": "The contract address of the NFT.",
            "required": true,
            "schema": {
              "title": "Contract Address",
              "type": "string",
              "description": "The contract address of the NFT."
            },
            "name": "contract_address",
            "in": "path"
          },
          {
            "description": "A unique ```uint256``` ID inside the contract. The contract address and token ID pair is a globally unique and fully-qualified identifier for a specific NFT on chain.",
            "required": true,
            "schema": {
              "title": "Token Id",
              "type": "string",
              "description": "A unique ```uint256``` ID inside the contract. The contract address and token ID pair is a globally unique and fully-qualified identifier for a specific NFT on chain."
            },
            "name": "token_id",
            "in": "path"
          },
          {
            "description": "Blockchain from which to query NFTs.",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/NftsRequestSupportedChain"
                }
              ],
              "description": "Blockchain from which to query NFTs."
            },
            "name": "chain",
            "in": "query"
          },
          {
            "description": "Queues and refreshes the metadata of the token if it has changed since the ```updated_date```. Useful for example, when NFT collections are revealed.",
            "required": false,
            "schema": {
              "title": "Refresh Metadata",
              "type": "boolean",
              "description": "Queues and refreshes the metadata of the token if it has changed since the ```updated_date```. Useful for example, when NFT collections are revealed.",
              "default": false
            },
            "name": "refresh_metadata",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON object with an ```nft``` property that contains details for a single NFT.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NftDetailsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v0/nfts/{contract_address}": {
      "get": {
        "tags": ["Contracts, Metadata & Assets"],
        "summary": "Retrieve contract NFTs",
        "description": "Returns all NFTs for a given contract address. Can be set to ```include``` the NFT ```metadata``` or ```all``` which returns extra information. Ethereum, Polygon and Rinkeby are supported.\n\n#### Useful for:\n* Importing all NFTs from a given contract to your application.\n\n#### Related:\n* For a quick start, see the [List of sample addresses](../docs/About/SampleAddresses.md to copy.\n* To get detailed information on the returned NFTs, see [Retrieve NFT details](../1.json/paths/~1v0~1nfts~1{contract_address}~1{token_id}/get).\n* To get NFTs that a given account owns, see [Retrieve NFTs owned by an account](../1.json/paths/~1v0~1accounts~1{account_address}/get).",
        "operationId": "nfts_by_contract_v0_nfts__contract_address__get",
        "parameters": [
          {
            "description": "Contract address from which to query NFTs also known as the collection address.",
            "required": true,
            "schema": {
              "title": "Contract Address",
              "type": "string",
              "description": "Contract address from which to query NFTs also known as the collection address."
            },
            "name": "contract_address",
            "in": "path"
          },
          {
            "description": "Blockchain from which to query NFTs.",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/NftsRequestSupportedChain"
                }
              ],
              "description": "Blockchain from which to query NFTs."
            },
            "name": "chain",
            "in": "query"
          },
          {
            "description": "The page number of the results to return. The first page is 1.",
            "required": false,
            "schema": {
              "title": "Page Number",
              "minimum": 1.0,
              "type": "integer",
              "description": "The page number of the results to return. The first page is 1.",
              "default": 1
            },
            "name": "page_number",
            "in": "query"
          },
          {
            "description": "The number of results returned per page. Limit can range between 1 and 50, and the default is 50.",
            "required": false,
            "schema": {
              "title": "Page Size",
              "maximum": 50.0,
              "minimum": 1.0,
              "type": "integer",
              "description": "The number of results returned per page. Limit can range between 1 and 50, and the default is 50.",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          },
          {
            "description": "Include optional data in the response. default is the default response, metadata includes NFT metadata and cached_file_url, and all includes extra information like file_information and mint_date in [Retrieve NFT details](../1.json/paths/~1v0~1nfts~1{contract_address}~1{token_id}/get).",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/GetContractNftsRequestInclude"
                }
              ],
              "description": "Include optional data in the response. default is the default response, metadata includes NFT metadata and cached_file_url, and all includes extra information like file_information and mint_date in [Retrieve NFT details](../1.json/paths/~1v0~1nfts~1{contract_address}~1{token_id}/get).",
              "default": "default"
            },
            "name": "include",
            "in": "query"
          },
          {
            "description": "Queues and refreshes all the NFTs metadata inside the contract (i.e. all tokens) if they have changed since the ```updated_date```. Useful for example, when NFT collections are revealed.",
            "required": false,
            "schema": {
              "title": "Refresh Metadata",
              "type": "boolean",
              "description": "Queues and refreshes all the NFTs metadata inside the contract (i.e. all tokens) if they have changed since the ```updated_date```. Useful for example, when NFT collections are revealed.",
              "default": false
            },
            "name": "refresh_metadata",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON object with an ```nfts``` property that contains an array of up to ```page_size``` NFTs. Each entry in the array is a separate NFT. If no more NFTs are available, the resulting array will be empty.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContractNftsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v0/accounts/{account_address}": {
      "get": {
        "tags": ["Ownership"],
        "summary": "Retrieve NFTs owned by an account",
        "description": "Returns NFTs owned by a given account (i.e. wallet) address. Can also return each NFT metadata with  ```include```  parameter.\n\n#### Useful for:\n* For checking if a user owns a specific NFT and then unlocking specific activity.\n* Adding NFT portfolio section to your apps.\n\n#### Related:\n* For a quick start, see the [List of sample addresses](../docs/About/SampleAddresses.md) to copy.\n* To get all NFTs per contract, see [Retrieve contract NFTs](../1.json/paths/~1v0~1nfts~1{contract_address}/get).\n* To get extra detailed information on the returned NFTs, see [Retrieve NFT details](../1.json/paths/~1v0~1nfts~1{contract_address}~1{token_id}/get).",
        "operationId": "account_nfts_v0_accounts__account_address__get",
        "parameters": [
          {
            "description": "Account address from which to fetch NFTs.",
            "required": true,
            "schema": {
              "title": "Account Address",
              "type": "string",
              "description": "Account address from which to fetch NFTs."
            },
            "name": "account_address",
            "in": "path"
          },
          {
            "description": "Blockchain from which to query NFTs.",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AccountRequestSupportedChain"
                }
              ],
              "description": "Blockchain from which to query NFTs."
            },
            "name": "chain",
            "in": "query"
          },
          {
            "description": "The page number of the results to return. The first page is 1.",
            "required": false,
            "schema": {
              "title": "Page Number",
              "minimum": 1.0,
              "type": "integer",
              "description": "The page number of the results to return. The first page is 1.",
              "default": 1
            },
            "name": "page_number",
            "in": "query"
          },
          {
            "description": "The number of results returned per page. Limit can range between 1 and 50, and the default is 50.",
            "required": false,
            "schema": {
              "title": "Page Size",
              "maximum": 50.0,
              "minimum": 1.0,
              "type": "integer",
              "description": "The number of results returned per page. Limit can range between 1 and 50, and the default is 50.",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          },
          {
            "description": "Continuation. Pass this value from the previous response to fetch the next page.",
            "required": false,
            "schema": {
              "title": "Continuation",
              "type": "string",
              "description": "Continuation. Pass this value from the previous response to fetch the next page."
            },
            "name": "continuation",
            "in": "query"
          },
          {
            "description": "Include optional data in the response. ```default``` is the default response and metadata includes NFT metadata, like in Retrieve NFT details, and ```contract_information``` includes information of the NFT’s contract.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/AccountRequestInclude"
              },
              "description": "Include optional data in the response. ```default``` is the default response and metadata includes NFT metadata, like in Retrieve NFT details, and ```contract_information``` includes information of the NFT’s contract.",
              "default": ["default"]
            },
            "name": "include",
            "in": "query"
          },
          {
            "description": "Exclude data from the response. ```erc721``` excludes ERC721 tokens and ```erc1155``` excludes ERC1155 tokens.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/AccountRequestExclude"
              },
              "description": "Exclude data from the response. ```erc721``` excludes ERC721 tokens and ```erc1155``` excludes ERC1155 tokens.",
              "default": []
            },
            "name": "exclude",
            "in": "query"
          },
          {
            "description": "Filter by and return NFTs only from the given contract address.",
            "required": false,
            "schema": {
              "title": "Contract Address",
              "type": "string",
              "description": "Filter by and return NFTs only from the given contract address."
            },
            "name": "contract_address",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON object with an ```nfts``` property that contains an array of up to ```page_size``` NFTs. Each entry in the array is a separate NFT. If no more NFTs are available, the resulting array will be empty.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountNftsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v0/accounts/creators/{account_address}": {
      "get": {
        "tags": ["Ownership"],
        "summary": "Retrieve NFTs created by an account",
        "description": "Returns NFTs created (i.e. minted) by a given account (i.e. wallet) address. Can also return each NFT metadata with `include` parameter. Ethereum mainnet is supported.\n\n#### Useful for:\n* For displaying NFTs created by an account.\n* Doing analytics on creator's portfolio.\n\n#### Related:\n* For a quick start, see the [List of sample addresses](../docs/About/SampleAddresses.md) to copy.\n* To get NFTs that a given account owns, see [Retrieve NFTs owned by an account](../1.json/paths/~1v0~1accounts~1{account_address}/get).\n* To get all NFTs per contract, see [Retrieve contract NFTs](../1.json/paths/~1v0~1nfts~1{contract_address}/get).\n* To get extra detailed information on the returned NFTs, see [Retrieve NFT details](../1.json/paths/~1v0~1nfts~1{contract_address}~1{token_id}/get).",
        "operationId": "creator_nfts_v0_accounts_creators__account_address__get",
        "parameters": [
          {
            "description": "Account address of the creator.",
            "required": true,
            "schema": {
              "title": "Account Address",
              "type": "string",
              "description": "Account address of the creator."
            },
            "name": "account_address",
            "in": "path"
          },
          {
            "description": "Blockchain from which to query NFTs.",
            "required": true,
            "schema": {
              "title": "Chain",
              "enum": ["ethereum"],
              "type": "string",
              "description": "Blockchain from which to query NFTs."
            },
            "name": "chain",
            "in": "query"
          },
          {
            "description": "The number of results returned per page. Limit can range between 1 and 50, and the default is 50.",
            "required": false,
            "schema": {
              "title": "Page Size",
              "maximum": 50.0,
              "minimum": 1.0,
              "type": "integer",
              "description": "The number of results returned per page. Limit can range between 1 and 50, and the default is 50.",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          },
          {
            "description": "Continuation. Pass this value from the previous response to fetch the next page.",
            "required": false,
            "schema": {
              "title": "Continuation",
              "type": "string",
              "description": "Continuation. Pass this value from the previous response to fetch the next page."
            },
            "name": "continuation",
            "in": "query"
          },
          {
            "description": "Include optional data in the response. ```default``` is the default response and metadata includes NFT metadata, like in Retrieve NFT details.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AccountRequestInclude"
                }
              ],
              "description": "Include optional data in the response. ```default``` is the default response and metadata includes NFT metadata, like in Retrieve NFT details.",
              "default": "default"
            },
            "name": "include",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON object with an ```nfts``` property that contains an array of up to ```page_size``` NFTs. Each entry in the array is a separate NFT. If no more NFTs are available, the resulting array will be empty.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatorNftsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v0/accounts/contracts/{account_address}": {
      "get": {
        "tags": ["Ownership"],
        "summary": "Retrieve contracts owned by an account",
        "description": "Returns a list of contracts (i.e. collections) based on `type` of ownership:\n 1. `owns_contract_nfts`- the given account (wallet) address owns at least one NFT.\n 2. `owns_contracts`- the given account (wallet) address is the owner of the contract.\n\n#### Useful for:\n* Showing the user a list of contracts in which they own NFTs.\n* Showing the user a list of contracts owned by them.\n* Checking if a user owns an NFT in a specific collections and then unlocking some experience for them, i.e. token-gating. (You are still responsible for validating that the user owns the wallet.)\n\n#### Related:\n* For a quick start, see the [List of sample addresses](../docs/About/SampleAddresses.md) to copy.\n* To get a list of all NFTs owned by this account, see [Retrieve NFTs owned by account](../1.json/paths/~1v0~1accounts~1{account_address}/get).\n* To get extra detailed information on the returned NFTs, see [Retrieve NFT details](../1.json/paths/~1v0~1nfts~1{contract_address}~1{token_id}/get).",
        "operationId": "account_contracts_v0_accounts_contracts__account_address__get",
        "parameters": [
          {
            "description": "Account address from which to fetch contracts.",
            "required": true,
            "schema": {
              "title": "Account Address",
              "type": "string",
              "description": "Account address from which to fetch contracts."
            },
            "name": "account_address",
            "in": "path"
          },
          {
            "description": "Blockchain from which to query contracts.",
            "required": true,
            "schema": {
              "title": "Chain",
              "enum": ["ethereum", "goerli", "rinkeby"],
              "type": "string",
              "description": "Blockchain from which to query contracts."
            },
            "name": "chain",
            "in": "query"
          },
          {
            "description": "Type of ownership. `owns_contract_nfts` gets contracts where the given account (wallet) address owns at least one NFT and `owns_contracts` gets contracts where the given account (wallet) address is the owner of the contract.",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AccountContractsRequestType"
                }
              ],
              "description": "Type of ownership. `owns_contract_nfts` gets contracts where the given account (wallet) address owns at least one NFT and `owns_contracts` gets contracts where the given account (wallet) address is the owner of the contract."
            },
            "name": "type",
            "in": "query"
          },
          {
            "description": "The number of results returned per page. Limit can range between 1 and 50, and the default is 50.",
            "required": false,
            "schema": {
              "title": "Page Size",
              "maximum": 50.0,
              "minimum": 1.0,
              "type": "integer",
              "description": "The number of results returned per page. Limit can range between 1 and 50, and the default is 50.",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          },
          {
            "description": "Continuation. Pass this value from the previous response to fetch the next page.",
            "required": false,
            "schema": {
              "title": "Continuation",
              "type": "string",
              "description": "Continuation. Pass this value from the previous response to fetch the next page."
            },
            "name": "continuation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON object with an ```contracts``` property that contains an array of up to ```page_size``` contracts. Each entry in the array is a separate contract. If no more NFTs are available, the resulting array will be empty.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountContractsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v0/transactions/accounts/{account_address}": {
      "get": {
        "tags": ["Transactions"],
        "summary": "Retrieve transactions by an account",
        "description": "Returns all on-chain transactions for the specified account (i.e. wallet) address. Can be set to `include` transactions such as `mint`, `burn`, `transfer_from`, `transfer_to`, `buy`, `sell`, or `all` which includes all transactions. Ethereum mainnet is supported.\n\n#### Useful for:\n* Tracking all transactions made by an account.\n* Building analytics and monitoring solutions.\n\n#### Related:\n* For a quick start, see the [List of sample addresses](../docs/About/SampleAddresses.md) to copy.\n* To query transactions from a contract, see [Retrieve transactions by contract](../1.json/paths/~1v0~1transactions~1nfts~1{contract_address}/get).\n* To query transactions for an NFT, see [Retrieve transactions by NFT](../1.json/paths/~1v0~1transactions~1nfts~1{contract_address}~1{token_id}/get).",
        "operationId": "transactions_by_account_v0_transactions_accounts__account_address__get",
        "parameters": [
          {
            "description": "Account address from which to fetch NFT transactions.",
            "required": true,
            "schema": {
              "title": "Account Address",
              "type": "string",
              "description": "Account address from which to fetch NFT transactions."
            },
            "name": "account_address",
            "in": "path"
          },
          {
            "description": "Blockchain from which to query NFT transactions.",
            "required": true,
            "schema": {
              "title": "Chain",
              "enum": ["ethereum"],
              "type": "string",
              "description": "Blockchain from which to query NFT transactions."
            },
            "name": "chain",
            "in": "query"
          },
          {
            "description": "The number of results returned per page. Limit can range between 1 and 50, and the default is 50.",
            "required": false,
            "schema": {
              "title": "Page Size",
              "maximum": 50.0,
              "minimum": 1.0,
              "type": "integer",
              "description": "The number of results returned per page. Limit can range between 1 and 50, and the default is 50.",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          },
          {
            "description": "Transaction type. You can specify the event types as an array. `all` returns all transaction types.",
            "required": true,
            "schema": {
              "title": "Type",
              "type": "array",
              "items": {
                "enum": [
                  "transfer_from",
                  "transfer_to",
                  "mint",
                  "burn",
                  "buy",
                  "sell",
                  "all"
                ],
                "type": "string"
              },
              "description": "Transaction type. You can specify the event types as an array. `all` returns all transaction types."
            },
            "name": "type",
            "in": "query"
          },
          {
            "description": "Continuation. Pass this value from the previous response to fetch the next page.",
            "required": false,
            "schema": {
              "title": "Continuation",
              "type": "string",
              "description": "Continuation. Pass this value from the previous response to fetch the next page."
            },
            "name": "continuation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON object with `transactions` property that contains an array of up to `page_size` transactions. Each entry in the array is a separate transaction. If no more transactions are available, the resulting array will be empty.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionsByAccountResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v0/transactions/nfts/{contract_address}/{token_id}": {
      "get": {
        "tags": ["Transactions"],
        "summary": "Retrieve transactions by NFT",
        "description": "Returns all on-chain transactions for the specified NFT token. Can be set to `include` transactions such as `transfer`, `burn`, `mint`, and `sale`, or `all` which includes all transactions. Ethereum mainnet is supported.\n\n#### Useful for:\n* Tracking all transactions of an NFT token.\n* Building analytics and monitoring solutions.\n\n#### Related:\n* For a quick start, see the [List of sample addresses and token IDs](../docs/About/SampleAddresses.md) to copy.\n* To query transactions from a contract, see [Retrieve transactions by contract](../1.json/paths/~1v0~1transactions~1nfts~1{contract_address}/get).\n* To query transactions from an account, see [Retrieve transactions by account](../1.json/paths/~1v0~1transactions~1accounts~1{account_address}/get).",
        "operationId": "transactions_by_token_v0_transactions_nfts__contract_address___token_id__get",
        "parameters": [
          {
            "description": "Contract address of the NFT from which to query transactions.",
            "required": true,
            "schema": {
              "title": "Contract Address",
              "type": "string",
              "description": "Contract address of the NFT from which to query transactions."
            },
            "name": "contract_address",
            "in": "path"
          },
          {
            "description": "Token ID of the NFT from which to query transactions.",
            "required": true,
            "schema": {
              "title": "Token Id",
              "type": "string",
              "description": "Token ID of the NFT from which to query transactions."
            },
            "name": "token_id",
            "in": "path"
          },
          {
            "description": "Blockchain of the NFT from which to query transactions.",
            "required": true,
            "schema": {
              "title": "Chain",
              "enum": ["ethereum"],
              "type": "string",
              "description": "Blockchain of the NFT from which to query transactions."
            },
            "name": "chain",
            "in": "query"
          },
          {
            "description": "The number of results returned per page. Limit can range between 1 and 50, and the default is 50.",
            "required": false,
            "schema": {
              "title": "Page Size",
              "maximum": 50.0,
              "minimum": 1.0,
              "type": "integer",
              "description": "The number of results returned per page. Limit can range between 1 and 50, and the default is 50.",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          },
          {
            "description": "Transaction type. You can specify the event types as an array. `all` returns all transaction types.",
            "required": true,
            "schema": {
              "title": "Type",
              "type": "array",
              "items": {
                "enum": ["transfer", "mint", "burn", "sale", "all"],
                "type": "string"
              },
              "description": "Transaction type. You can specify the event types as an array. `all` returns all transaction types."
            },
            "name": "type",
            "in": "query"
          },
          {
            "description": "Continuation. Pass this value from the previous response to fetch the next page.",
            "required": false,
            "schema": {
              "title": "Continuation",
              "type": "string",
              "description": "Continuation. Pass this value from the previous response to fetch the next page."
            },
            "name": "continuation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON object with `transactions` property that contains an array of up to `page_size` transactions. Each entry in the array is a separate transaction. If no more transactions are available, the resulting array will be empty.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionsByTokenResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v0/transactions/nfts/{contract_address}": {
      "get": {
        "tags": ["Transactions"],
        "summary": "Retrieve transactions by contract",
        "description": "Returns all on-chain transactions for the specified contract. Can be set to `include` transactions such as `transfer`, `burn`, `mint`, and `sale`, or `all` which includes all transactions. Ethereum mainnet is supported.\n\n#### Useful for:\n* Tracking all transactions of all NFT tokens in a contract.\n* Building analytics and monitoring solutions.\n\n#### Related:\n* For a quick start, see the [List of sample addresses](../docs/About/SampleAddresses.md) to copy.\n* To query sales statistics of an NFT collection, see [Retrieve contract sales statistics](../1.json/paths/~1v0~1transactions~1stats~1{contract_address}/get).\n* To query transactions for an NFT, see [Retrieve transactions by NFT](../1.json/paths/~1v0~1transactions~1nfts~1{contract_address}~1{token_id}/get).\n* To query transactions from an account, see [Retrieve transactions by account](../1.json/paths/~1v0~1transactions~1accounts~1{account_address}/get).",
        "operationId": "transactions_by_contract_v0_transactions_nfts__contract_address__get",
        "parameters": [
          {
            "description": "Contract address from which to query NFT transactions.",
            "required": true,
            "schema": {
              "title": "Contract Address",
              "type": "string",
              "description": "Contract address from which to query NFT transactions."
            },
            "name": "contract_address",
            "in": "path"
          },
          {
            "description": "Blockchain from which to query NFT transactions.",
            "required": true,
            "schema": {
              "title": "Chain",
              "enum": ["ethereum"],
              "type": "string",
              "description": "Blockchain from which to query NFT transactions."
            },
            "name": "chain",
            "in": "query"
          },
          {
            "description": "The number of results returned per page. Limit can range between 1 and 50, and the default is 50.",
            "required": false,
            "schema": {
              "title": "Page Size",
              "maximum": 50.0,
              "minimum": 1.0,
              "type": "integer",
              "description": "The number of results returned per page. Limit can range between 1 and 50, and the default is 50.",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          },
          {
            "description": "Transaction type. You can specify the event types as an array. `all` returns all transaction types.",
            "required": true,
            "schema": {
              "title": "Type",
              "type": "array",
              "items": {
                "enum": ["transfer", "mint", "burn", "sale", "all"],
                "type": "string"
              },
              "description": "Transaction type. You can specify the event types as an array. `all` returns all transaction types."
            },
            "name": "type",
            "in": "query"
          },
          {
            "description": "Continuation. Pass this value from the previous response to fetch the next page.",
            "required": false,
            "schema": {
              "title": "Continuation",
              "type": "string",
              "description": "Continuation. Pass this value from the previous response to fetch the next page."
            },
            "name": "continuation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON object with `transactions` property that contains an array of up to `page_size` transactions. Each entry in the array is a separate transaction. If no more transactions are available, the resulting array will be empty.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionsByContractResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v0/transactions": {
      "get": {
        "tags": ["Transactions"],
        "summary": "Retrieve all transactions",
        "description": "Returns all on-chain transactions for the whole chain. Can be set to `include` transactions such as `transfer`, `mint`, `burn`, `sale` or `all` which includes all transactions. Ethereum mainnet is supported.\n\n**In this endpoint, non-Enterprise users can only retrieve transactions from the past 90 days. Access to full history is available on the [Enterprise tier](https://www.nftport.xyz/pricing).**\n\n#### Useful for:\n* Tracking all transactions on a chain.\n* Building analytics and monitoring solutions.\n\n#### Related:\n* To query transactions from a contract, see [Retrieve transactions by contract](../1.json/paths/~1v0~1transactions~1nfts~1{contract_address}/get).\n* To query transactions for an NFT, see [Retrieve transactions by NFT](../1.json/paths/~1v0~1transactions~1nfts~1{contract_address}~1{token_id}/get).",
        "operationId": "transactions_v0_transactions_get",
        "parameters": [
          {
            "description": "Blockchain from which to query NFT transactions.",
            "required": true,
            "schema": {
              "title": "Chain",
              "enum": ["ethereum"],
              "type": "string",
              "description": "Blockchain from which to query NFT transactions."
            },
            "name": "chain",
            "in": "query"
          },
          {
            "description": "Block filter: returns transactions from this block or later.",
            "required": false,
            "schema": {
              "title": "From Block",
              "minimum": 0.0,
              "type": "integer",
              "description": "Block filter: returns transactions from this block or later."
            },
            "name": "from_block",
            "in": "query"
          },
          {
            "description": "Block filter: returns transactions up to and including this block.",
            "required": false,
            "schema": {
              "title": "To Block",
              "minimum": 0.0,
              "type": "integer",
              "description": "Block filter: returns transactions up to and including this block."
            },
            "name": "to_block",
            "in": "query"
          },
          {
            "description": "The number of results returned per page. Limit can range between 1 and 50, and the default is 50.",
            "required": false,
            "schema": {
              "title": "Page Size",
              "maximum": 50.0,
              "minimum": 1.0,
              "type": "integer",
              "description": "The number of results returned per page. Limit can range between 1 and 50, and the default is 50.",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          },
          {
            "description": "Transaction type. You can specify the event types as an array. `all` returns all transaction types.",
            "required": true,
            "schema": {
              "title": "Type",
              "type": "array",
              "items": {
                "enum": ["transfer", "mint", "burn", "sale", "all"],
                "type": "string"
              },
              "description": "Transaction type. You can specify the event types as an array. `all` returns all transaction types."
            },
            "name": "type",
            "in": "query"
          },
          {
            "description": "Continuation. Pass this value from the previous response to fetch the next page.",
            "required": false,
            "schema": {
              "title": "Continuation",
              "type": "string",
              "description": "Continuation. Pass this value from the previous response to fetch the next page."
            },
            "name": "continuation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON object with `transactions` property that contains an array of up to `page_size` transactions. Each entry in the array is a separate transaction. If no more transactions are available, the resulting array will be empty.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v0/transactions/stats/{contract_address}": {
      "get": {
        "tags": ["Transactions"],
        "summary": "Retrieve contract sales statistics",
        "description": "Retrieve in-depth sales statistics about a contract from OpenSea. Includes statistics such as floor price, total volume, sales, etc. Updated with 1-hour interval.\n\n#### Useful for:\n* Analysis and ranking of NFT collections.\n* Tracking NFT collections by sales, etc.\n\n#### Related:\n* For a quick start, see the [List of sample addresses](../docs/About/SampleAddresses.md) to copy.\n* To query transactions from a contract, see [Retrieve transactions by contract](../1.json/paths/~1v0~1transactions~1nfts~1{contract_address}/get).\n* To get all NFTs of a contract, see [Retrieve contract NFTs](../1.json/paths/~1v0~1nfts~1{contract_address}/get).",
        "operationId": "collection_stats_v0_transactions_stats__contract_address__get",
        "parameters": [
          {
            "description": "Contract address of the collection.",
            "required": true,
            "schema": {
              "title": "Contract Address",
              "type": "string",
              "description": "Contract address of the collection."
            },
            "name": "contract_address",
            "in": "path"
          },
          {
            "description": "Blockchain where the collection has been minted.",
            "required": true,
            "schema": {
              "title": "Chain",
              "enum": ["ethereum", "polygon"],
              "type": "string",
              "description": "Blockchain where the collection has been minted."
            },
            "name": "chain",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "In depth statistics of a contract",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionStatsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v0/reports/{report_type}": {
      "get": {
        "tags": ["Reports"],
        "summary": "Retrieve reports on NFTs data",
        "description": "Get reports such as:\n* High-level statistics about URIs linked by NFTs metadata. Currently supported URIs are:\n  metadata, image and animation.\n\nEthereum is supported.",
        "operationId": "reports_v0_reports__report_type__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ReportTypes"
            },
            "name": "report_type",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON object with a report property containing the requested report.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportURIResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v0/solana/nfts": {
      "get": {
        "tags": ["Solana Collections, Metadata & Assets"],
        "summary": "Retrieve all Solana NFTs",
        "description": "Returns all Solana NFTs that have been minted. Can be set to ```include``` the NFT ```metadata```, ```file_information```,  ```collection_infomation``` and ```all``` which includes full details like in [Retrieve Solana NFT details](../2.json/paths/~1v0~1solana~1nft~1{mint_address}/get).\n\n**In this endpoint, non-Enterprise users can only retrieve NFTs minted in the past 90 days. Access to full history is available on the [Enterprise tier](https://www.nftport.xyz/pricing).**\n\n#### Useful for:\n* Big data analysis or analytics with all the NFTs.\n* Keeping track of all the created NFTs.\n* Importing all NFTs to your application.\n\n#### Related:\n* To get all Solana NFTs per collection, see [Retrieve Solana collection NFTs](../2.json/paths/~1v0~1solana~1nfts~1{collection_id}/get).\n* To get detailed information on the returned Solana NFTs, see [Retrieve Solana NFT details](../2.json/paths/~1v0~1solana~1nft~1{mint_address}/get).",
        "operationId": "nfts_v0_solana_nfts_get",
        "parameters": [
          {
            "description": "The number of results returned per page. Limit can range between 1 and 50, and the default is 50.",
            "required": false,
            "schema": {
              "title": "Page Size",
              "maximum": 50.0,
              "minimum": 1.0,
              "type": "integer",
              "description": "The number of results returned per page. Limit can range between 1 and 50, and the default is 50.",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          },
          {
            "description": "Continuation. Pass this value from the previous response to fetch the next page.",
            "required": false,
            "schema": {
              "title": "Continuation",
              "type": "string",
              "description": "Continuation. Pass this value from the previous response to fetch the next page."
            },
            "name": "continuation",
            "in": "query"
          },
          {
            "description": "Include optional data in the response. ```metadata``` includes NFT metadata, ```file_information``` includes extra information of the NFT’s file,  ```collection_infomation``` includes information of the NFT’s collection and ```all``` includes full details like in [Retrieve NFT details](../2.json/paths/~1v0~1solana~1nft~1{mint_address}/get). Fields can be combined to get desired result.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SolanaGetNftsRequestInclude"
              },
              "description": "Include optional data in the response. ```metadata``` includes NFT metadata, ```file_information``` includes extra information of the NFT’s file,  ```collection_infomation``` includes information of the NFT’s collection and ```all``` includes full details like in [Retrieve NFT details](../2.json/paths/~1v0~1solana~1nft~1{mint_address}/get). Fields can be combined to get desired result.",
              "default": ["default"]
            },
            "name": "include",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON object with an ```nfts``` property that contains an array of up to ```page_size``` NFTs. Each entry in the array is a separate NFT. If no more NFTs are available, the resulting array will be empty.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SolanaNftsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v0/solana/nft/{mint_address}": {
      "get": {
        "tags": ["Solana Collections, Metadata & Assets"],
        "summary": "Retrieve Solana NFT details",
        "description": "Returns details for a given NFT. These include ```metadata_url```, ```metadata``` such as name, description, attributes, etc., ```image_url```, ```cached_image_url``` and ```mint_date```.\n\n#### Useful for:\n* For easily getting all the necessary information about a given NFT.\n\n#### Related:\n* To get all NFTs per collection, see [Retrieve Solana collection NFTs](../2.json/paths/~1v0~1solana~1nfts~1{collection_id}/get).\n* To get NFTs that a given account owns, see [Retrieve Solana NFTs owned by an account](../2.json/paths/~1v0~1solana~1accounts~1{account_address}/get).",
        "operationId": "nft_details_v0_solana_nft__mint_address__get",
        "parameters": [
          {
            "description": "The mint address of the NFT.",
            "required": true,
            "schema": {
              "title": "Mint Address",
              "type": "string",
              "description": "The mint address of the NFT."
            },
            "name": "mint_address",
            "in": "path"
          },
          {
            "description": "Queues and refreshes the metadata of the token if it has changed since the ```updated_date```. Useful for example, when NFT collections are revealed.",
            "required": false,
            "schema": {
              "title": "Refresh Metadata",
              "type": "boolean",
              "description": "Queues and refreshes the metadata of the token if it has changed since the ```updated_date```. Useful for example, when NFT collections are revealed.",
              "default": false
            },
            "name": "refresh_metadata",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON object with an ```nft``` property that contains details for a single NFT.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SolanaNftDetailsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v0/solana/nfts/{collection_id}": {
      "get": {
        "tags": ["Solana Collections, Metadata & Assets"],
        "summary": "Retrieve Solana collection NFTs",
        "description": "Returns all NFTs for a given collection. Can be set to ```include``` the NFT ```metadata``` or ```all``` which returns extra information.\n\n#### Useful for:\n* Importing all NFTs from a given collection to your application.\n\n#### Related:\n* To get detailed information on the returned NFTs, see [Retrieve Solana NFT details](../2.json/paths/~1v0~1solana~1nft~1{mint_address}/get).\n* To get NFTs that a given account owns, see [Retrieve Solana NFTs owned by an account](../2.json/paths/~1v0~1solana~1accounts~1{account_address}/get).",
        "operationId": "nfts_by_collection_v0_solana_nfts__collection_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Collection Id",
              "type": "string"
            },
            "name": "collection_id",
            "in": "path"
          },
          {
            "description": "The page number of the results to return. The first page is 1.",
            "required": false,
            "schema": {
              "title": "Page Number",
              "minimum": 1.0,
              "type": "integer",
              "description": "The page number of the results to return. The first page is 1.",
              "default": 1
            },
            "name": "page_number",
            "in": "query"
          },
          {
            "description": "The number of results returned per page. Limit can range between 1 and 50, and the default is 50.",
            "required": false,
            "schema": {
              "title": "Page Size",
              "maximum": 50.0,
              "minimum": 1.0,
              "type": "integer",
              "description": "The number of results returned per page. Limit can range between 1 and 50, and the default is 50.",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          },
          {
            "description": "Include optional data in the response. default is the default response, metadata includes NFT metadata and cached_file_url, and all includes extra information like file_information and mint_date in [Retrieve NFT details](../2.json/paths/~1v0~1solana~1nft~1{mint_address}/get). Fields can be combined to get desired result.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SolanaGetCollectionNftsRequestInclude"
              },
              "description": "Include optional data in the response. default is the default response, metadata includes NFT metadata and cached_file_url, and all includes extra information like file_information and mint_date in [Retrieve NFT details](../2.json/paths/~1v0~1solana~1nft~1{mint_address}/get). Fields can be combined to get desired result.",
              "default": ["default"]
            },
            "name": "include",
            "in": "query"
          },
          {
            "description": "Queues and refreshes all the NFTs metadata inside the collection (i.e. all tokens) if they have changed since the ```updated_date```. Useful for example, when NFT collections are revealed.",
            "required": false,
            "schema": {
              "title": "Refresh Metadata",
              "type": "boolean",
              "description": "Queues and refreshes all the NFTs metadata inside the collection (i.e. all tokens) if they have changed since the ```updated_date```. Useful for example, when NFT collections are revealed.",
              "default": false
            },
            "name": "refresh_metadata",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON object with an ```nfts``` property that contains an array of up to ```page_size``` NFTs. Each entry in the array is a separate NFT. If no more NFTs are available, the resulting array will be empty.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SolanaCollectionNftsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v0/solana/accounts/{account_address}": {
      "get": {
        "tags": ["Solana Ownership"],
        "summary": "Retrieve Solana NFTs owned by an account",
        "description": "Returns NFTs owned by a given account (i.e. wallet) address. Can also return each NFT metadata with  ```include```  parameter.\n\n#### Useful for:\n* For checking if a user owns a specific NFT and then unlocking specific activity.\n* Adding NFT portfolio section to your apps.\n\n#### Related:\n* To get all NFTs per collection, see [Retrieve Solana collection NFTs](../2.json/paths/~1v0~1solana~1nfts~1{collection_id}/get).\n* To get extra detailed information on the returned NFTs, see [Retrieve Solana NFT details](../2.json/paths/~1v0~1solana~1nft~1{mint_address}/get).",
        "operationId": "account_nfts_v0_solana_accounts__account_address__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Account Address",
              "type": "string"
            },
            "name": "account_address",
            "in": "path"
          },
          {
            "description": "The number of results returned per page. Limit can range between 1 and 50, and the default is 50.",
            "required": false,
            "schema": {
              "title": "Page Size",
              "maximum": 50.0,
              "minimum": 1.0,
              "type": "integer",
              "description": "The number of results returned per page. Limit can range between 1 and 50, and the default is 50.",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          },
          {
            "description": "Continuation. Pass this value from the previous response to fetch the next page.",
            "required": false,
            "schema": {
              "title": "Continuation",
              "type": "string",
              "description": "Continuation. Pass this value from the previous response to fetch the next page."
            },
            "name": "continuation",
            "in": "query"
          },
          {
            "description": "Include optional data in the response. ```default``` is the default response and ```metadata``` includes NFT metadata, like in Retrieve NFT details.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SolanaAccountRequestInclude"
              },
              "description": "Include optional data in the response. ```default``` is the default response and ```metadata``` includes NFT metadata, like in Retrieve NFT details.",
              "default": ["default"]
            },
            "name": "include",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON object with an ```nfts``` property that contains an array of up to ```page_size``` NFTs. Each entry in the array is a separate NFT. If no more NFTs are available, the resulting array will be empty.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SolanaAccountNftsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v0/solana/accounts/creators/{account_address}": {
      "get": {
        "tags": ["Solana Ownership"],
        "summary": "Retrieve Solana NFTs created by an account",
        "description": "Returns NFTs created (i.e. minted) by a given account (i.e. wallet) address. Can also return each NFT metadata with `include` parameter.\n\n#### Useful for:\n* For displaying NFTs created by an account.\n* Doing analytics on creator's portfolio.\n\n#### Related:\n* To get NFTs that a given account owns, see [Retrieve Solana NFTs owned by an account](../2.json/paths/~1v0~1solana~1accounts~1{account_address}/get).\n* To get all NFTs per collection, see [Retrieve Solana collection NFTs](../2.json/paths/~1v0~1solana~1nfts~1{collection_id}/get).\n* To get extra detailed information on the returned NFTs, see [Retrieve Solana NFT details](../2.json/paths/~1v0~1solana~1nft~1{mint_address}/get).",
        "operationId": "creator_nfts_v0_solana_accounts_creators__account_address__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Account Address",
              "type": "string"
            },
            "name": "account_address",
            "in": "path"
          },
          {
            "description": "The number of results returned per page. Limit can range between 1 and 50, and the default is 50.",
            "required": false,
            "schema": {
              "title": "Page Size",
              "maximum": 50.0,
              "minimum": 1.0,
              "type": "integer",
              "description": "The number of results returned per page. Limit can range between 1 and 50, and the default is 50.",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          },
          {
            "description": "Continuation. Pass this value from the previous response to fetch the next page.",
            "required": false,
            "schema": {
              "title": "Continuation",
              "type": "string",
              "description": "Continuation. Pass this value from the previous response to fetch the next page."
            },
            "name": "continuation",
            "in": "query"
          },
          {
            "description": "Include optional data in the response. ```default``` is the default response and ```metadata``` includes NFT metadata, like in Retrieve NFT details.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SolanaAccountRequestInclude"
              },
              "description": "Include optional data in the response. ```default``` is the default response and ```metadata``` includes NFT metadata, like in Retrieve NFT details.",
              "default": ["default"]
            },
            "name": "include",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON object with an ```nfts``` property that contains an array of up to ```page_size``` NFTs. Each entry in the array is a separate NFT. If no more NFTs are available, the resulting array will be empty.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SolanaCreatorNftsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v0/solana/accounts/collections/{account_address}": {
      "get": {
        "tags": ["Solana Ownership"],
        "summary": "Retrieve Solana collections owned by an account",
        "description": "Returns a list of collections where the given account (wallet) address owns at least one NFT.\n\n#### Useful for:\n* Showing the user a list of collections in which they own NFTs.\n* Checking if a user owns an NFT in a specific collections and then unlocking some experience for them, i.e. token-gating. (You are still responsible for validating that the user owns the wallet.)\n\n#### Related:\n* To get a list of all NFTs owned by this account, see [Retrieve Solana NFTs owned by account](https://docs.nftport.xyz/docs/solana/b3A6Njg1NTI0MDM-retrieve-solana-nf-ts-owned-by-an-account).\n* To get extra detailed information on the returned NFTs, see [Retrieve Solana NFT details](../2.json/paths/~1v0~1solana~1nft~1{mint_address}/get).",
        "operationId": "account_collections_v0_solana_accounts_collections__account_address__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Account Address",
              "type": "string"
            },
            "name": "account_address",
            "in": "path"
          },
          {
            "description": "Type of ownership. `owns_collections_nfts` gets collections where the given account (wallet) address owns at least one NFT.",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/SolanaAccountCollectionsRequestType"
                }
              ],
              "description": "Type of ownership. `owns_collections_nfts` gets collections where the given account (wallet) address owns at least one NFT."
            },
            "name": "type",
            "in": "query"
          },
          {
            "description": "The number of results returned per page. Limit can range between 1 and 50, and the default is 50.",
            "required": false,
            "schema": {
              "title": "Page Size",
              "maximum": 50.0,
              "minimum": 1.0,
              "type": "integer",
              "description": "The number of results returned per page. Limit can range between 1 and 50, and the default is 50.",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          },
          {
            "description": "Continuation. Pass this value from the previous response to fetch the next page.",
            "required": false,
            "schema": {
              "title": "Continuation",
              "type": "string",
              "description": "Continuation. Pass this value from the previous response to fetch the next page."
            },
            "name": "continuation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON object with a ```collections``` property that contains an array of up to ```page_size``` collections. Each entry in the array is a separate collection. If no more NFTs are available, the resulting array will be empty.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SolanaAccountCollectionsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v0/solana/transactions/accounts/{account_address}": {
      "get": {
        "tags": ["Solana Transactions"],
        "summary": "Retrieve Solana transactions by an account",
        "description": "Returns all on-chain transactions for the specified account (i.e. wallet) address. Can be set to `include` transactions such as `mint`, `burn`, `transfer_from`, `transfer_to`, `buy`, `sell`, or `all` which includes all transactions.\n\n#### Useful for:\n* Tracking all transactions made by an account.\n* Building analytics and monitoring solutions.\n\n#### Related:\n* To query transactions from a collection, see [Retrieve Solana transactions by collection](../2.json/paths/~1v0~1solana~1transactions~1nfts~1{collection_id}/get).\n* To query transactions for an NFT, see [Retrieve Solana transactions by NFT](../2.json/paths/~1v0~1solana~1transactions~1nft~1{mint_address}/get).",
        "operationId": "transactions_by_account_v0_solana_transactions_accounts__account_address__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Account Address",
              "type": "string"
            },
            "name": "account_address",
            "in": "path"
          },
          {
            "description": "The number of results returned per page. Limit can range between 1 and 50, and the default is 50.",
            "required": false,
            "schema": {
              "title": "Page Size",
              "maximum": 50.0,
              "minimum": 1.0,
              "type": "integer",
              "description": "The number of results returned per page. Limit can range between 1 and 50, and the default is 50.",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          },
          {
            "description": "Transaction type. You can specify the event types as an array. `all` returns all transaction types.",
            "required": true,
            "schema": {
              "title": "Type",
              "type": "array",
              "items": {
                "enum": ["transfer", "mint", "burn", "sale", "all"],
                "type": "string"
              },
              "description": "Transaction type. You can specify the event types as an array. `all` returns all transaction types."
            },
            "name": "type",
            "in": "query"
          },
          {
            "description": "Continuation. Pass this value from the previous response to fetch the next page.",
            "required": false,
            "schema": {
              "title": "Continuation",
              "type": "string",
              "description": "Continuation. Pass this value from the previous response to fetch the next page."
            },
            "name": "continuation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON object with `transactions` property that contains an array of up to `page_size` transactions. Each entry in the array is a separate transaction. If no more transactions are available, the resulting array will be empty.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SolanaTransactionsByAccountResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v0/solana/transactions/nft/{mint_address}": {
      "get": {
        "tags": ["Solana Transactions"],
        "summary": "Retrieve Solana transactions by NFT",
        "description": "Returns all on-chain transactions for the specified NFT token. Can be set to `include` transactions such as `transfer`, `burn`, `mint`, and `sale`, or `all` which includes all transactions.\n\n#### Useful for:\n* Tracking all transactions of an NFT token.\n* Building analytics and monitoring solutions.\n\n#### Related:\n* To query transactions from a collection, see [Retrieve Solana transactions by collection](../2.json/paths/~1v0~1solana~1transactions~1nfts~1{collection_id}/get).\n* To query transactions from an account, see [Retrieve Solana transactions by account](../2.json/paths/~1v0~1solana~1transactions~1accounts~1{account_address}/get).",
        "operationId": "transactions_by_nft_v0_solana_transactions_nft__mint_address__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Mint Address",
              "type": "string"
            },
            "name": "mint_address",
            "in": "path"
          },
          {
            "description": "The number of results returned per page. Limit can range between 1 and 50, and the default is 50.",
            "required": false,
            "schema": {
              "title": "Page Size",
              "maximum": 50.0,
              "minimum": 1.0,
              "type": "integer",
              "description": "The number of results returned per page. Limit can range between 1 and 50, and the default is 50.",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          },
          {
            "description": "Transaction type. You can specify the event types as an array. `all` returns all transaction types.",
            "required": true,
            "schema": {
              "title": "Type",
              "type": "array",
              "items": {
                "enum": ["transfer", "mint", "burn", "sale", "all"],
                "type": "string"
              },
              "description": "Transaction type. You can specify the event types as an array. `all` returns all transaction types."
            },
            "name": "type",
            "in": "query"
          },
          {
            "description": "Continuation. Pass this value from the previous response to fetch the next page.",
            "required": false,
            "schema": {
              "title": "Continuation",
              "type": "string",
              "description": "Continuation. Pass this value from the previous response to fetch the next page."
            },
            "name": "continuation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON object with `transactions` property that contains an array of up to `page_size` transactions. Each entry in the array is a separate transaction. If no more transactions are available, the resulting array will be empty.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SolanaTransactionsByNftResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v0/solana/transactions/nfts/{collection_id}": {
      "get": {
        "tags": ["Solana Transactions"],
        "summary": "Retrieve Solana transactions by collection",
        "description": "Returns all on-chain transactions for the specified collection. Can be set to `include` transactions such as `transfer`, `burn`, `mint`, and `sale`, or `all` which includes all transactions.\n\n#### Useful for:\n* Tracking all transactions of all NFT tokens in a collection.\n* Building analytics and monitoring solutions.\n\n#### Related:\n* To query transactions for an NFT, see [Retrieve Solana transactions by NFT](../2.json/paths/~1v0~1solana~1transactions~1nft~1{mint_address}/get).\n* To query transactions from an account, see [Retrieve Solana transactions by account](../2.json/paths/~1v0~1solana~1transactions~1accounts~1{account_address}/get).",
        "operationId": "transactions_by_collection_v0_solana_transactions_nfts__collection_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Collection Id",
              "type": "string"
            },
            "name": "collection_id",
            "in": "path"
          },
          {
            "description": "The number of results returned per page. Limit can range between 1 and 50, and the default is 50.",
            "required": false,
            "schema": {
              "title": "Page Size",
              "maximum": 50.0,
              "minimum": 1.0,
              "type": "integer",
              "description": "The number of results returned per page. Limit can range between 1 and 50, and the default is 50.",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          },
          {
            "description": "Transaction type. You can specify the event types as an array. `all` returns all transaction types.",
            "required": true,
            "schema": {
              "title": "Type",
              "type": "array",
              "items": {
                "enum": ["transfer", "mint", "burn", "sale", "all"],
                "type": "string"
              },
              "description": "Transaction type. You can specify the event types as an array. `all` returns all transaction types."
            },
            "name": "type",
            "in": "query"
          },
          {
            "description": "Continuation. Pass this value from the previous response to fetch the next page.",
            "required": false,
            "schema": {
              "title": "Continuation",
              "type": "string",
              "description": "Continuation. Pass this value from the previous response to fetch the next page."
            },
            "name": "continuation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON object with `transactions` property that contains an array of up to `page_size` transactions. Each entry in the array is a separate transaction. If no more transactions are available, the resulting array will be empty.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SolanaTransactionsByCollectionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v0/solana/transactions": {
      "get": {
        "tags": ["Solana Transactions"],
        "summary": "Retrieve all Solana transactions",
        "description": "Returns all on-chain transactions for the whole chain. Can be set to `include` transactions such as `transfer`, `mint`, `burn`, `sale` or `all` which includes all transactions.\n\n**In this endpoint, non-Enterprise users can only retrieve transactions from the past 90 days. Access to full history is available on the [Enterprise tier](https://www.nftport.xyz/pricing).**\n\n#### Useful for:\n* Tracking all transactions on a chain.\n* Building analytics and monitoring solutions.\n\n#### Related:\n* To query transactions from a collection, see [Retrieve Solana transactions by collection](../2.json/paths/~1v0~1solana~1transactions~1nfts~1{collection_id}/get).\n* To query transactions for an NFT, see [Retrieve Solana transactions by NFT](../2.json/paths/~1v0~1solana~1transactions~1nft~1{mint_address}/get).",
        "operationId": "transactions_v0_solana_transactions_get",
        "parameters": [
          {
            "description": "The number of results returned per page. Limit can range between 1 and 50, and the default is 50.",
            "required": false,
            "schema": {
              "title": "Page Size",
              "maximum": 50.0,
              "minimum": 1.0,
              "type": "integer",
              "description": "The number of results returned per page. Limit can range between 1 and 50, and the default is 50.",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          },
          {
            "description": "Transaction type. You can specify the event types as an array. `all` returns all transaction types.",
            "required": true,
            "schema": {
              "title": "Type",
              "type": "array",
              "items": {
                "enum": ["transfer", "mint", "burn", "sale", "all"],
                "type": "string"
              },
              "description": "Transaction type. You can specify the event types as an array. `all` returns all transaction types."
            },
            "name": "type",
            "in": "query"
          },
          {
            "description": "Continuation. Pass this value from the previous response to fetch the next page.",
            "required": false,
            "schema": {
              "title": "Continuation",
              "type": "string",
              "description": "Continuation. Pass this value from the previous response to fetch the next page."
            },
            "name": "continuation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON object with `transactions` property that contains an array of up to `page_size` transactions. Each entry in the array is a separate transaction. If no more transactions are available, the resulting array will be empty.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SolanaTransactionsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v0/contracts": {
      "put": {
        "tags": ["Product contracts"],
        "summary": "Update a deployed contract for NFT products",
        "description": "Updates a contract which has been previously deployed with [Deploy a contract for NFT products](../3.json/paths/~1v0~1contracts/post). You can freeze the metadata of the NFTs minted in the specified contract which means they can not be updated after minting (token URIs are frozen on the contract level).\n\n#### Useful for:\n* Creating dynamic NFTs (NFTs that change after minting based on events) and freezing them afterwards.\n* Revealing NFTs after a drop and freezing them afterwards.\n\n#### Related:\n* If you wish to list all your previously deployed contracts, see [List all your deployed contracts](../3.json/paths/~1v0~1me~1contracts/get).",
        "operationId": "update_contract_v0_contracts_put",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateContractRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns transaction hash which can be used to confirm that the transaction was successful (blockchain transactions can take up to a few minutes depending on how congested the network is).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateContractResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": ["Product contracts"],
        "summary": "Deploy a contract for NFT products",
        "description": "Deploys an [```ERC-721```](https://github.com/nftport/solidity-contracts/blob/master/contracts/ERC721NftCustom.sol)\nor [```ERC-1155```](https://github.com/nftport/solidity-contracts/blob/master/contracts/ERC1155NftCustom.sol) smart contract\n where your can mint your NFTs on-demand. The supply of NFTs is not fixed; more can be minted into this contract at any point in the future. This is a required step if you wish to use [Customizable minting](../3.json/paths/~1v0~1mints~1customizable/post) as your NFTs will be minted into this contract.\n\nAs blockchains can take a few seconds up to a few minutes to sync, then after contract deployment, you can use the returned ```transaction_hash``` in [Retrieve a deployed contract](../3.json/paths/~1v0~1contracts~1{transaction_hash}/get) to get the ```contract_address```.\n\n**You can deploy up to 5 contracts for free per chain. For higher limits, see [pricing](https://www.nftport.xyz/pricing).**\n\n#### Useful for:\n* Deploying your own contracts so you easily can build custom products.\n\n#### Related:\n* To get the deployed contract address, use [Retrieve a deployed contract](../3.json/paths/~1v0~1contracts~1{transaction_hash}/get).\n* If you want to know how to use the customizable minting, see [Customizable Minting Quickstart](docs/minting/Minting-Quickstart.md#customizable-minting).\n* To understand the difference between NFT product contracts and NFT collection contracts, see [Contract comparison](docs/Introduction/Contract-comparison.md).\n\nRead how **royalties** work [here](docs/About/Royalties.md).",
        "operationId": "deploy_contract_v0_contracts_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeployContractRequestWithAddress"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Details of the deployed contract and its transaction hash.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeployContractResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v0/contracts/collections": {
      "put": {
        "tags": ["Collection contracts"],
        "summary": "Update a deployed collection contract",
        "description": "Updates a collection contract which has been previously deployed with [Deploy an NFT collection contract](../3.json/paths/~1v0~1contracts~1collections/post). You can change the reveal dates, metadata location, presale time and whitelist, or royalty details. You can also freeze the metadata of the NFTs minted in the specified contract so metadata cannot be updated any more (token URIs are frozen on the contract level).\n\n**Ethereum contract updates are available only on the Growth or Scale tier and you will be charged immediately on request and if the transaction fails for any reason the amount will be refunded. For higher limits, see [pricing](https://www.nftport.xyz/pricing).**\n\n\n#### Useful for:\n* Revealing NFTs at a specified time and freezing them afterwards.\n* Allowing a limited group of people to mint NFTs during a presale period.\n* Changing royalty amount and recipient.\n\n\n#### Related:\n* If you wish to list all your previously deployed collection contracts, see [List all your deployed collection contracts](../3.json/paths/~1v0~1me~1contracts~1collections/get).",
        "operationId": "update_contract_collection_v0_contracts_collections_put",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateContractCollectionsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns transaction hash which can be used to confirm that the transaction was successful (blockchain transactions can take up to a few minutes depending on how congested the network is).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateContractCollectionsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": ["Collection contracts"],
        "summary": "Deploy an NFT collection contract",
        "description": "Deploys a [fixed-supply ERC-721 smart contract](https://github.com/nftport/solidity-contracts/blob/master/contracts/collection/templates/NFTCollection.sol), commonly used for launching NFT collections.\n\nAs blockchains can take a few seconds up to a few minutes to sync, then after contract deployment, you can use the returned ```transaction_hash``` in [Retrieve a deployed contract](../3.json/paths/~1v0~1contracts~1{transaction_hash}/get) to get the ```contract_address```.\n\n**You can deploy up to 5 contracts for free on each of Polygon and Rinkeby, and ```max_supply``` is limited to less than or equal to 5,000 NFTs for collection contracts deployed on the Free plan. Ethereum contract deployments are available only on the Growth or Scale tier\nand you will be charged immediately on request and if the transaction fails for any reason the amount will be refunded. For details and limits, see [pricing](https://www.nftport.xyz/pricing).**\n\n\n\n#### Useful for:\n* Launching an NFT collection (e.g. a 10,000 profile pictures collection) with a minting website. **See our [tutorial](docs/minting/How-to-create-an-NFT-collection-contract.md) to learn how to create an NFT contract collection and make a website to allows users to mint.**\n\n#### Related:\n* To get the deployed contract address, use [Retrieve a deployed contract](../3.json/paths/~1v0~1contracts~1{transaction_hash}/get).\n* If you wish to list all your previously deployed collection contracts, see [List all your deployed collection contracts](../3.json/paths/~1v0~1me~1contracts~1collections/get).\n* The contract ABI can be fetched using the [Get contract ABI](../3.json/paths/~1v0~1me~1contracts~1abis~1{contract_address}/get) endpoing.\n\nRead how **royalties** work [here](docs/About/Royalties.md).",
        "operationId": "deploy_contract_collection_v0_contracts_collections_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeployContractCollectionsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Details of the deployed contract and its transaction hash.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeployContractCollectionsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v0/contracts/{transaction_hash}": {
      "get": {
        "tags": [""],
        "summary": "Retrieve a deployed contract",
        "description": "Returns the details of a contract that has previously been deployed with [Deploy a contract for NFT products](../3.json/paths/~1v0~1contracts/post) or [Deploy an NFT collection contract](../3.json/paths/~1v0~1contracts~1collections/post). Supply the ```transaction_hash``` to check if the contract is on chain and to get the ```contract_address```. For NFT product contracts, you can use the returned ```contract_address``` in [Customizable Minting](../3.json/paths/~1v0~1mints~1customizable/post).\n\nAs blockchains can take a few seconds up to a few minutes to sync, this endpoint can be polled until the ```contract_address``` is returned.\n\n#### Useful for:\n* Deploying your own contracts so you can build custom products or collections easily.\n\n#### Related:\n* If you want to get data about NFT contracts which you haven't deployed using NFTPort, see [Retrieve contract NFTs](../1.json/paths/~1v0~1nfts~1{contract_address}/get).\n* If you want to learn how to use the [customizable minting](../3.json/paths/~1v0~1mints~1customizable/post), see [Customizable Minting Quickstart](docs/minting/Minting-Quickstart.md#customizable-minting).",
        "operationId": "get_deployed_contract_v0_contracts__transaction_hash__get",
        "parameters": [
          {
            "description": "Transaction hash that was returned from deploying an NFT contract.",
            "required": true,
            "schema": {
              "title": "Transaction Hash",
              "type": "string",
              "description": "Transaction hash that was returned from deploying an NFT contract."
            },
            "name": "transaction_hash",
            "in": "path"
          },
          {
            "description": "Blockchain where the contract has been deployed to.",
            "required": true,
            "schema": {
              "title": "Chain",
              "enum": ["polygon", "ethereum", "goerli"],
              "type": "string",
              "description": "Blockchain where the contract has been deployed to."
            },
            "name": "chain",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Chain and contract address of the deployed contract.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetDeployedContractResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v0/files": {
      "post": {
        "tags": ["Storage"],
        "summary": "Upload a file to IPFS",
        "description": "Uploads a file to [IPFS](https://docs.ipfs.io/concepts/what-is-ipfs/) which makes your NFT storage easy. You can use the returned  ```ipfs_url```  with [Upload metadata to IPFS](../3.json/paths/~1v0~1metadata/post) to mint your NFT.\n\nIf you prefer hosting files in your own servers, you can skip this step. Otherwise, we recommend using IPFS because it's an industry standard for decentralized storage and guarantees the immutability of your files.\nWe use [nft.storage](https://nft.storage/) to [pin](https://docs.ipfs.io/how-to/pin-files/) the files with Filecoin, which ensures that your important data is retained in IPFS.\n\n**Supports all file types and maximum file size is 50MB. For higher limits, see [pricing](https://www.nftport.xyz/pricing).**\n\n#### Useful for:\n* Storing your NFT files easily and according to the industry standards.\n\n#### Related:\n* To see all your previous IPFS uploads, see [List all your IPFS uploads](../3.json/paths/~1v0~1me~1storage/get).\n* After uploading files, use [Upload metadata to IPFS](../3.json/paths/~1v0~1metadata/post) to continue with your NFT minting.\n* If you want to learn how to use the [customizable minting](../3.json/paths/~1v0~1mints~1customizable/post), see [Customizable Minting Quickstart](docs/minting/Minting-Quickstart.md#customizable-minting).\n\n#### Example Requests in cURL, Python & JS\n\n<!--\ntitle: \"Make sure to replace the parameters with your own values\"\nlineNumbers: true\n-->\n\n```shell\ncurl --request POST \\\n    --url 'https://api.nftport.xyz/v0/files' \\\n    --header 'Authorization: API Key Here' \\\n    --header 'Content-Type: multipart/form-data' \\\n    --form 'file=@/path/to/file_to_upload.png;type=image/png'\n```\n\n```python\nimport requests\n\nfile = open(\"image.png\", \"rb\")\n\nresponse = requests.post(\n    \"https://api.nftport.xyz/v0/files\",\n    headers={\"Authorization\": 'API-Key-Here'},\n    files={\"file\": file}\n)\n```\n\n```javascript\nconst fs = require('fs');\nconst fetch = require('node-fetch');\nconst FormData = require('form-data');\n\nconst form = new FormData();\nconst fileStream = fs.createReadStream('image.jpg');\nform.append('file', fileStream);\n\nconst options = {\n  method: 'POST',\n  body: form,\n  headers: {\n    \"Authorization\": \"API-Key-Here\",\n  },\n};\n\nfetch(\"https://api.nftport.xyz/v0/files\", options)\n  .then(response => {\n    return response.json()\n  })\n  .then(responseJson => {\n    // Handle the response\n    console.log(responseJson);\n  })\n```",
        "operationId": "ipfs_upload_file_v0_files_post",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_ipfs_upload_file_v0_files_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The details of the uploaded file and the IPFS URL.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IpfsFileUploadResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v0/metadata": {
      "post": {
        "tags": ["Storage"],
        "summary": "Upload metadata to IPFS",
        "description": "Uploads NFT metadata to [IPFS](https://docs.ipfs.io/concepts/what-is-ipfs/) as a JSON file which is the standard format for  [NFT metadata](https://nftschool.dev/reference/metadata-schemas/#intro-to-json-schemas). You can use the returned ```metadata_ipfs_uri``` in [Customizable minting](../3.json/paths/~1v0~1mints~1customizable/post) to mint your NFT.\n\nIf you prefer hosting metadata in your own servers, you can skip this step. Otherwise, we recommend using IPFS because it’s an industry standard for decentralized storage and guarantees the immutability of your metadata. For the ```file_url```, we also recommend using IPFS with [Upload a file to IPFS](../3.json/paths/~1v0~1files/post).\nWe use [nft.storage](https://nft.storage/) to [pin](https://docs.ipfs.io/how-to/pin-files/) the files with Filecoin, which ensures that your important data is retained in IPFS.\n\n#### Useful for:\n* Storing your NFT metadata easily and according to the industry standards.\n\n#### Related:\n* To see all your previous IPFS uploads, see [List all your IPFS uploads](../3.json/paths/~1v0~1me~1storage/get).\n* After uploading your metadata, use [Customizable minting](../3.json/paths/~1v0~1mints~1customizable/post) to continue with your NFT minting.\n* If you are new to NFT metadata, see the [basics on it](https://nftschool.dev/reference/metadata-schemas/).",
        "operationId": "ipfs_upload_metadata_v0_metadata_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IpfsMetadataUploadRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The details of the NFT metadata and the uploaded metadata URI which you can use in [Customizable minting](../3.json/paths/~1v0~1mints~1customizable/post)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IpfsMetadataUploadResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v0/metadata/directory": {
      "post": {
        "tags": ["Storage"],
        "summary": "Upload metadata directory to IPFS",
        "description": "Uploads an array of JSON files containing NFT metadata to [IPFS](https://docs.ipfs.io/concepts/what-is-ipfs/).\nThe output is an IPFS URI of a directory containing the uploaded JSON files. The IPFS URI of this directory will be used as the `base_uri` in [Collection contract](../3.json/paths/~1v0~1contracts~1collections/post).\n\nIPFS is an industry standard for decentralized storage and guarantees the immutability of your metadata. For the ```file_url```, we also recommend using IPFS with [Upload a file to IPFS](../3.json/paths/~1v0~1files/post).\nWe use [nft.storage](https://nft.storage/) to [pin](https://docs.ipfs.io/how-to/pin-files/) the files with Filecoin, which ensures that your important data is retained in IPFS.\n\n**Supports only files with [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types) as application/json.**\n\n**Maximum number of files that can be uploaded together is 25,000 and maximum total file size is 50MB**\n\n<!-- theme: info -->\n> ### Note:\n> * All metadata files must be uploaded at once since IPFS creates a unique immutable hash of all files in the directory.\n> * To work with [Collection contracts](../3.json/paths/~1v0~1contracts~1collections/post), the filenames should be token IDs starting from 0.\n> * The file extension will be removed and only the filename will be retained in the IPFS directory (eg: '4521.json' will become '4521' on IPFS).\n> * All files will be placed at the base of the directory.\n\n#### Useful for:\n* Uploading a directory of metadata files to IPFS.\n\n#### Related:\n* To see all your previous IPFS uploads, see [List all your IPFS uploads](../3.json/paths/~1v0~1me~1storage/get).\n* If you are new to NFT metadata, see the [basics on it](https://nftschool.dev/reference/metadata-schemas/).\n\n```python title=\"This script uploads all JSON files in the 'Metadata' directory to IPFS\"\nimport requests\nimport os\nfrom os import listdir\nfrom os.path import join\n\nmetadata_directory_path = \"Metadata\" #Replace with your path\n\nfiles = [f for f in listdir(metadata_directory_path) if str(join(metadata_directory_path, f)).endswith('.json')]\nmetadata_files = []\n\nfor metadata in files:\n    metadata_files.append(\n        (\"metadata_files\", open(os.path.join(metadata_directory_path, metadata), \"rb\")))\n\nresponse = requests.post(\n        \"https://api.nftport.xyz/v0/metadata/directory\",\n        headers={\"Authorization\": \"Your-API-Key\"},\n        files=metadata_files\n    )\nprint(response.json())\n```\n\n```javascript title=\"This script uploads all JSON files in the 'Metadata' directory to IPFS\"\nconst fs = require('fs');\nconst path = require('path')\nconst request = require('request');\n\nAPI_KEY = \"YOUR_API_KEY\" // Replace with your API key\nMETADATA_DIRECTORY_PATH = \"Metadata\" // Replace with your path to directory folder containing metadata json files\n\n\nfunction isJson(filename) {\nreturn filename.split('.').pop() === \"json\"\n}\n\nfunction getFileStreamForJSONFiles(directory) {\nconst jsonArray = []\nfs.readdirSync(directory).forEach(file => {\n    if(!isJson(file)) {\n    return\n    }\n    const fileData = fs.createReadStream(path.join(directory, file));\n    jsonArray.push(fileData)\n});\nreturn jsonArray\n}\n\nfunction sendRequest(metadataFileStreams, apiKey) {\n    const options = {\n        url: 'https://api.nftport.xyz/v0/metadata/directory',\n        headers: { \"Authorization\": apiKey }\n    }\n    const req = request.post(options, function (err, resp, body) {\n        if (err) {\n            console.error('Error: ' + err);\n        } else {\n            console.log('Response: ' + body);\n        }\n    });\n    const form = req.form();\n    metadataFileStreams.forEach(file => {\n        form.append('metadata_files', file);\n    })\n\n}\n\nmetadataFileStreams = getFileStreamForJSONFiles(METADATA_DIRECTORY_PATH)\nsendRequest(metadataFileStreams, API_KEY)\n```",
        "operationId": "ipfs_upload_metadata_directory_v0_metadata_directory_post",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_ipfs_upload_metadata_directory_v0_metadata_directory_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The IPFS URI of the uploaded directory which you can use as the `base_uri` in [Collection contracts](../3.json/paths/~1v0~1contracts~1collections/post)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IpfsMetadataDirectoryUploadResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v0/mints/customizable": {
      "put": {
        "tags": ["Product minting"],
        "summary": "Update a minted NFT",
        "description": "Updates an NFT which has been previously minted with [Customizable minting](../3.json/paths/~1v0~1mints~1customizable/post)\nor [Batch customizable minting](../3.json/paths/~1v0~1mints~1customizable~1batch/post). You can update the metadata URI with a new link or freeze the metadata URI to permanently lock it. The NFT must be minted in your deployed contract and update only works if contract and token are not frozen.\n\n1.  First, you need ```contract_address``` from [Deploy a contract for NFT products](../3.json/paths/~1v0~1contracts/post) and ```metadata_updatable``` must be set ```true```.\n2.  Secondly, you need ```token_id``` from [Customizable minting](../3.json/paths/~1v0~1mints~1customizable/post) or [Batch customizable minting](../3.json/paths/~1v0~1mints~1customizable~1batch/post).\n3.  If you only wish to update the metadata URI set a new ```metadata_uri```. If you wish to update metadata URI and freeze both at the same time then set a new ```metadata_uri``` and ```freeze_metadata``` as ```true```. If you only want to freeze existing metadata URI, then set ```freeze_metadata``` as ```true```.\n\n#### Useful for:\n* Creating dynamic NFTs (NFTs that change after minting based on events).\n* Revealing NFTs after the drop.\n\n#### Related:\n* If you want to learn how to use [customizable minting](../3.json/paths/~1v0~1mints~1customizable/post), see [Customizable Minting Quickstart](docs/minting/Minting-Quickstart.md#customizable-minting).\n* If you wish to list all your previously minted NFTs, see [List all your minted NFTs](../3.json/paths/~1v0~1me~1mints/get).",
        "operationId": "update_nft_v0_mints_customizable_put",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateNftRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns transaction hash which can be used to confirm that the transaction was successful (blockchain transactions can take up to a few minutes depending on how congested the network is).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateNftResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": ["Product minting"],
        "summary": "Customizable minting",
        "description": "Mints an NFT to your previously deployed contract for NFT products. This minting consists of multiple steps and enables you to customize the whole minting flow for your exact needs.\n\n1.  First, you need  ```contract_address```  using [Deploy a contract for NFT products](../3.json/paths/~1v0~1contracts/post).\n2.  Secondly, you need  ```metadata_uri```  using [Upload metadata to IPFS](../3.json/paths/~1v0~1metadata/post).\n\nAfter minting, the NFT will appear in the  ```mint_to_address```  wallet. If you minted to your own wallet, you can also see the minted NFT on OpenSea in your profile after a few minutes.\n\n**You can mint up to 100 NFTs for free per chain. Maximum supported filesize is 50MB. For higher limits, see [pricing](https://www.nftport.xyz/pricing).**\n\n#### Useful for:\n* Minting to your own product contracts effortlessly.\n* Creating customizable minting flows which enable to build NFT-based products.\n\n#### Related:\n* If you want to learn how to use [customizable minting](../3.json/paths/~1v0~1mints~1customizable/post), see [Customizable Minting Quickstart](docs/minting/Minting-Quickstart.md#customizable-minting).\n* If you wish to list all your previously minted NFTs, see [List all your minted NFTs](../3.json/paths/~1v0~1me~1mints/get).\n* To see all your previous IPFS uploads, see [List all your IPFS uploads](../3.json/paths/~1v0~1me~1storage/get).",
        "operationId": "mint_nft_v0_mints_customizable_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MintNftRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns contract address and the transaction hash which can be used in [Return minted NFT](../3.json/paths/~1v0~1mints~1{transaction_hash}/get) to receive the token ID and confirm that the minting was successful (minting can take up to a few minutes depending on how congested the network is).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MintNftResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": ["Product minting"],
        "summary": "Burn a minted NFT",
        "description": "Burns an NFT which has been previously minted with [Customizable minting](../3.json/paths/~1v0~1mints~1customizable/post).\nBurning an NFT means destroying it by sending it to a null (un-spendable) address.\nTransactions leading up to the burn will remain on the blockchain.\n\n**Note**: Burning is possible only if the token is owned by the contract owner and the token has not been transferred/sold yet.\n\n#### Related:\n* If you want to update a minted NFT, see [Update a minted NFT](../3.json/paths/~1v0~1mints~1customizable/put).\n* If you want to burn a batch of NFTs, see [Batch burn minted NFTs](../3.json/paths/~1v0~1mints~1customizable~1batch/delete).",
        "operationId": "burn_nft_v0_mints_customizable_delete",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BurnNftRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns transaction hash which can be used to confirm that the transaction was successful (blockchain transactions can take up to a few minutes depending on how congested the network is).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BurnNftResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v0/mints/customizable/batch": {
      "post": {
        "tags": ["Product batch minting"],
        "summary": "Batch customizable minting (ERC1155)",
        "description": "Batch mints NFTs to your previously deployed ERC1155 NFT product contract. This minting consists of multiple steps and enables you to customize the whole minting flow for your exact needs.\nBatch minting allows you to create multiple NFTs with one API call and create more than one of the same token.\n\n1.  First, you need  ```contract_address```  using [Deploy a contract for NFT products](../3.json/paths/~1v0~1contracts/post).\n2.  Secondly, you need  ```metadata_uri```  using [Upload metadata to IPFS](../3.json/paths/~1v0~1metadata/post).\n\nAfter minting, the NFTs will appear in the  ```mint_to_address```  wallet.\nIf you minted to your own wallet, you can also see the minted NFTs on OpenSea in your profile after a few minutes.\n\n**You can mint up to 100 NFTs for free per chain. Maximum supported filesize is 50MB. For higher limits, see [pricing](https://www.nftport.xyz/pricing).**\n\n#### Useful for:\n* Minting to your own NFT product contracts effortlessly.\n* Creating customizable minting flows which enable to build NFT-based products.\n\n#### Related:\n* If you want to learn how to use [customizable minting](../3.json/paths/~1v0~1mints~1customizable/post), see [Customizable Minting Quickstart](docs/minting/Minting-Quickstart.md#customizable-minting).\n* If you wish to list all your previously minted NFTs, see [List all your minted NFTs](../3.json/paths/~1v0~1me~1mints/get).\n* To see all your previous IPFS uploads, see [List all your IPFS uploads](../3.json/paths/~1v0~1me~1storage/get).",
        "operationId": "mint_batch_nft_v0_mints_customizable_batch_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MintBatchNftRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns contract address and the transaction hash which can be used in [Return minted NFT](../3.json/paths/~1v0~1mints~1{transaction_hash}/get) to receive the token ID and confirm that the minting was successful (minting can take up to a few minutes depending on how congested the network is).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MintBatchResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": ["Product batch minting"],
        "summary": "Batch burn minted NFTs (ERC1155 only)",
        "description": "Burns a batch of NFTs which have been previously minted with [Batch customizable minting](../3.json/paths/~1v0~1mints~1customizable~1batch/post).\nBurning an NFT means destroying it by sending it to a null (un-spendable) address.\nTransactions leading up to the burn will remain on the blockchain.\n\n**Note**: Burning is possible only if the token is owned by the contract owner and the token has not been transferred/sold yet.\n\n#### Related:\n* If you want to update a minted NFT, see [Update a minted NFT](../3.json/paths/~1v0~1mints~1customizable/put).\n* If you want to burn a single NFT, see [Burn a minted NFT](../3.json/paths/~1v0~1mints~1customizable/delete).",
        "operationId": "burn_batch_nft_v0_mints_customizable_batch_delete",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BurnBatchNftRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns transaction hash which can be used to confirm that the transaction was successful (blockchain transactions can take up to a few minutes depending on how congested the network is).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BurnNftResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v0/mints/transfers": {
      "post": {
        "tags": ["Product minting"],
        "summary": "Transfer a minted NFT",
        "description": "Transfers an NFT which has been previously minted with [Customizable minting](../3.json/paths/~1v0~1mints~1customizable/post) to another wallet address.\n\n**Note**: Transferring is possible only if the token is owned by the contract owner and the token has not been transferred/sold yet.\n\n#### Related:\n* If you want to update a minted NFT, see [Update a minted NFT](../3.json/paths/~1v0~1mints~1customizable/put).\n* If you want to transfer a batch of NFTs, see [Batch transfer minted NFTs](../3.json/paths/~1v0~1mints~1transfers~1batch/post).",
        "operationId": "transfer_nft_v0_mints_transfers_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransferNftRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns transaction hash which can be used to confirm that the transaction was successful (blockchain transactions can take up to a few minutes depending on how congested the network is).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransferNftResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v0/mints/transfers/batch": {
      "post": {
        "tags": ["Product batch minting"],
        "summary": "Batch transfer minted NFTs (ERC1155 only)",
        "description": "Transfers a batch of NFTs which have been previously minted with [Batch customizable minting](../3.json/paths/~1v0~1mints~1customizable~1batch/post) to other wallet addresses.\n\n**Note**: Transferring is possible only if the token is owned by the contract owner and the token has not been transferred/sold yet.\n\n#### Related:\n* If you want to update a minted NFT, see [Update a minted NFT](../3.json/paths/~1v0~1mints~1customizable/put).\n* If you want to transfer a single NFTs, see [Transfer a minted NFT](../3.json/paths/~1v0~1mints~1transfers/post).\n ",
        "operationId": "transfer_batch_nft_v0_mints_transfers_batch_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransferBatchNftRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns transaction hash which can be used to confirm that the transaction was successful (blockchain transactions can take up to a few minutes depending on how congested the network is).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransferNftResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v0/mints/easy/urls": {
      "post": {
        "tags": ["Easy minting"],
        "summary": "Easy minting w/URL",
        "description": "With Easy mint, you can turn anything into an NFT in less than 5 minutes using one simple API call. If you are new to minting, see  [Easy minting quickstart](docs/minting/Minting-Quickstart.md#easy-minting).\n\nAfter minting, the NFT will appear in the  ```mint_to_address```  wallet. If you minted to your own wallet, you can also see the minted NFT on OpenSea in your profile after a few minutes.\n\n**You can mint up to 100 NFTs for free per chain. Maximum supported file size is 50MB. For higher limits, see [pricing](https://www.nftport.xyz/pricing).**\n\n#### Useful for:\n* For turning anything into an NFT effortlessly. For all the benefits, see  [Your New Minting Superpowers](docs/minting/Minting-Quickstart.md#what-you-can-do-with-your-new-minting-superpowers).\n\n#### Related:\n* If you wish to customize the minting process e.g. use your own contract, see  [Customizable minting](docs/minting/Minting-Quickstart.md#advanced-minting-apis).\n* If you wish to list all your previously minted NFTs, see [List all your minted NFTs](../3.json/paths/~1v0~1me~1mints/get).",
        "operationId": "easy_mint_nft_v0_mints_easy_urls_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EasyMintNftRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns contract address and the transaction hash which can be used in [Return minted NFT](../3.json/paths/~1v0~1mints~1{transaction_hash}/get) to receive the token ID and confirm that the minting was successful (minting can take up to a few minutes depending on how congested the network is).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MintNftWithUploadResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v0/mints/easy/files": {
      "post": {
        "tags": ["Easy minting"],
        "summary": "Easy minting w/file upload",
        "description": "With Easy mint, you can turn anything into an NFT in less than 5 minutes using one simple API call. If you are new to minting, see  [Easy minting quickstart](docs/minting/Minting-Quickstart.md#easy-minting).\n\nAfter minting, the NFT will appear in the  ```mint_to_address```  wallet. If you minted to your own wallet, you can also see the minted NFT on OpenSea in your profile after a few minutes.\n\n**You can mint up to 100 NFTs for free per chain. Maximum supported file size is 50MB. For higher limits, see [pricing](https://www.nftport.xyz/pricing).**\n\n#### Useful for:\n* For turning anything into an NFT effortlessly. For all the benefits, see  [Your New Minting Superpowers](docs/minting/Minting-Quickstart.md#what-you-can-do-with-your-new-minting-superpowers).\n\n#### Related:\n* If you wish to customize the minting process e.g. use your own contract, see  [Customizable minting](docs/minting/Minting-Quickstart.md#advanced-minting-apis).\n* If you wish to list all your previously minted NFTs, see [List all your minted NFTs](../3.json/paths/~1v0~1me~1mints/get).\n\n#### Example Requests in cURL, Python & JS\n\n<!--\ntitle: \"Make sure to replace the parameters with your own values\"\nlineNumbers: true\n-->\n\n```shell\ncurl --request POST \\\n    --url 'https://api.nftport.xyz/v0/mints/easy/files?chain=polygon&name=NFT_Name&description=NFT_Description&mint_to_address=0x...' \\\n    --header 'Authorization: API Key Here' \\\n    --header 'Content-Type: multipart/form-data' \\\n    --form 'file=@/path/to/file_to_upload.png;type=image/png'\n```\n\n```python\nimport requests\n\nfile = open(\"image.png\", \"rb\")\n\nquery_params = {\n    \"chain\": \"polygon\",\n    \"name\": \"NFT_Name\",\n    \"description\": \"NFT_Description\",\n    \"mint_to_address\": Wallet_Address\n}\n\nresponse = requests.post(\n    \"https://api.nftport.xyz/v0/mints/easy/files\",\n    headers={\"Authorization\": \"API-Key-Here\"},\n    params=query_params,\n    files={\"file\": file}\n)\n```\n\n```javascript\nconst fs = require('fs');\nconst fetch = require('node-fetch');\nconst FormData = require('form-data');\n\nconst form = new FormData();\nconst fileStream = fs.createReadStream('/path/to/file_to_upload.png');\nform.append('file', fileStream);\n\nconst options = {\n  method: 'POST',\n  body: form,\n  headers: {\n    \"Authorization\": \"API-Key-Here\",\n  },\n};\n\nfetch(\"https://api.nftport.xyz/v0/mints/easy/files?\" + new URLSearchParams({\n  chain: 'polygon',\n  name: \"NFT_Name\",\n  description: \"NFT_Description\",\n  mint_to_address: \"Wallet_Address\",\n}), options)\n  .then(function(response) { return response.json() })\n  .then(function(responseJson) {\n    // Handle the response\n    console.log(responseJson);\n  })\n```",
        "operationId": "easy_mint_nft_with_upload_v0_mints_easy_files_post",
        "parameters": [
          {
            "description": "Blockchain to mint the NFT on.",
            "required": true,
            "schema": {
              "title": "Chain",
              "enum": ["polygon", "goerli"],
              "type": "string",
              "description": "Blockchain to mint the NFT on."
            },
            "name": "chain",
            "in": "query"
          },
          {
            "description": "Name of the NFT.",
            "required": true,
            "schema": {
              "title": "Name",
              "maxLength": 400,
              "minLength": 1,
              "type": "string",
              "description": "Name of the NFT."
            },
            "name": "name",
            "in": "query"
          },
          {
            "description": "Text description of the NFT which will be seen on NFT marketplaces, etc.",
            "required": true,
            "schema": {
              "title": "Description",
              "maxLength": 2000,
              "minLength": 1,
              "type": "string",
              "description": "Text description of the NFT which will be seen on NFT marketplaces, etc."
            },
            "name": "description",
            "in": "query"
          },
          {
            "description": "Account address where the NFT will be sent. For example, your Metamask wallet address if you wish to send it to yourself.",
            "required": true,
            "schema": {
              "title": "Mint To Address",
              "type": "string",
              "description": "Account address where the NFT will be sent. For example, your Metamask wallet address if you wish to send it to yourself."
            },
            "name": "mint_to_address",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_easy_mint_nft_with_upload_v0_mints_easy_files_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns contract address and the transaction hash which can be used in [Return minted NFT](../3.json/paths/~1v0~1mints~1{transaction_hash}/get) to receive the token ID and confirm that the minting was successful (minting can take up to a few minutes depending on how congested the network is).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MintNftWithUploadResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v0/mints/{transaction_hash}": {
      "get": {
        "tags": [""],
        "summary": "Retrieve a minted NFT",
        "description": "Returns the details of a minted NFT. You need to provide  ```transaction_hash```  which is returned from [Easy minting w/URL](../3.json/paths/~1v0~1mints~1easy~1urls/post), [Easy minting w/file upload](../3.json/paths/~1v0~1mints~1easy~1files/post) or [Customizable minting](../3.json/paths/~1v0~1mints~1customizable/post). Minting is not instantaneous because blockchains take time to verify transactions. Thus, you can poll this endpoint every 5 seconds until you get a response.\n\n#### Useful for:\n* Confirming that NFT minting was successful and the NFT is on chain.\n\n#### Related:\n* For easy minting, see [Easy minting w/URL](../3.json/paths/~1v0~1mints~1easy~1urls/post) or [Easy minting w/file upload](../3.json/paths/~1v0~1mints~1easy~1files/post).\n* For customizable minting, see [Customizable minting](../3.json/paths/~1v0~1mints~1customizable/post).\n* If you wish to list all your previously minted NFTs, see [List all your minted NFTs](../3.json/paths/~1v0~1me~1mints/get).\n* To see all your previous IPFS uploads, see [List all your IPFS uploads](../3.json/paths/~1v0~1me~1storage/get).",
        "operationId": "get_minted_nft_v0_mints__transaction_hash__get",
        "parameters": [
          {
            "description": "The transaction hash which was returned from Easy minting w/URL, Easy minting w/file upload or Customizable minting.",
            "required": true,
            "schema": {
              "title": "Transaction Hash",
              "type": "string",
              "description": "The transaction hash which was returned from Easy minting w/URL, Easy minting w/file upload or Customizable minting."
            },
            "name": "transaction_hash",
            "in": "path"
          },
          {
            "description": "Blockchain the NFT was minted on.",
            "required": true,
            "schema": {
              "title": "Chain",
              "enum": ["polygon", "ethereum", "goerli"],
              "type": "string",
              "description": "Blockchain the NFT was minted on."
            },
            "name": "chain",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Details of a successfully minted NFT which is on chain.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetMintedNftResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v0/mints/batch/{transaction_hash}": {
      "get": {
        "tags": ["Product batch minting"],
        "summary": "Retrieve batch minted NFTs",
        "description": "Returns the details of a batch minted NFTs for ERC1155 contracts.\nYou need to provide  ```transaction_hash```  which is returned from [Batch customizable minting](../3.json/paths/~1v0~1mints~1customizable~1batch/post).\nMinting is not instantaneous because blockchains take time to verify transactions.\nThus, you can poll this endpoint every 5 seconds until you get a response.\n\n#### Useful for:\n* Confirming that NFT minting was successful and the NFTs are on chain.\n\n#### Related:\n* For batch customizable minting, see [Batch customizable minting](../3.json/paths/~1v0~1mints~1customizable~1batch/post).",
        "operationId": "get_batch_minted_nft_v0_mints_batch__transaction_hash__get",
        "parameters": [
          {
            "description": "The transaction hash which was returned from Customizable minting.",
            "required": true,
            "schema": {
              "title": "Transaction Hash",
              "type": "string",
              "description": "The transaction hash which was returned from Customizable minting."
            },
            "name": "transaction_hash",
            "in": "path"
          },
          {
            "description": "Blockchain the NFT was minted on.",
            "required": true,
            "schema": {
              "title": "Chain",
              "enum": ["polygon", "goerli"],
              "type": "string",
              "description": "Blockchain the NFT was minted on."
            },
            "name": "chain",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Details of a successfully minted NFT which is on chain.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetBatchMintedNftResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v0/me/contracts": {
      "get": {
        "tags": ["User"],
        "summary": "List all your deployed product contracts",
        "description": "Returns a list of all the contracts you’ve previously deployed with [Deploy a contract for NFT products](../3.json/paths/~1v0~1contracts/post).\n\n#### Useful for:\n* Retrieving your contract creation history.\n\n#### Related:\n* To see all the NFTs you've previously minted, see [List all your minted NFTs](../3.json/paths/~1v0~1me~1mints/get).\n* To see all your previous IPFS uploads, see [List all your IPFS uploads](../3.json/paths/~1v0~1me~1storage/get).",
        "operationId": "get_user_contracts_v0_me_contracts_get",
        "responses": {
          "200": {
            "description": "List of all the contracts deployed by you.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserProfileContractsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v0/me/contracts/abis/{contract_address}": {
      "get": {
        "tags": ["User"],
        "summary": "Get contract ABI",
        "description": "Returns the ABI for a contract you’ve previously deployed with \n[Deploy a contract for NFT products](../3.json/paths/~1v0~1contracts/post) or\n[Deploy a contract for NFT collections](../3.json/paths/~1v0~1contracts~1collections/post).\n\n#### Useful for:\n* Retrieving your contract ABI, for direct on-chain contract calls.\n\n#### Related:\n* To see all the contracts you've previously deployed, see [List all your deployed contracts](../3.json/paths/~1v0~1me~1contracts/get).\n* If you want to learn how to use the [customizable minting](../3.json/paths/~1v0~1mints~1customizable/post), see [Customizable Minting Quickstart](docs/minting/Minting-Quickstart.md#customizable-minting).",
        "operationId": "get_user_contracts_abis_v0_me_contracts_abis__contract_address__get",
        "parameters": [
          {
            "description": "Address of the NFT contract.",
            "required": true,
            "schema": {
              "title": "Contract Address",
              "type": "string",
              "description": "Address of the NFT contract."
            },
            "name": "contract_address",
            "in": "path"
          },
          {
            "description": "Blockchain where the contract has been deployed to.",
            "required": true,
            "schema": {
              "title": "Chain",
              "enum": ["polygon", "rinkeby", "ethereum", "goerli"],
              "type": "string",
              "description": "Blockchain where the contract has been deployed to."
            },
            "name": "chain",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ABI for provided contract",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserProfileContractsABIsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v0/me/contracts/collections": {
      "get": {
        "tags": ["User"],
        "summary": "List all your deployed collection contracts",
        "description": "Returns a list of all the collection contracts you’ve previously deployed.\nIt can also return merkle proofs of all the whitelisted addresses with `include` set to `merkle_proofs`. These proofs can be used during presale/whitelisted minting.\nA Merkle proof is a series of hashes which can be combined with the Merkle tree root and and the node (address) it was generated for, to verify that the node is contained in the Merkle tree without having access to the entire tree.\n\n#### Useful for:\n* Retrieving collection-specific contract details.\n* Retrieving your collection contract creation history.\n* Getting merkle proofs of whitelisted addresses.",
        "operationId": "get_user_contracts_collection_v0_me_contracts_collections_get",
        "parameters": [
          {
            "description": "Blockchain where the contracts have been deployed to.",
            "required": true,
            "schema": {
              "title": "Chain",
              "enum": ["polygon", "rinkeby", "ethereum", "goerli"],
              "type": "string",
              "description": "Blockchain where the contracts have been deployed to."
            },
            "name": "chain",
            "in": "query"
          },
          {
            "description": "Include optional data in the response. ```merkle_proofs``` includes Merkle proofs of all the whitelisted addresses in the contract.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/UserProfileContractsCollectionsInclude"
              },
              "description": "Include optional data in the response. ```merkle_proofs``` includes Merkle proofs of all the whitelisted addresses in the contract.",
              "default": ["default"]
            },
            "name": "include",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of all collection contracts you have deployed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserProfileContractsCollectionsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v0/me/mints": {
      "get": {
        "tags": ["User"],
        "summary": "List all your minted NFTs",
        "description": "Returns a list of all the NFTs you’ve previously minted with [Easy minting w/URL](../3.json/paths/~1v0~1mints~1easy~1urls/post), [Easy minting w/file upload](../3.json/paths/~1v0~1mints~1easy~1files/post) or [Customizable minting](../3.json/paths/~1v0~1mints~1customizable/post).\n\nFor recently minted NFTs, it may take a few minutes until they appear in this response.\n\n#### Useful for:\n* Retrieving your NFT minting history.\n\n#### Related:\n* To see all the contracts you've previously deployed, see [List all your deployed contracts](../3.json/paths/~1v0~1me~1contracts/get).\n* To see all your previous IPFS uploads, see [List all your IPFS uploads](../3.json/paths/~1v0~1me~1storage/get).",
        "operationId": "get_user_minted_nfts_v0_me_mints_get",
        "parameters": [
          {
            "description": "Blockchain where the NFTs have been minted.",
            "required": false,
            "schema": {
              "title": "Chain",
              "enum": ["polygon", "rinkeby", "ethereum", "goerli"],
              "type": "string",
              "description": "Blockchain where the NFTs have been minted."
            },
            "name": "chain",
            "in": "query"
          },
          {
            "description": "The page number of the results to return. The first page is 1.",
            "required": false,
            "schema": {
              "title": "Page Number",
              "minimum": 1.0,
              "type": "integer",
              "description": "The page number of the results to return. The first page is 1.",
              "default": 1
            },
            "name": "page_number",
            "in": "query"
          },
          {
            "description": "The number of results returned per page. Limit can range between 1 and 50, and the default is 50.",
            "required": false,
            "schema": {
              "title": "Page Size",
              "maximum": 50.0,
              "minimum": 1.0,
              "type": "integer",
              "description": "The number of results returned per page. Limit can range between 1 and 50, and the default is 50.",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of all the NFTs minted by you.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserProfileMintedNftsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v0/me/storage": {
      "get": {
        "tags": ["User"],
        "summary": "List all your IPFS uploads",
        "description": "Returns a list of all data uploaded to IPFS by you. This includes files, metadata and directories uploaded to IPFS.\n\n**Note: Only lists IPFS uploads created after 2022-03-21T12:10:00 UTC.**\n\n#### Useful for:\n* Retrieving your uploaded data to IPFS.\n\n#### Related:\n* To see all the NFTs you've previously minted, see [List all your minted NFTs](../3.json/paths/~1v0~1me~1mints/get).",
        "operationId": "get_user_storage_v0_me_storage_get",
        "parameters": [
          {
            "description": "Type of storage.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/StorageRequestType"
              },
              "description": "Type of storage."
            },
            "name": "type",
            "in": "query"
          },
          {
            "description": "The page number of the results to return. The first page is 1.",
            "required": false,
            "schema": {
              "title": "Page Number",
              "minimum": 1.0,
              "type": "integer",
              "description": "The page number of the results to return. The first page is 1.",
              "default": 1
            },
            "name": "page_number",
            "in": "query"
          },
          {
            "description": "The number of results returned per page. Limit can range between 1 and 500, and the default is 50.",
            "required": false,
            "schema": {
              "title": "Page Size",
              "maximum": 500.0,
              "minimum": 1.0,
              "type": "integer",
              "description": "The number of results returned per page. Limit can range between 1 and 500, and the default is 50.",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          },
          {
            "description": "Data uploaded to IPFS after this date (ISO) will be in the repsonse. Eg: 2022-02-24T11:30:48.",
            "required": false,
            "schema": {
              "title": "Start Date",
              "type": "string",
              "description": "Data uploaded to IPFS after this date (ISO) will be in the repsonse. Eg: 2022-02-24T11:30:48."
            },
            "name": "start_date",
            "in": "query"
          },
          {
            "description": "Data uploaded to IPFS till this date (ISO) will be in the repsonse. Eg: 2022-03-19T19:45:48.",
            "required": false,
            "schema": {
              "title": "End Date",
              "type": "string",
              "description": "Data uploaded to IPFS till this date (ISO) will be in the repsonse. Eg: 2022-03-19T19:45:48."
            },
            "name": "end_date",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of all the data uploaded to IPFS by you.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserProfileStorageResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v0/me/settings": {
      "get": {
        "tags": ["User"],
        "summary": "User settings",
        "description": "Retrieve your NFTPort settings to check your usage and limits.\n#### Useful for:\n* Checking your minting and contract deployment usage and limits.\n* Checking your NFT Data rate limits\n\n#### Related:\n* You can access the same information on your [NFTPort dashboard](https://dashboard.nftport.xyz).\n* To see your minted NFTs, see [List all your minted NFTs](../3.json/paths/~1v0~1me~1mints/get).\n* To see your deployed contracts, see [List all your deployed contracts](../3.json/paths/~1v0~1me~1contracts/get).",
        "operationId": "get_user_settings_v0_me_settings_get",
        "responses": {
          "200": {
            "description": "Your API usage and limits.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserProfileSettingsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v0/search": {
      "get": {
        "tags": ["Search"],
        "summary": "Multi-chain NFT search",
        "description": "Searches NFTs across multiple chains using a text query, specifically the ```name``` and ```description``` fields from the metadata. You can think of it like performing a search on Google. It's designed to help you find the one or the most closest NFT results you're looking for.\n\nEthereum and Polygon are supported, including multi-chain search.\n\n#### Useful for:\n* Finding NFTs by their name and/or description.\n* Quickly integrating NFT search to your application.\n\n#### Related:\n* To get NFT recommendations, use [Recommend similar NFTs](../4.json/paths/~1v0~1recommendations~1similar_nfts~1urls/post).\n* To find duplicate NFTs, use [Find duplicate NFTs](../4.json/paths/~1v0~1duplicates~1files/post).",
        "operationId": "text_search_v0_search_get",
        "parameters": [
          {
            "description": "Search query.",
            "required": true,
            "schema": {
              "title": "Text",
              "type": "string",
              "description": "Search query."
            },
            "name": "text",
            "in": "query"
          },
          {
            "description": "Blockchain from which to query NFTs.",
            "required": false,
            "schema": {
              "title": "Chain",
              "enum": ["polygon", "ethereum", "all"],
              "type": "string",
              "description": "Blockchain from which to query NFTs.",
              "default": "all"
            },
            "name": "chain",
            "in": "query"
          },
          {
            "description": "The page number of the results to return. The first page is 1.",
            "required": false,
            "schema": {
              "title": "Page Number",
              "minimum": 1.0,
              "type": "integer",
              "description": "The page number of the results to return. The first page is 1.",
              "default": 1
            },
            "name": "page_number",
            "in": "query"
          },
          {
            "description": "The number of results returned per page. Limit can range between 1 and 50, and the default is 50.",
            "required": false,
            "schema": {
              "title": "Page Size",
              "maximum": 50.0,
              "minimum": 1.0,
              "type": "integer",
              "description": "The number of results returned per page. Limit can range between 1 and 50, and the default is 50.",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          },
          {
            "description": "Results ordering criteria. Deafult ordering criteria is search relevance.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/TextSearchRequestOrder"
                }
              ],
              "description": "Results ordering criteria. Deafult ordering criteria is search relevance.",
              "default": "relevance"
            },
            "name": "order_by",
            "in": "query"
          },
          {
            "description": "Results will be sorted in this order (ascending/descending).",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/TextSearchRequestSortOrder"
                }
              ],
              "description": "Results will be sorted in this order (ascending/descending).",
              "default": "desc"
            },
            "name": "sort_order",
            "in": "query"
          },
          {
            "description": "Results will only include NFTs from this contract address.",
            "required": false,
            "schema": {
              "title": "Filter By Contract Address",
              "type": "string",
              "description": "Results will only include NFTs from this contract address."
            },
            "name": "filter_by_contract_address",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON object with an ```nfts``` property that contains an array of up to ```page_size``` NFTs. Each entry in the array is a separate NFT. If no more NFTs are available, the resulting array will be empty.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TextSearchResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v0/recommendations/similar_nfts/urls": {
      "post": {
        "tags": ["Recommendations AI"],
        "summary": "Find similar NFTs w/URL",
        "description": "Returns visually and contextually similar images to the input image passed with ```url```. Uses state of the art computer vision AI to match the input image against all ETH & Polygon NFT images in our database. You can think of it like Google reverse image search.\n\nYou can see this functionality live with [Fingible](https://fingible.nftport.xyz/).\n\n**Maximum supported file size is 50MB.**\n\n#### Useful for:\n* Providing recommendations to your users e.g. like Amazon, Netflix so you can increase revenue.\n* Building new AI-based products and experiences for your users such as [Google for NFTs](https://fingible.nftport.xyz/).\n\n#### Related:\n* For searching for NFTs with keywords, see [Multi-chain NFT search](../4.json/paths/~1v0~1search/get).\n* For finding duplicates/copies of NFTs, see [Find duplicate NFTs](../4.json/paths/~1v0~1duplicates~1files/post).",
        "operationId": "search_url_v0_recommendations_similar_nfts_urls_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchUrlRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A JSON object with an ```nfts``` property that contains an array of up to ```page_size``` NFTs. Each entry in the array is a separate NFT. If no more NFTs are available, the resulting array will be empty.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v0/recommendations/similar_nfts/files": {
      "post": {
        "tags": ["Recommendations AI"],
        "summary": "Find similar NFTs w/file upload",
        "description": "Returns visually and contextually similar images to the uploaded image with  ```file```. Uses state of the art computer vision AI to match the input image against all ETH & Polygon NFT images in our database. You can think of it like Google reverse image search.\n\nYou can see this functionality live with  [Fingible](https://fingible.nftport.xyz/).\n\n**Maximum supported file size is 50MB.**\n\n#### Useful for:\n* Providing recommendations to your users e.g. like Amazon, Netflix so you can increase revenue.\n* Building new AI-based products and experiences for your users such as  [Google for NFTs](https://fingible.nftport.xyz/).\n\n#### Related:\n* For searching for NFTs with keywords, see [Multi-chain NFT search](../4.json/paths/~1v0~1search/get).\n* For finding duplicates/copies of NFTs, see [Find duplicate NFTs](../4.json/paths/~1v0~1duplicates~1files/post).",
        "operationId": "search_file_v0_recommendations_similar_nfts_files_post",
        "parameters": [
          {
            "description": "The page number of the results to return. The first page is 1.",
            "required": false,
            "schema": {
              "title": "Page Number",
              "minimum": 1.0,
              "type": "integer",
              "description": "The page number of the results to return. The first page is 1.",
              "default": 1
            },
            "name": "page_number",
            "in": "query"
          },
          {
            "description": "The number of results returned per page. Limit can range between 1 and 50, and the default is 50.",
            "required": false,
            "schema": {
              "title": "Page Size",
              "maximum": 50.0,
              "minimum": 1.0,
              "type": "integer",
              "description": "The number of results returned per page. Limit can range between 1 and 50, and the default is 50.",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_search_file_v0_recommendations_similar_nfts_files_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A JSON object with an ```nfts``` property that contains an array of up to ```page_size``` NFTs. Each entry in the array is a separate NFT. If no more NFTs are available, the resulting array will be empty.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v0/duplicates/files": {
      "post": {
        "tags": ["Duplicate Detection AI"],
        "summary": "Find counterfeit NFTs w/file upload",
        "description": "Analyzes the input image passed with ```file``` and returns duplicates (i.e. counterfeits) against it. Uses state of the art computer vision AI to match the input image against all ETH & Polygon NFT images in our database and returns duplicates which pass the ```threshold```.\n\n**Supported file formats: JPG, JPEG, PNG, PPM, BMP, PGM, TIF, TIFF, WebP.**\n\n#### Useful for:\n* **Increase customer trust and lower fraud** - enable users to see if an NFT is unique or already minted/sold somewhere else by showing information on existing duplicate NFTs.\n* **Credit and protect creators** - build processes that defend against IP theft and/or credit the original authors when their work has been used in similar NFTs.\n* **Enable and attract large IP holders (e.g. Disney)** to upload content as NFTs by ensuring automatic copyright protection (similar to YouTube's Content ID).\n* **Finding original owner** - find the NFT owner simply with the NFT image.\n\n#### Related:\n* To find similar NFTs which can be used as recommendations, see [Find similar NFTs w/URL](../4.json/paths/~1v0~1recommendations~1similar_nfts~1urls/post) or [Find similar NFTs w/file upload](../4.json/paths/~1v0~1recommendations~1similar_nfts~1files/post).",
        "operationId": "similar_nfts_v0_duplicates_files_post",
        "parameters": [
          {
            "description": "The page number of the results to return. The first page is 1.",
            "required": false,
            "schema": {
              "title": "Page Number",
              "minimum": 1.0,
              "type": "integer",
              "description": "The page number of the results to return. The first page is 1.",
              "default": 1
            },
            "name": "page_number",
            "in": "query"
          },
          {
            "description": "The number of results returned per page. Limit can range between 1 and 50, and the default is 50.",
            "required": false,
            "schema": {
              "title": "Page Size",
              "maximum": 50.0,
              "minimum": 1.0,
              "type": "integer",
              "description": "The number of results returned per page. Limit can range between 1 and 50, and the default is 50.",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          },
          {
            "description": "Threshold for classifying an NFT as a counterfeit.",
            "required": false,
            "schema": {
              "title": "Threshold",
              "maximum": 1.0,
              "minimum": 0.1,
              "type": "number",
              "description": "Threshold for classifying an NFT as a counterfeit.",
              "default": 0.9
            },
            "name": "threshold",
            "in": "query"
          },
          {
            "description": "NFTs from this contract address will be filtered out. Useful for examples where the whole NFT collection is visually very similar e.g. CryptoPunks.",
            "required": false,
            "schema": {
              "title": "Filter Out Contract Address",
              "type": "string",
              "description": "NFTs from this contract address will be filtered out. Useful for examples where the whole NFT collection is visually very similar e.g. CryptoPunks."
            },
            "name": "filter_out_contract_address",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_similar_nfts_v0_duplicates_files_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Details of counterfeit NFTs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentIdResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v0/duplicates/urls": {
      "post": {
        "tags": ["Duplicate Detection AI"],
        "summary": "Find counterfeit NFTs w/url",
        "description": "Analyzes the input image passed with ```url``` and returns duplicates (i.e. counterfeits) against it. Uses state of the art computer vision AI to match the input image against all ETH & Polygon NFT images in our database and returns duplicates which pass the ```threshold```.\n\n**Supported file formats: JPG, JPEG, PNG, PPM, BMP, PGM, TIF, TIFF, WebP.**\n\n#### Useful for:\n* **Increase customer trust and lower fraud** - enable users to see if an NFT is unique or already minted/sold somewhere else by showing information on existing duplicate NFTs.\n* **Credit and protect creators** - build processes that defend against IP theft and/or credit the original authors when their work has been used in similar NFTs.\n* **Enable and attract large IP holders (e.g. Disney)** to upload content as NFTs by ensuring automatic copyright protection (similar to YouTube's Content ID).\n* **Finding original owner** - find the NFT owner simply with the NFT image.\n\n#### Related:\n* To find similar NFTs which can be used as recommendations, see [Find similar NFTs w/URL](../4.json/paths/~1v0~1recommendations~1similar_nfts~1urls/post) or [Find similar NFTs w/file upload](../4.json/paths/~1v0~1recommendations~1similar_nfts~1files/post).",
        "operationId": "similar_nfts_url_v0_duplicates_urls_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentIdUrlRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Details of counterfeit NFTs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentIdResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v0/duplicates/tokens": {
      "post": {
        "tags": ["Duplicate Detection AI"],
        "summary": "Find counterfeit NFTs w/token ID",
        "description": "Analyzes the input nft image passed with ```chain```,  ```contract_address``` and  ```token_id```,  and returns duplicates (i.e. counterfeits) against it. Uses state of the art computer vision AI to match the input image against all ETH & Polygon NFT images in our database and returns duplicates which pass the ```threshold```.\n\n**Supported file formats: JPG, JPEG, PNG, PPM, BMP, PGM, TIF, TIFF, WebP.**\n\n#### Useful for:\n* **Increase customer trust and lower fraud** - enable users to see if an NFT is unique or already minted/sold somewhere else by showing information on existing duplicate NFTs.\n* **Credit and protect creators** - build processes that defend against IP theft and/or credit the original authors when their work has been used in similar NFTs.\n* **Enable and attract large IP holders (e.g. Disney)** to upload content as NFTs by ensuring automatic copyright protection (similar to YouTube's Content ID).\n* **Finding original owner** - find the NFT owner simply with the NFT image.\n\n#### Related:\n* To find similar NFTs which can be used as recommendations, see [Find similar NFTs w/URL](../4.json/paths/~1v0~1recommendations~1similar_nfts~1urls/post) or [Find similar NFTs w/file upload](../4.json/paths/~1v0~1recommendations~1similar_nfts~1files/post).",
        "operationId": "similar_nfts_address_v0_duplicates_tokens_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentIdNftRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Details of counterfeit NFTs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentIdResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/": {
      "get": {
        "summary": "Root",
        "operationId": "root__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AccountContractsRequestType": {
        "title": "AccountContractsRequestType",
        "enum": ["owns_contract_nfts", "owns_contracts"],
        "type": "string",
        "description": "An enumeration."
      },
      "AccountContractsResponse": {
        "title": "AccountContractsResponse",
        "required": ["response", "contracts", "total"],
        "type": "object",
        "properties": {
          "response": {
            "title": "Response",
            "type": "string",
            "description": "Response status, either OK or NOK."
          },
          "contracts": {
            "title": "Contracts",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContractsModelResponse"
            }
          },
          "total": {
            "title": "Total",
            "type": "integer",
            "description": "Total number of contracts owned by the account address."
          },
          "continuation": {
            "title": "Continuation",
            "type": "string",
            "description": "Continuation ID for next page."
          }
        },
        "example": {
          "response": "OK",
          "contracts": [
            {
              "name": "Decentraland LAND",
              "symbol": "LAND",
              "type": "ERC721",
              "metadata": {
                "description": "A collection of 10,000 utility-enabled PFPs that feature a richly diverse and unique pool of rarity-powered traits. What's more, each Moonbird unlocks private club membership and additional benefits the longer you hold them. We call it nesting – because, obviously.",
                "thumbnail_url": "https://i.seadn.io/gae/H-eyNE1MwL5ohL-tCfn_Xa1Sl9M9B4612tLYeUlQubzt4ewhr4huJIR5OLuyO3Z5PpJFSwdm7rq-TikAh7f5eUw338A2cy6HRH75?w=500&auto=format",
                "cached_thumbnail_url": "https://storage.googleapis.com/sentinel-nft/raw-assets/e317daadcd67dede885ecda7023275dcf2714c7d9093ebdadd9923a129f0d635.png",
                "banner_url": "https://i.seadn.io/gae/ouzjfA0LotbHC92vuDph9JDeg7Z4ZFo12Pr9GJpfSAZSrnXDOubJn0eTvinwzUTPsWhnLLq5ocjcDSrpNV0_MYIjueVJrzFlE6p0?w=500&auto=format",
                "cached_banner_url": "https://storage.googleapis.com/sentinel-nft/raw-assets/2aa3577c4f1dff4303cf3c340197cf84e6155597ee49a20bffdd3e3fc82ea128.png"
              },
              "address": "0xf87e31492faf9a91b02ee0deaad50d51d56d5d4d",
              "num_nfts_owned": 3
            }
          ],
          "total": 12
        }
      },
      "AccountNft": {
        "title": "AccountNft",
        "required": ["contract_address", "token_id"],
        "type": "object",
        "properties": {
          "contract_address": {
            "title": "Contract Address",
            "type": "string",
            "description": "The contract address of the NFT."
          },
          "token_id": {
            "title": "Token Id",
            "type": "string",
            "description": "A unique ```uint256``` ID inside the contract. The contract address and token ID pair is a globally unique and fully-qualified identifier for a specific NFT on chain."
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Name of the NFT."
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "Description of the NFT."
          },
          "file_url": {
            "title": "File Url",
            "type": "string",
            "description": "File (image, video, etc) URL of the NFT."
          },
          "animation_url": {
            "title": "Animation Url",
            "type": "string",
            "description": "URL of multi-media file set in the NFT metadata. Most commonly used file types are GLTF, GLB, WEBM, MP4, M4V, OGV, OGG, along with audio MP3, WAV, and OGA. Also HTML pages, allowing to build rich experiences and interactive NFTs using JavaScript canvas, WebGL, and more."
          },
          "cached_file_url": {
            "title": "Cached File Url",
            "type": "string",
            "description": "Cached file (image, video, etc) in NFTPort's cloud with no access restrictions, low latency and high availability."
          },
          "cached_animation_url": {
            "title": "Cached Animation Url",
            "type": "string",
            "description": "Cached URL of animated file (video, gif, etc) as set in the NFT metadata. This URL points to a file cached in NFTPort's cloud storage with no access restrictions, low latency and high availability."
          },
          "creator_address": {
            "title": "Creator Address",
            "type": "string",
            "description": "NFT creator address."
          },
          "metadata": {
            "title": "Metadata",
            "type": "object",
            "description": "Raw NFT metadata downloaded from the metadata_url i.e. token URI. It usually includes the name, description and attributes along with any other data added by the creator."
          },
          "metadata_url": {
            "title": "Metadata Url",
            "type": "string",
            "description": "Metadata URL inside the contract for a given token, also known as the token URI. For ERC-721 it is the token_uri() function and for ERC-1155 it is the uri() function in the smart contract."
          },
          "contract": {
            "title": "Contract",
            "allOf": [
              {
                "$ref": "#/components/schemas/ContractInfoResponse"
              }
            ],
            "description": "Information of the NFT’s contract."
          }
        },
        "example": {
          "contract_address": "KT1RJ6PbjHpwc3M5rw5s2Nbmefwbuwbdxton",
          "token_id": "159383",
          "name": "Cool name",
          "description": "Cool description",
          "file_url": "ipfs://QmVkyU2c6ade8su1UKqSSx6iNLDp6zrCMUGX8DrRFcm9mq",
          "animation_url": "https://res.cloudinary.com/nifty-gateway/video/upload/v1603975889/Beeple/POLITICAL_BULLSHIT_uqbc8x.mp4",
          "cached_file_url": "https://storage.googleapis.com/sentinel-nft/raw-assets/c_0x12f28e2106ce8fd8464885b80ea865e98b465149_t_100030071_raw_asset.png",
          "cached_animation_url": "https://storage.googleapis.com/sentinel-nft/raw-assets/e129f89af4022209258d1a547f421583f0701b54572c4616e50b59d3294ba8fb.mp4",
          "creator_address": "tz1dVxdJwpJixh6Kcd5FZULTfFcR98V7Z2fw",
          "metadata": {
            "description": "ok first off it's a fucking dollar, if you need extra convincing from some BS artist's notes wether you want to spend a dollar on this i will punch you in the god damn face. smash the buy button ya jabroni.",
            "background_color": "ffffff",
            "external_url": "https://niftygateway.com/#/",
            "image": "https://res.cloudinary.com/nifty-gateway/video/upload/v1603975889/Beeple/POLITICAL_BULLSHIT_uqbc8x.png",
            "name": "POLITICS IS BULLSHIT #71/100",
            "animation_url": "https://res.cloudinary.com/nifty-gateway/video/upload/v1603975889/Beeple/POLITICAL_BULLSHIT_uqbc8x.mp4"
          },
          "metadata_url": "https://api.niftygateway.com/beeple/100030071",
          "contract": {
            "name": "Moonbirds",
            "symbol": "MOONBIRD",
            "type": "ERC721",
            "metadata": {
              "description": "A collection of 10,000 utility-enabled PFPs that feature a richly diverse and unique pool of rarity-powered traits. What's more, each Moonbird unlocks private club membership and additional benefits the longer you hold them. We call it nesting – because, obviously.",
              "thumbnail_url": "https://i.seadn.io/gae/H-eyNE1MwL5ohL-tCfn_Xa1Sl9M9B4612tLYeUlQubzt4ewhr4huJIR5OLuyO3Z5PpJFSwdm7rq-TikAh7f5eUw338A2cy6HRH75?w=500&auto=format",
              "cached_thumbnail_url": "https://storage.googleapis.com/sentinel-nft/raw-assets/e317daadcd67dede885ecda7023275dcf2714c7d9093ebdadd9923a129f0d635.png",
              "banner_url": "https://i.seadn.io/gae/ouzjfA0LotbHC92vuDph9JDeg7Z4ZFo12Pr9GJpfSAZSrnXDOubJn0eTvinwzUTPsWhnLLq5ocjcDSrpNV0_MYIjueVJrzFlE6p0?w=500&auto=format",
              "cached_banner_url": "https://storage.googleapis.com/sentinel-nft/raw-assets/2aa3577c4f1dff4303cf3c340197cf84e6155597ee49a20bffdd3e3fc82ea128.png"
            }
          }
        }
      },
      "AccountNftsResponse": {
        "title": "AccountNftsResponse",
        "required": ["response"],
        "type": "object",
        "properties": {
          "response": {
            "title": "Response",
            "type": "string",
            "description": "Response status, either OK or NOK."
          },
          "nfts": {
            "title": "Nfts",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountNft"
            }
          },
          "total": {
            "title": "Total",
            "type": "integer",
            "description": "Total number of NFTs owned by the address."
          },
          "continuation": {
            "title": "Continuation",
            "type": "string",
            "description": "Continuation ID for next page.",
            "default": ""
          }
        },
        "example": {
          "response": "OK",
          "nfts": [
            {
              "contract_address": "KT1RJ6PbjHpwc3M5rw5s2Nbmefwbuwbdxton",
              "token_id": "159383",
              "name": "Cool name",
              "description": "Cool description",
              "file_url": "ipfs://QmVkyU2c6ade8su1UKqSSx6iNLDp6zrCMUGX8DrRFcm9mq",
              "animation_url": "https://res.cloudinary.com/nifty-gateway/video/upload/v1603975889/Beeple/POLITICAL_BULLSHIT_uqbc8x.mp4",
              "cached_file_url": "https://storage.googleapis.com/sentinel-nft/raw-assets/c_0x12f28e2106ce8fd8464885b80ea865e98b465149_t_100030071_raw_asset.png",
              "cached_animation_url": "https://storage.googleapis.com/sentinel-nft/raw-assets/e129f89af4022209258d1a547f421583f0701b54572c4616e50b59d3294ba8fb.mp4",
              "creator_address": "tz1dVxdJwpJixh6Kcd5FZULTfFcR98V7Z2fw",
              "metadata": {
                "description": "ok first off it's a fucking dollar, if you need extra convincing from some BS artist's notes wether you want to spend a dollar on this i will punch you in the god damn face. smash the buy button ya jabroni.",
                "background_color": "ffffff",
                "external_url": "https://niftygateway.com/#/",
                "image": "https://res.cloudinary.com/nifty-gateway/video/upload/v1603975889/Beeple/POLITICAL_BULLSHIT_uqbc8x.png",
                "name": "POLITICS IS BULLSHIT #71/100",
                "animation_url": "https://res.cloudinary.com/nifty-gateway/video/upload/v1603975889/Beeple/POLITICAL_BULLSHIT_uqbc8x.mp4"
              },
              "metadata_url": "https://api.niftygateway.com/beeple/100030071",
              "contract": {
                "name": "Moonbirds",
                "symbol": "MOONBIRD",
                "type": "ERC721",
                "metadata": {
                  "description": "A collection of 10,000 utility-enabled PFPs that feature a richly diverse and unique pool of rarity-powered traits. What's more, each Moonbird unlocks private club membership and additional benefits the longer you hold them. We call it nesting – because, obviously.",
                  "thumbnail_url": "https://i.seadn.io/gae/H-eyNE1MwL5ohL-tCfn_Xa1Sl9M9B4612tLYeUlQubzt4ewhr4huJIR5OLuyO3Z5PpJFSwdm7rq-TikAh7f5eUw338A2cy6HRH75?w=500&auto=format",
                  "cached_thumbnail_url": "https://storage.googleapis.com/sentinel-nft/raw-assets/e317daadcd67dede885ecda7023275dcf2714c7d9093ebdadd9923a129f0d635.png",
                  "banner_url": "https://i.seadn.io/gae/ouzjfA0LotbHC92vuDph9JDeg7Z4ZFo12Pr9GJpfSAZSrnXDOubJn0eTvinwzUTPsWhnLLq5ocjcDSrpNV0_MYIjueVJrzFlE6p0?w=500&auto=format",
                  "cached_banner_url": "https://storage.googleapis.com/sentinel-nft/raw-assets/2aa3577c4f1dff4303cf3c340197cf84e6155597ee49a20bffdd3e3fc82ea128.png"
                }
              }
            }
          ],
          "total": 12
        }
      },
      "AccountRequestExclude": {
        "title": "AccountRequestExclude",
        "enum": ["erc721", "erc1155"],
        "type": "string",
        "description": "An enumeration."
      },
      "AccountRequestInclude": {
        "title": "AccountRequestInclude",
        "enum": ["default", "metadata", "contract_information"],
        "type": "string",
        "description": "An enumeration."
      },
      "AccountRequestSupportedChain": {
        "title": "AccountRequestSupportedChain",
        "enum": ["ethereum", "polygon", "rinkeby", "goerli"],
        "type": "string",
        "description": "An enumeration."
      },
      "Bids": {
        "title": "Bids",
        "required": [
          "type",
          "bidder_address",
          "nft",
          "price_details",
          "transaction_date"
        ],
        "type": "object",
        "properties": {
          "type": {
            "title": "Type",
            "enum": ["bid", "cancel_bid"],
            "type": "string",
            "description": "Activity type."
          },
          "bidder_address": {
            "title": "Bidder Address",
            "type": "string",
            "description": "Account address of the bidder."
          },
          "nft": {
            "title": "Nft",
            "allOf": [
              {
                "$ref": "#/components/schemas/src__service__transactions__entities__Nft"
              }
            ],
            "description": "Details of the NFT."
          },
          "quantity": {
            "title": "Quantity",
            "type": "integer",
            "description": "Number of NFTs bid on (can be more than 1 NFT for ERC1155)."
          },
          "price_details": {
            "title": "Price Details",
            "allOf": [
              {
                "$ref": "#/components/schemas/PriceDetails"
              }
            ],
            "description": "Price details of the bid."
          },
          "transaction_hash": {
            "title": "Transaction Hash",
            "type": "string",
            "description": "A unique 66-character identifier that is generated when a transaction is executed on the blockchain."
          },
          "block_hash": {
            "title": "Block Hash",
            "type": "string",
            "description": "The hash of the block header in which the transaction is recorded."
          },
          "block_number": {
            "title": "Block Number",
            "type": "integer",
            "description": "Number of the block in which the transaction is recorded."
          },
          "transaction_date": {
            "title": "Transaction Date",
            "type": "string",
            "description": "Date of the transaction (ISO)."
          },
          "marketplace": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Marketplace"
              }
            ],
            "description": "Marketplace where the bid was made."
          }
        },
        "example": {
          "type": "bid",
          "bidder_address": "0xb4cdc8dfd9ce9bf647f38cd8278036c0aacdc91e",
          "nft": {
            "contract_type": "ERC1155_lazy",
            "contract_address": "0xb66a603f4cfe17e3d27b87a8bfcad319856518b8",
            "token_id": "15358604318467100856391476616408347066873708425523410565866333184395837440001",
            "metadata_url": "ipfs://QmUNeWBXz4pJkBzMAaPTXS4dUXkHyVNsrfVTbN4bEsJnW1",
            "creators": [
              {
                "account_address": "0x21f4a9780a52c7a8ca5e30bac89a6b0e2722bf65",
                "creator_share": "10000"
              }
            ],
            "royalties": [
              {
                "account_address": "0x21f4a9780a52c7a8ca5e30bac89a6b0e2722bf65",
                "royalty_share": "1000"
              }
            ],
            "signatures": [
              "0xde8ee69a90450466de44e0025aec715d621afbcc1ad11361cc9d63666a7e3f3e33eb72d48f2753f6e5d414967ba5ae06d00e39d1f53e99d419038011c2f159f51b"
            ],
            "total": 5000
          },
          "quantity": 1,
          "price_details": {
            "asset_type": "ERC20",
            "contract_address": "0xaa75b8c9e01ac2e9fc041a39d36a6536540b2072",
            "price": "0.071",
            "price_usd": 271.5
          },
          "transaction_date": "2021-12-03T01:28:55.961",
          "marketplace": "opensea"
        }
      },
      "Body_easy_mint_nft_with_upload_v0_mints_easy_files_post": {
        "title": "Body_easy_mint_nft_with_upload_v0_mints_easy_files_post",
        "required": ["file"],
        "type": "object",
        "properties": {
          "file": {
            "title": "File",
            "type": "string",
            "description": "The file you want to mint. All file types are supported. Maximum file size is 50MB.",
            "format": "binary"
          }
        }
      },
      "Body_ipfs_upload_file_v0_files_post": {
        "title": "Body_ipfs_upload_file_v0_files_post",
        "required": ["file"],
        "type": "object",
        "properties": {
          "file": {
            "title": "File",
            "type": "string",
            "description": "The file to upload to IPFS. All file types are supported. Maximum file size is 50MB.",
            "format": "binary"
          }
        }
      },
      "Body_ipfs_upload_metadata_directory_v0_metadata_directory_post": {
        "title": "Body_ipfs_upload_metadata_directory_v0_metadata_directory_post",
        "required": ["metadata_files"],
        "type": "object",
        "properties": {
          "metadata_files": {
            "title": "Metadata Files",
            "type": "array",
            "items": {
              "type": "string",
              "format": "binary"
            },
            "description": "Array of JSON files containing metadata"
          }
        }
      },
      "Body_search_file_v0_recommendations_similar_nfts_files_post": {
        "title": "Body_search_file_v0_recommendations_similar_nfts_files_post",
        "required": ["file"],
        "type": "object",
        "properties": {
          "file": {
            "title": "File",
            "type": "string",
            "description": "Input image based on which visually and contextually similar NFTs will be recommended. Supports .JPG, .JPEG, .PNG, .WebP file formats.",
            "format": "binary"
          }
        }
      },
      "Body_similar_nfts_v0_duplicates_files_post": {
        "title": "Body_similar_nfts_v0_duplicates_files_post",
        "required": ["file"],
        "type": "object",
        "properties": {
          "file": {
            "title": "File",
            "type": "string",
            "description": "Input image which will be analyzed to find duplicates. Supports .JPG, .JPEG, .PNG, .WebP, .PPM, .BMP, .PGM, .TIF, .TIFF, file formats.",
            "format": "binary"
          }
        }
      },
      "BurnBatchNftRequest": {
        "title": "BurnBatchNftRequest",
        "required": ["chain", "contract_address", "tokens"],
        "type": "object",
        "properties": {
          "chain": {
            "title": "Chain",
            "enum": ["polygon", "goerli"],
            "type": "string",
            "description": "Blockchain where the NFT is minted."
          },
          "contract_address": {
            "title": "Contract Address",
            "type": "string",
            "description": "Contract where the token is minted. It must be your own contract."
          },
          "tokens": {
            "title": "Tokens",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BurnBatchTokenItem"
            },
            "description": "List of tokens to be burned. Each record contains the token ID of the NFT and quantity."
          }
        },
        "example": {
          "chain": "polygon",
          "contract_address": "0xC8D297D7b496f86673551c933815B47973FC4a0e",
          "tokens": [
            {
              "token_id": "1",
              "quantity": "1"
            }
          ]
        }
      },
      "BurnBatchTokenItem": {
        "title": "BurnBatchTokenItem",
        "required": ["token_id", "quantity"],
        "type": "object",
        "properties": {
          "token_id": {
            "title": "Token Id",
            "type": "string"
          },
          "quantity": {
            "title": "Quantity",
            "type": "integer"
          }
        }
      },
      "BurnNftRequest": {
        "title": "BurnNftRequest",
        "required": ["chain", "contract_address", "token_id"],
        "type": "object",
        "properties": {
          "chain": {
            "title": "Chain",
            "enum": ["polygon", "goerli", "ethereum"],
            "type": "string",
            "description": "Blockchain where the NFT is minted."
          },
          "contract_address": {
            "title": "Contract Address",
            "type": "string",
            "description": "Contract where the token is minted. It must be your own contract."
          },
          "token_id": {
            "title": "Token Id",
            "type": "string",
            "description": "Token ID of the NFT that will be burned."
          }
        },
        "example": {
          "chain": "polygon",
          "contract_address": "0xC8D297D7b496f86673551c933815B47973FC4a0e",
          "token_id": "1"
        }
      },
      "BurnNftResponse": {
        "title": "BurnNftResponse",
        "required": [
          "response",
          "chain",
          "contract_address",
          "transaction_hash",
          "transaction_external_url"
        ],
        "type": "object",
        "properties": {
          "response": {
            "title": "Response",
            "type": "string",
            "description": "Response status, either OK or NOK."
          },
          "chain": {
            "title": "Chain",
            "enum": ["polygon", "ethereum", "goerli"],
            "type": "string",
            "description": "Blockchain the NFT was burned on."
          },
          "contract_address": {
            "title": "Contract Address",
            "type": "string",
            "description": "The contract address of the burned NFT."
          },
          "transaction_hash": {
            "title": "Transaction Hash",
            "type": "string",
            "description": "The transaction hash which is returned by the blockchain after burning."
          },
          "transaction_external_url": {
            "title": "Transaction External Url",
            "type": "string",
            "description": "Transaction URL in an external blockchain explorer."
          }
        },
        "example": {
          "response": "OK",
          "chain": "polygon",
          "contract_address": "0xC8D297D7b496f86673551c933815B47973FC4a0e",
          "transaction_hash": "0xcbbe6072d7aa48b9774ed8b15e7f298489c5e965b32aa468ca520b30aba649a1",
          "transaction_external_url": "https://polygonscan.com/tx/0xcbbe6072d7aa48b9774ed8b15e7f298489c5e965b32aa468ca520b30aba649a1"
        }
      },
      "CollectionStats": {
        "title": "CollectionStats",
        "type": "object",
        "properties": {
          "one_day_volume": {
            "title": "One Day Volume",
            "type": "number",
            "description": "Volume of sales in the last 24 hours in ETH."
          },
          "one_day_change": {
            "title": "One Day Change",
            "type": "number",
            "description": "Change in volume of sales in the last 24 hours in ETH."
          },
          "one_day_sales": {
            "title": "One Day Sales",
            "type": "number",
            "description": "Number of sales in the last 24 hours."
          },
          "one_day_average_price": {
            "title": "One Day Average Price",
            "type": "number",
            "description": "Average price in the last 24 hours in ETH."
          },
          "seven_day_volume": {
            "title": "Seven Day Volume",
            "type": "number",
            "description": "Volume of sales in the last 7 days in ETH."
          },
          "seven_day_change": {
            "title": "Seven Day Change",
            "type": "number",
            "description": "Change in volume of sales in the last 7 days in ETH."
          },
          "seven_day_sales": {
            "title": "Seven Day Sales",
            "type": "number",
            "description": "Number of sales in the last 7 days."
          },
          "seven_day_average_price": {
            "title": "Seven Day Average Price",
            "type": "number",
            "description": "Average price in the last 7 days in ETH."
          },
          "thirty_day_volume": {
            "title": "Thirty Day Volume",
            "type": "number",
            "description": "Volume of sales in the last 30 days in ETH."
          },
          "thirty_day_change": {
            "title": "Thirty Day Change",
            "type": "number",
            "description": "Change in volume of sales in the last 30 days in ETH."
          },
          "thirty_day_sales": {
            "title": "Thirty Day Sales",
            "type": "number",
            "description": "Number of sales in the last 30 days."
          },
          "thirty_day_average_price": {
            "title": "Thirty Day Average Price",
            "type": "number",
            "description": "Average price in the last 30 days in ETH."
          },
          "total_volume": {
            "title": "Total Volume",
            "type": "number",
            "description": "Total volume of sales in ETH."
          },
          "total_sales": {
            "title": "Total Sales",
            "type": "number",
            "description": "Total number of sales."
          },
          "total_supply": {
            "title": "Total Supply",
            "type": "number",
            "description": "Total number of NFTs in supply."
          },
          "total_minted": {
            "title": "Total Minted",
            "type": "number",
            "description": "Total number of NFTs minted."
          },
          "num_owners": {
            "title": "Num Owners",
            "type": "number",
            "description": "Total number of owners."
          },
          "average_price": {
            "title": "Average Price",
            "type": "number",
            "description": "Average price of the collection since inception in ETH."
          },
          "market_cap": {
            "title": "Market Cap",
            "type": "number",
            "description": "Market cap of the collection in ETH."
          },
          "floor_price": {
            "title": "Floor Price",
            "type": "number",
            "description": "Current floor price of the collection in ETH."
          },
          "floor_price_historic_one_day": {
            "title": "Floor Price Historic One Day",
            "type": "number",
            "description": "Floor price 1 day ago in ETH."
          },
          "floor_price_historic_seven_day": {
            "title": "Floor Price Historic Seven Day",
            "type": "number",
            "description": "Floor price 7 days ago in ETH."
          },
          "floor_price_historic_thirty_day": {
            "title": "Floor Price Historic Thirty Day",
            "type": "number",
            "description": "Floor price 30 days ago in ETH."
          },
          "updated_date": {
            "title": "Updated Date",
            "type": "string",
            "description": "Date when the collection statistics was last updated (ISO)."
          }
        },
        "example": {
          "one_day_volume": 194.7981,
          "one_day_change": 0.4513354577078356,
          "one_day_sales": 42,
          "one_day_average_price": 4.63805,
          "seven_day_volume": 1099.074207520107,
          "seven_day_change": -0.052033968595019554,
          "seven_day_sales": 342,
          "seven_day_average_price": 3.213667273450605,
          "thirty_day_volume": 11672.513885632954,
          "thirty_day_change": -0.2564477340345068,
          "thirty_day_sales": 3635,
          "thirty_day_average_price": 3.211145498110854,
          "total_volume": 27370.823769036146,
          "total_sales": 13988,
          "total_supply": 9999,
          "total_minted": 9999,
          "num_owners": 5250,
          "average_price": 1.956736042967983,
          "market_cap": 32133.4590672326,
          "floor_price": 2.4,
          "floor_price_historic_one_day": 2.3,
          "floor_price_historic_seven_day": 3.9,
          "floor_price_historic_thirty_day": 1.0,
          "updated_date": "2022-02-02T02:22:22.222222"
        }
      },
      "CollectionStatsResponse": {
        "title": "CollectionStatsResponse",
        "required": ["response"],
        "type": "object",
        "properties": {
          "response": {
            "title": "Response",
            "type": "string",
            "description": "Response status, either OK or NOK."
          },
          "statistics": {
            "title": "Statistics",
            "allOf": [
              {
                "$ref": "#/components/schemas/CollectionStats"
              }
            ],
            "description": "In-depth statistics of the queried NFT contract."
          }
        },
        "example": {
          "response": "OK",
          "statistics": {
            "one_day_volume": 194.7981,
            "one_day_change": 0.4513354577078356,
            "one_day_sales": 42,
            "one_day_average_price": 4.63805,
            "seven_day_volume": 1099.074207520107,
            "seven_day_change": -0.052033968595019554,
            "seven_day_sales": 342,
            "seven_day_average_price": 3.213667273450605,
            "thirty_day_volume": 11672.513885632954,
            "thirty_day_change": -0.2564477340345068,
            "thirty_day_sales": 3635,
            "thirty_day_average_price": 3.211145498110854,
            "total_volume": 27370.823769036146,
            "total_sales": 13988,
            "total_supply": 9999,
            "total_minted": 9999,
            "num_owners": 5250,
            "average_price": 1.956736042967983,
            "market_cap": 32133.4590672326,
            "floor_price": 2.4,
            "floor_price_historic_one_day": 2.3,
            "floor_price_historic_seven_day": 3.9,
            "floor_price_historic_thirty_day": 1.0,
            "updated_date": "2022-02-02T02:22:22.222222"
          }
        }
      },
      "ContentIdNftRequest": {
        "title": "ContentIdNftRequest",
        "required": ["chain", "contract_address", "token_id"],
        "type": "object",
        "properties": {
          "chain": {
            "title": "Chain",
            "enum": ["ethereum", "polygon"],
            "type": "string",
            "description": "Blockchain where the NFT has been minted."
          },
          "contract_address": {
            "title": "Contract Address",
            "type": "string",
            "description": "The contract address of the NFT."
          },
          "token_id": {
            "title": "Token Id",
            "type": "string",
            "description": "A unique uint256 ID inside the contract. The contract address and token ID pair is a globally unique and fully-qualified identifier for a specific NFT on chain."
          },
          "page_number": {
            "title": "Page Number",
            "minimum": 1.0,
            "type": "integer",
            "description": "The page number of the results to return. The first page is 1.",
            "default": 1
          },
          "page_size": {
            "title": "Page Size",
            "maximum": 50.0,
            "minimum": 1.0,
            "type": "integer",
            "description": "The number of results returned per page. Limit can range between 1 and 50, and the default is 50.",
            "default": 50
          },
          "threshold": {
            "title": "Threshold",
            "maximum": 1.0,
            "minimum": 0.1,
            "type": "number",
            "description": "Threshold for classifying an NFT as a counterfeit.",
            "default": 0.9
          },
          "filter_out_contract_address": {
            "title": "Filter Out Contract Address",
            "type": "string",
            "description": "NFTs from this contract address will be filtered out. Useful for examples where the whole NFT collection is visually very similar e.g. CryptoPunks."
          }
        },
        "example": {
          "chain": "ethereum",
          "contract_address": "0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb",
          "token_id": "9999",
          "page_number": 1,
          "page_size": 50,
          "threshold": 0.9
        }
      },
      "ContentIdResponse": {
        "title": "ContentIdResponse",
        "required": ["response", "similar_nfts"],
        "type": "object",
        "properties": {
          "response": {
            "title": "Response",
            "type": "string",
            "description": "Response status, either OK or NOK."
          },
          "is_similar": {
            "title": "Is Similar",
            "type": "boolean",
            "description": "Returns true if a match is found, false otherwise."
          },
          "similar_nfts": {
            "title": "Similar Nfts",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DuplicateNFTResponseModel"
            },
            "description": "Details of matching NFTs if found."
          }
        },
        "example": {
          "response": "OK",
          "is_similar": true,
          "similar_nfts": [
            {
              "contract_address": "0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb",
              "token_id": "3100",
              "chain": "ethereum",
              "similarity": 0.999998,
              "file_url": "https://www.larvalabs.com/cryptopunks/cryptopunk3100.png",
              "cached_file_url": "https://storage.googleapis.com/sentinel-nft/raw-assets/c_0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb_t_3100_raw_asset.png",
              "metadata_url": "https://api.niftygateway.com/beeple/100030071/",
              "metadata": {
                "description": "ok first off it's a fucking dollar, if you need extra convincing from some BS artist's notes wether you want to spend a dollar on this i will punch you in the god damn face. smash the buy button ya jabroni.",
                "background_color": "ffffff",
                "external_url": "https://niftygateway.com/#/",
                "image": "https://res.cloudinary.com/nifty-gateway/video/upload/v1603975889/Beeple/POLITICAL_BULLSHIT_uqbc8x.png",
                "name": "POLITICS IS BULLSHIT #71/100",
                "animation_url": "https://res.cloudinary.com/nifty-gateway/video/upload/v1603975889/Beeple/POLITICAL_BULLSHIT_uqbc8x.mp4"
              },
              "mint_date": "2020-10-29T15:03:54.838612"
            }
          ]
        }
      },
      "ContentIdUrlRequest": {
        "title": "ContentIdUrlRequest",
        "required": ["url"],
        "type": "object",
        "properties": {
          "url": {
            "title": "Url",
            "maxLength": 500,
            "minLength": 1,
            "type": "string",
            "description": "URL that points to the image that returns a Content-Length and Content-Type header or contains the file extension. Supports .JPG, .JPEG, .PNG, .WebP, .PPM, .BMP, .PGM, .TIF, .TIFF file formats."
          },
          "page_number": {
            "title": "Page Number",
            "minimum": 1.0,
            "type": "integer",
            "description": "The page number of the results to return. The first page is 1.",
            "default": 1
          },
          "page_size": {
            "title": "Page Size",
            "maximum": 50.0,
            "minimum": 1.0,
            "type": "integer",
            "description": "The number of results returned per page. Limit can range between 1 and 50, and the default is 50.",
            "default": 50
          },
          "threshold": {
            "title": "Threshold",
            "maximum": 1.0,
            "minimum": 0.1,
            "type": "number",
            "description": "Threshold for classifying an NFT as a counterfeit.",
            "default": 0.9
          },
          "filter_out_contract_address": {
            "title": "Filter Out Contract Address",
            "type": "string",
            "description": "NFTs from this contract address will be filtered out. Useful for examples where the whole NFT collection is visually very similar e.g. CryptoPunks."
          }
        },
        "example": {
          "url": "https://www.larvalabs.com/cryptopunks/cryptopunk7597.png",
          "page_number": 1,
          "page_size": 50,
          "threshold": 0.9
        }
      },
      "ContractInfoResponse": {
        "title": "ContractInfoResponse",
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Name of the contract."
          },
          "symbol": {
            "title": "Symbol",
            "type": "string",
            "description": "Symbol of the contract."
          },
          "type": {
            "title": "Type",
            "enum": ["ERC721", "ERC1155"],
            "type": "string",
            "description": "Contract type."
          },
          "metadata": {
            "title": "Metadata",
            "allOf": [
              {
                "$ref": "#/components/schemas/ContractMetadataResponse"
              }
            ],
            "description": "Metadata about the collection."
          }
        },
        "example": {
          "name": "Moonbirds",
          "symbol": "MOONBIRD",
          "type": "ERC721",
          "metadata": {
            "description": "A collection of 10,000 utility-enabled PFPs that feature a richly diverse and unique pool of rarity-powered traits. What's more, each Moonbird unlocks private club membership and additional benefits the longer you hold them. We call it nesting – because, obviously.",
            "thumbnail_url": "https://i.seadn.io/gae/H-eyNE1MwL5ohL-tCfn_Xa1Sl9M9B4612tLYeUlQubzt4ewhr4huJIR5OLuyO3Z5PpJFSwdm7rq-TikAh7f5eUw338A2cy6HRH75?w=500&auto=format",
            "cached_thumbnail_url": "https://storage.googleapis.com/sentinel-nft/raw-assets/e317daadcd67dede885ecda7023275dcf2714c7d9093ebdadd9923a129f0d635.png",
            "banner_url": "https://i.seadn.io/gae/ouzjfA0LotbHC92vuDph9JDeg7Z4ZFo12Pr9GJpfSAZSrnXDOubJn0eTvinwzUTPsWhnLLq5ocjcDSrpNV0_MYIjueVJrzFlE6p0?w=500&auto=format",
            "cached_banner_url": "https://storage.googleapis.com/sentinel-nft/raw-assets/2aa3577c4f1dff4303cf3c340197cf84e6155597ee49a20bffdd3e3fc82ea128.png"
          }
        }
      },
      "ContractMetadataResponse": {
        "title": "ContractMetadataResponse",
        "type": "object",
        "properties": {
          "description": {
            "title": "Description",
            "type": "string",
            "description": "A brief description of the collection."
          },
          "thumbnail_url": {
            "title": "Thumbnail Url",
            "type": "string",
            "description": "A thumbnail image for previewing the collection."
          },
          "cached_thumbnail_url": {
            "title": "Cached Thumbnail Url",
            "type": "string",
            "description": "Cached version of the thumbnail image."
          },
          "banner_url": {
            "title": "Banner Url",
            "type": "string",
            "description": "A banner image for previewing the collection."
          },
          "cached_banner_url": {
            "title": "Cached Banner Url",
            "type": "string",
            "description": "Cached version of the banner image."
          }
        },
        "example": {
          "description": "A collection of 10,000 utility-enabled PFPs that feature a richly diverse and unique pool of rarity-powered traits. What's more, each Moonbird unlocks private club membership and additional benefits the longer you hold them. We call it nesting – because, obviously.",
          "thumbnail_url": "https://i.seadn.io/gae/H-eyNE1MwL5ohL-tCfn_Xa1Sl9M9B4612tLYeUlQubzt4ewhr4huJIR5OLuyO3Z5PpJFSwdm7rq-TikAh7f5eUw338A2cy6HRH75?w=500&auto=format",
          "cached_thumbnail_url": "https://storage.googleapis.com/sentinel-nft/raw-assets/e317daadcd67dede885ecda7023275dcf2714c7d9093ebdadd9923a129f0d635.png",
          "banner_url": "https://i.seadn.io/gae/ouzjfA0LotbHC92vuDph9JDeg7Z4ZFo12Pr9GJpfSAZSrnXDOubJn0eTvinwzUTPsWhnLLq5ocjcDSrpNV0_MYIjueVJrzFlE6p0?w=500&auto=format",
          "cached_banner_url": "https://storage.googleapis.com/sentinel-nft/raw-assets/2aa3577c4f1dff4303cf3c340197cf84e6155597ee49a20bffdd3e3fc82ea128.png"
        }
      },
      "ContractNft": {
        "title": "ContractNft",
        "required": ["chain", "contract_address", "token_id"],
        "type": "object",
        "properties": {
          "chain": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NftsRequestSupportedChain"
              }
            ],
            "description": "Blockchain where the NFT has been minted."
          },
          "contract_address": {
            "title": "Contract Address",
            "type": "string",
            "description": "The contract address of the NFT."
          },
          "token_id": {
            "title": "Token Id",
            "type": "string",
            "description": "A unique ```uint256``` ID inside the contract. The contract address and token ID pair is a globally unique and fully-qualified identifier for a specific NFT on chain."
          },
          "metadata_url": {
            "title": "Metadata Url",
            "type": "string",
            "description": "Metadata URL inside the contract for a given token, also known as the token URI. For ERC-721 it is the token_uri() function and for ERC-1155 it is the uri() function in the smart contract."
          },
          "metadata": {
            "title": "Metadata",
            "type": "object",
            "description": "Raw NFT metadata downloaded from the metadata_url i.e. token URI. It usually includes the name, description and attributes along with any other data added by the creator."
          },
          "file_information": {
            "title": "File Information",
            "allOf": [
              {
                "$ref": "#/components/schemas/src__service__nfts__entities__NftAssetMetadata"
              }
            ],
            "description": "Extra information of the NFT’s file."
          },
          "file_url": {
            "title": "File Url",
            "type": "string",
            "description": "Original file (image, video, etc) URL of the NFT."
          },
          "animation_url": {
            "title": "Animation Url",
            "type": "string",
            "description": "URL of multi-media file set in the NFT metadata. Most commonly used file types are GLTF, GLB, WEBM, MP4, M4V, OGV, OGG, along with audio MP3, WAV, and OGA. Also HTML pages, allowing to build rich experiences and interactive NFTs using JavaScript canvas, WebGL, and more."
          },
          "cached_file_url": {
            "title": "Cached File Url",
            "type": "string",
            "description": "Cached file (image, video, etc) in NFTPort's cloud with no access restrictions, low latency and high availability."
          },
          "cached_animation_url": {
            "title": "Cached Animation Url",
            "type": "string",
            "description": "Cached URL of animated file (video, gif, etc) as set in the NFT metadata. This URL points to a file cached in NFTPort's cloud storage with no access restrictions, low latency and high availability."
          },
          "mint_date": {
            "title": "Mint Date",
            "type": "string",
            "description": "Date when the NFT was minted (ISO)."
          },
          "updated_date": {
            "title": "Updated Date",
            "type": "string",
            "description": "Date when the NFT’s metadata was last downloaded or updated/refreshed."
          },
          "owner": {
            "title": "Owner",
            "type": "string",
            "description": "Current owner of the NFT."
          }
        },
        "example": {
          "chain": "ethereum",
          "contract_address": "0x23581767a106ae21c074b2276d25e5c3e136a68b",
          "token_id": "6889",
          "metadata_url": "https://live---metadata-5covpqijaa-uc.a.run.app/metadata/6889",
          "metadata": {
            "attributes": [
              {
                "trait_type": "Eyes",
                "value": "Open"
              },
              {
                "trait_type": "Body",
                "value": "Tabby"
              },
              {
                "trait_type": "Feathers",
                "value": "Gray"
              },
              {
                "trait_type": "Background",
                "value": "Purple"
              },
              {
                "trait_type": "Beak",
                "value": "Small"
              }
            ],
            "external_url": "https://moonbirds.xyz/",
            "image": "https://live---metadata-5covpqijaa-uc.a.run.app/images/6889",
            "name": "#6889",
            "x_debug": ["orig:9745"]
          },
          "file_information": {
            "height": 1008,
            "width": 1008,
            "file_size": 6411
          },
          "file_url": "https://live---metadata-5covpqijaa-uc.a.run.app/images/6889",
          "cached_file_url": "https://storage.googleapis.com/sentinel-nft/raw-assets/30152540c5651ff250c662f1565beefb7bf7ad7523ece35d2e42b6fcbfbc0d94.png",
          "mint_date": "2022-04-16T16:21:43",
          "updated_date": "2022-09-27T17:27:09.096295",
          "owner": "0xAb5801a7D398351b8bE11C439e05C5B3259aeC9B"
        }
      },
      "ContractNftsResponse": {
        "title": "ContractNftsResponse",
        "required": ["response"],
        "type": "object",
        "properties": {
          "response": {
            "title": "Response",
            "type": "string",
            "description": "Response status, either OK or NOK."
          },
          "nfts": {
            "title": "Nfts",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContractNft"
            },
            "description": "Details of the NFTs."
          },
          "contract": {
            "title": "Contract",
            "allOf": [
              {
                "$ref": "#/components/schemas/ContractInfoResponse"
              }
            ],
            "description": "Information of the NFT’s contract."
          },
          "total": {
            "title": "Total",
            "type": "integer",
            "description": "Total number of NFTs in the given contract address."
          },
          "status": {
            "title": "Status",
            "enum": ["ADDED", "PROCESSING", "PENDING", "REFRESHED_RECENTLY"],
            "type": "string",
            "description": "Status of the contract tokens in the metadata refresh queue."
          },
          "status_message": {
            "title": "Status Message",
            "type": "string",
            "description": "Detailed description of the ```status```."
          }
        },
        "example": {
          "response": "OK",
          "nfts": [
            {
              "chain": "ethereum",
              "contract_address": "0x23581767a106ae21c074b2276d25e5c3e136a68b",
              "token_id": "6889",
              "metadata_url": "https://live---metadata-5covpqijaa-uc.a.run.app/metadata/6889",
              "metadata": {
                "attributes": [
                  {
                    "trait_type": "Eyes",
                    "value": "Open"
                  },
                  {
                    "trait_type": "Body",
                    "value": "Tabby"
                  },
                  {
                    "trait_type": "Feathers",
                    "value": "Gray"
                  },
                  {
                    "trait_type": "Background",
                    "value": "Purple"
                  },
                  {
                    "trait_type": "Beak",
                    "value": "Small"
                  }
                ],
                "external_url": "https://moonbirds.xyz/",
                "image": "https://live---metadata-5covpqijaa-uc.a.run.app/images/6889",
                "name": "#6889",
                "x_debug": ["orig:9745"]
              },
              "file_information": {
                "height": 1008,
                "width": 1008,
                "file_size": 6411
              },
              "file_url": "https://live---metadata-5covpqijaa-uc.a.run.app/images/6889",
              "cached_file_url": "https://storage.googleapis.com/sentinel-nft/raw-assets/30152540c5651ff250c662f1565beefb7bf7ad7523ece35d2e42b6fcbfbc0d94.png",
              "mint_date": "2022-04-16T16:21:43",
              "updated_date": "2022-09-27T17:27:09.096295",
              "owner": "0xAb5801a7D398351b8bE11C439e05C5B3259aeC9B"
            }
          ],
          "contract": {
            "name": "Moonbirds",
            "symbol": "MOONBIRD",
            "type": "ERC721",
            "metadata": {
              "description": "A collection of 10,000 utility-enabled PFPs that feature a richly diverse and unique pool of rarity-powered traits. What's more, each Moonbird unlocks private club membership and additional benefits the longer you hold them. We call it nesting – because, obviously.",
              "thumbnail_url": "https://i.seadn.io/gae/H-eyNE1MwL5ohL-tCfn_Xa1Sl9M9B4612tLYeUlQubzt4ewhr4huJIR5OLuyO3Z5PpJFSwdm7rq-TikAh7f5eUw338A2cy6HRH75?w=500&auto=format",
              "cached_thumbnail_url": "https://storage.googleapis.com/sentinel-nft/raw-assets/e317daadcd67dede885ecda7023275dcf2714c7d9093ebdadd9923a129f0d635.png",
              "banner_url": "https://i.seadn.io/gae/ouzjfA0LotbHC92vuDph9JDeg7Z4ZFo12Pr9GJpfSAZSrnXDOubJn0eTvinwzUTPsWhnLLq5ocjcDSrpNV0_MYIjueVJrzFlE6p0?w=500&auto=format",
              "cached_banner_url": "https://storage.googleapis.com/sentinel-nft/raw-assets/2aa3577c4f1dff4303cf3c340197cf84e6155597ee49a20bffdd3e3fc82ea128.png"
            }
          },
          "total": 102
        }
      },
      "ContractType": {
        "title": "ContractType",
        "enum": ["ERC721", "ERC1155", "ERC721_lazy", "ERC1155_lazy"],
        "type": "string",
        "description": "An enumeration."
      },
      "ContractsModelResponse": {
        "title": "ContractsModelResponse",
        "required": ["address"],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Name of the contract."
          },
          "symbol": {
            "title": "Symbol",
            "type": "string",
            "description": "Symbol of the contract."
          },
          "type": {
            "title": "Type",
            "enum": ["ERC721", "ERC1155"],
            "type": "string",
            "description": "Contract type."
          },
          "metadata": {
            "title": "Metadata",
            "allOf": [
              {
                "$ref": "#/components/schemas/ContractMetadataResponse"
              }
            ],
            "description": "Metadata about the collection."
          },
          "address": {
            "title": "Address",
            "type": "string",
            "description": "The contract address of the collection."
          },
          "num_nfts_owned": {
            "title": "Num Nfts Owned",
            "type": "integer",
            "description": "Number of NFTs that account address owns in this contract."
          }
        },
        "example": {
          "name": "Decentraland LAND",
          "symbol": "LAND",
          "type": "ERC721",
          "metadata": {
            "description": "A collection of 10,000 utility-enabled PFPs that feature a richly diverse and unique pool of rarity-powered traits. What's more, each Moonbird unlocks private club membership and additional benefits the longer you hold them. We call it nesting – because, obviously.",
            "thumbnail_url": "https://i.seadn.io/gae/H-eyNE1MwL5ohL-tCfn_Xa1Sl9M9B4612tLYeUlQubzt4ewhr4huJIR5OLuyO3Z5PpJFSwdm7rq-TikAh7f5eUw338A2cy6HRH75?w=500&auto=format",
            "cached_thumbnail_url": "https://storage.googleapis.com/sentinel-nft/raw-assets/e317daadcd67dede885ecda7023275dcf2714c7d9093ebdadd9923a129f0d635.png",
            "banner_url": "https://i.seadn.io/gae/ouzjfA0LotbHC92vuDph9JDeg7Z4ZFo12Pr9GJpfSAZSrnXDOubJn0eTvinwzUTPsWhnLLq5ocjcDSrpNV0_MYIjueVJrzFlE6p0?w=500&auto=format",
            "cached_banner_url": "https://storage.googleapis.com/sentinel-nft/raw-assets/2aa3577c4f1dff4303cf3c340197cf84e6155597ee49a20bffdd3e3fc82ea128.png"
          },
          "address": "0xf87e31492faf9a91b02ee0deaad50d51d56d5d4d",
          "num_nfts_owned": 3
        }
      },
      "CreatorNft": {
        "title": "CreatorNft",
        "required": ["chain", "contract_address", "token_id"],
        "type": "object",
        "properties": {
          "chain": {
            "title": "Chain",
            "enum": ["ethereum"],
            "type": "string",
            "description": "Blockchain where the NFT has been minted."
          },
          "contract_address": {
            "title": "Contract Address",
            "type": "string",
            "description": "The contract address of the NFT."
          },
          "token_id": {
            "title": "Token Id",
            "type": "string",
            "description": "A unique ```uint256``` ID inside the contract. The contract address and token ID pair is a globally unique and fully-qualified identifier for a specific NFT on chain."
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Name of the NFT."
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "Description of the NFT."
          },
          "metadata": {
            "title": "Metadata",
            "type": "object",
            "description": "Raw NFT metadata downloaded from the metadata_url i.e. token URI. It usually includes the name, description and attributes along with any other data added by the creator."
          },
          "metadata_url": {
            "title": "Metadata Url",
            "type": "string",
            "description": "Metadata URL inside the contract for a given token, also known as the token URI. For ERC-721 it is the token_uri() function and for ERC-1155 it is the uri() function in the smart contract."
          },
          "file_url": {
            "title": "File Url",
            "type": "string",
            "description": "File (image, video, etc) URL of the NFT."
          },
          "animation_url": {
            "title": "Animation Url",
            "type": "string",
            "description": "URL of multi-media file set in the NFT metadata. Most commonly used file types are GLTF, GLB, WEBM, MP4, M4V, OGV, OGG, along with audio MP3, WAV, and OGA. Also HTML pages, allowing to build rich experiences and interactive NFTs using JavaScript canvas, WebGL, and more."
          },
          "cached_file_url": {
            "title": "Cached File Url",
            "type": "string",
            "description": "Cached file (image, video, etc) in NFTPort's cloud with no access restrictions, low latency and high availability."
          },
          "cached_animation_url": {
            "title": "Cached Animation Url",
            "type": "string",
            "description": "Cached URL of animated file (video, gif, etc) as set in the NFT metadata. This URL points to a file cached in NFTPort's cloud storage with no access restrictions, low latency and high availability."
          },
          "owner_addresses": {
            "title": "Owner Addresses",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of account (i.e. wallet) addresses that own the NFT. For ERC1155, multiple owners can own the same NFT."
          }
        },
        "example": {
          "chain": "ethereum",
          "contract_address": "0xafb44cef938b1be600a4331bf9904f6cec2fcac3",
          "token_id": "4083388403051261561560495289181218537481",
          "name": "UniSwamp",
          "description": "The UniSwamp is ground zero for warfare with The Institution and its army of Shills. Technically, “District 16”, Uniswamp is a region in southwest Cyber City still left unclaimed by the corporations. The de-facto home of the Cyber City underworld, Uniswamp is infested by renegade shills who do anything to turn a quick buck. Without proper guidance, all those who enter the UniSwamp are consumed by its devious inhabitants, leaving them rekt.",
          "metadata": {
            "animation_url": "https://superfarm-images.s3.amazonaws.com/EllioTrades/uniswamp-epic.mp4",
            "attributes": [
              {
                "trait_type": "Name",
                "value": "UniSwamp"
              },
              {
                "trait_type": "Variant",
                "value": "3D Animated"
              },
              {
                "trait_type": "Rarity",
                "value": "Epic"
              },
              {
                "display_type": "number",
                "trait_type": "Vote Power",
                "value": 5
              },
              {
                "max_value": 50,
                "trait_type": "Issue",
                "value": 9
              }
            ],
            "collection": "EllioTrades",
            "description": "The UniSwamp is ground zero for warfare with The Institution and its army of Shills. Technically, “District 16”, Uniswamp is a region in southwest Cyber City still left unclaimed by the corporations. The de-facto home of the Cyber City underworld, Uniswamp is infested by renegade shills who do anything to turn a quick buck. Without proper guidance, all those who enter the UniSwamp are consumed by its devious inhabitants, leaving them rekt.",
            "groupSize": 50,
            "image": "https://superfarm-images.s3.amazonaws.com/EllioTrades/uniswamp-epic.png",
            "issue": 9,
            "name": "UniSwamp",
            "type": "video/mp4",
            "video": "https://superfarm-images.s3.amazonaws.com/EllioTrades/uniswamp-epic.mp4"
          },
          "metadata_url": "https://superfarm-metadata.s3.amazonaws.com/EllioTrades/0000000000000000000000000000000c00000000000000000000000000000009.json",
          "file_url": "https://superfarm-images.s3.amazonaws.com/EllioTrades/uniswamp-epic.png",
          "animation_url": "https://res.cloudinary.com/nifty-gateway/video/upload/v1603975889/Beeple/POLITICAL_BULLSHIT_uqbc8x.mp4",
          "cached_file_url": "https://storage.googleapis.com/sentinel-nft/raw-assets/c_0xafb44cef938b1be600a4331bf9904f6cec2fcac3_t_4083388403051261561560495289181218537481_raw_asset.png",
          "cached_animation_url": "https://storage.googleapis.com/sentinel-nft/raw-assets/e129f89af4022209258d1a547f421583f0701b54572c4616e50b59d3294ba8fb.mp4",
          "owner_addresses": ["0x86872bf79c77cc9f4244d70ede7a8a7a69a6864e"]
        }
      },
      "CreatorNftsResponse": {
        "title": "CreatorNftsResponse",
        "required": ["response"],
        "type": "object",
        "properties": {
          "response": {
            "title": "Response",
            "type": "string",
            "description": "Response status, either OK or NOK."
          },
          "nfts": {
            "title": "Nfts",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreatorNft"
            }
          },
          "continuation": {
            "title": "Continuation",
            "type": "string",
            "description": "Continuation ID for the next page."
          }
        },
        "example": {
          "response": "OK",
          "nfts": [
            {
              "chain": "ethereum",
              "contract_address": "0xafb44cef938b1be600a4331bf9904f6cec2fcac3",
              "token_id": "4083388403051261561560495289181218537481",
              "name": "UniSwamp",
              "description": "The UniSwamp is ground zero for warfare with The Institution and its army of Shills. Technically, “District 16”, Uniswamp is a region in southwest Cyber City still left unclaimed by the corporations. The de-facto home of the Cyber City underworld, Uniswamp is infested by renegade shills who do anything to turn a quick buck. Without proper guidance, all those who enter the UniSwamp are consumed by its devious inhabitants, leaving them rekt.",
              "metadata": {
                "animation_url": "https://superfarm-images.s3.amazonaws.com/EllioTrades/uniswamp-epic.mp4",
                "attributes": [
                  {
                    "trait_type": "Name",
                    "value": "UniSwamp"
                  },
                  {
                    "trait_type": "Variant",
                    "value": "3D Animated"
                  },
                  {
                    "trait_type": "Rarity",
                    "value": "Epic"
                  },
                  {
                    "display_type": "number",
                    "trait_type": "Vote Power",
                    "value": 5
                  },
                  {
                    "max_value": 50,
                    "trait_type": "Issue",
                    "value": 9
                  }
                ],
                "collection": "EllioTrades",
                "description": "The UniSwamp is ground zero for warfare with The Institution and its army of Shills. Technically, “District 16”, Uniswamp is a region in southwest Cyber City still left unclaimed by the corporations. The de-facto home of the Cyber City underworld, Uniswamp is infested by renegade shills who do anything to turn a quick buck. Without proper guidance, all those who enter the UniSwamp are consumed by its devious inhabitants, leaving them rekt.",
                "groupSize": 50,
                "image": "https://superfarm-images.s3.amazonaws.com/EllioTrades/uniswamp-epic.png",
                "issue": 9,
                "name": "UniSwamp",
                "type": "video/mp4",
                "video": "https://superfarm-images.s3.amazonaws.com/EllioTrades/uniswamp-epic.mp4"
              },
              "metadata_url": "https://superfarm-metadata.s3.amazonaws.com/EllioTrades/0000000000000000000000000000000c00000000000000000000000000000009.json",
              "file_url": "https://superfarm-images.s3.amazonaws.com/EllioTrades/uniswamp-epic.png",
              "animation_url": "https://res.cloudinary.com/nifty-gateway/video/upload/v1603975889/Beeple/POLITICAL_BULLSHIT_uqbc8x.mp4",
              "cached_file_url": "https://storage.googleapis.com/sentinel-nft/raw-assets/c_0xafb44cef938b1be600a4331bf9904f6cec2fcac3_t_4083388403051261561560495289181218537481_raw_asset.png",
              "cached_animation_url": "https://storage.googleapis.com/sentinel-nft/raw-assets/e129f89af4022209258d1a547f421583f0701b54572c4616e50b59d3294ba8fb.mp4",
              "owner_addresses": ["0x86872bf79c77cc9f4244d70ede7a8a7a69a6864e"]
            }
          ]
        }
      },
      "Creators": {
        "title": "Creators",
        "required": ["account_address", "creator_share"],
        "type": "object",
        "properties": {
          "account_address": {
            "title": "Account Address",
            "type": "string",
            "description": "Account address of the creator."
          },
          "creator_share": {
            "title": "Creator Share",
            "type": "integer",
            "description": "Creator share of the NFT (Range: 1-10000 i.e., 0.01%-100%). If an NFT has more than one creator, this tells how the creatorship is shared among the creators."
          }
        },
        "example": {
          "account_address": "0x21f4a9780a52c7a8ca5e30bac89a6b0e2722bf65",
          "creator_share": "10000"
        }
      },
      "DataLimitsModel": {
        "title": "DataLimitsModel",
        "required": [
          "max_data_requests_per_second",
          "max_data_requests_per_month"
        ],
        "type": "object",
        "properties": {
          "subscription_data_requests_included": {
            "title": "Subscription Data Requests Included",
            "type": "integer",
            "description": "Number of requests included in your subscription. Requests exceeding this amount will incur extra charges as per our [pricing](https://www.nftport.xyz/pricing)."
          },
          "max_data_requests_per_second": {
            "title": "Max Data Requests Per Second",
            "type": "integer",
            "description": "Number of requests allowed per second."
          },
          "max_data_requests_per_month": {
            "title": "Max Data Requests Per Month",
            "type": "integer",
            "description": "Maximum number of requests you can make in a month. To increase this limit, please contact our support."
          }
        }
      },
      "DataUsageModel": {
        "title": "DataUsageModel",
        "type": "object",
        "properties": {
          "subscription_data_requests_made": {
            "title": "Subscription Data Requests Made",
            "type": "integer",
            "description": "Number of requests made in the current subscription period."
          }
        }
      },
      "DeployContractCollectionsRequest": {
        "title": "DeployContractCollectionsRequest",
        "required": [
          "chain",
          "name",
          "symbol",
          "max_supply",
          "tokens_per_mint",
          "owner_address",
          "treasury_address",
          "public_mint_start_date"
        ],
        "type": "object",
        "properties": {
          "chain": {
            "title": "Chain",
            "enum": ["polygon", "goerli", "ethereum"],
            "type": "string",
            "description": "Blockchain to deploy the contract to.  **Cannot be changed later.**"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Name of the NFT contract. **Cannot be changed later.**"
          },
          "symbol": {
            "title": "Symbol",
            "type": "string",
            "description": "Symbol of the NFT contract. **Cannot be changed later.**"
          },
          "max_supply": {
            "title": "Max Supply",
            "minimum": 1.0,
            "type": "integer",
            "description": "The maximum number of NFTs that can be minted in this collection. **Cannot be changed later.**"
          },
          "team_reserve": {
            "title": "Team Reserve",
            "minimum": 0.0,
            "type": "integer",
            "description": "The number of NFTs that can only be minted by the contract owner for free. **The `team_reserve` is part of `max_supply` and cannot be changed later.**",
            "default": 0
          },
          "mint_price": {
            "title": "Mint Price",
            "minimum": 0.0,
            "type": "number",
            "description": "Minting price per NFT, in units of the chain's native token."
          },
          "presale_mint_price": {
            "title": "Presale Mint Price",
            "minimum": 0.0,
            "type": "number",
            "description": "Minting price per NFT in the presale phase, in units of the chain's native token."
          },
          "tokens_per_mint": {
            "title": "Tokens Per Mint",
            "minimum": 1.0,
            "type": "integer",
            "description": "The maximum number of NFTs a user can mint in a single transaction. **Cannot be changed later.**"
          },
          "owner_address": {
            "title": "Owner Address",
            "type": "string",
            "description": "The contract owner address. If you wish to own the contract, then set it as your wallet address. This is also the wallet that can manage the contract on NFT marketplaces. Use `transferOwnership()` to update the contract owner."
          },
          "treasury_address": {
            "title": "Treasury Address",
            "type": "string",
            "description": "The treasury address: the balance of paid minting prices can be withdrawn to this address. Call `withdrawFees()` (on a block explorer like Polygonscan or Etherscan) in the contract ABI to transfer the entire balance to the treasury address.  **Cannot be changed later.**"
          },
          "public_mint_start_date": {
            "title": "Public Mint Start Date",
            "type": "string",
            "description": "Public minting start date (ISO). Eg: 2022-02-08T11:30:48+00:00."
          },
          "metadata_updatable": {
            "title": "Metadata Updatable",
            "type": "boolean",
            "description": " Default is `true`. If ```true```, metadata of the NFTs minted in the specified contract can be updated after minting (token URIs are not frozen on the contract level). This is useful for creating dynamic NFTs or revealing the NFTs after the drop. If ```false```, metadata of NFTs minted in this contract are frozen, which means **```base_uri``` cannot be updated.**."
          },
          "base_uri": {
            "title": "Base Uri",
            "type": "string",
            "description": "Metadata base URI for tokens. If you specify this, then the metadata location of NFTs minted in this contract will be of the format ```base_uri``` + ```token_id```. This is useful for creating dynamic NFTs or revealing the NFTs after the drop."
          },
          "prereveal_token_uri": {
            "title": "Prereveal Token Uri",
            "type": "string",
            "description": "Pre-reveal token URI for placeholder metadata. This will be returned for all token IDs until a `baseURI` has been set."
          },
          "presale_mint_start_date": {
            "title": "Presale Mint Start Date",
            "type": "string",
            "description": "Whitelisted/presale minting start date (ISO). Eg: 2022-02-08T11:30:48+00:00."
          },
          "presale_whitelisted_addresses": {
            "title": "Presale Whitelisted Addresses",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of addresses whitelisted for the presale. Maximum amount of addresses supported is 4000."
          },
          "royalties_share": {
            "title": "Royalties Share",
            "maximum": 10000.0,
            "minimum": 0.0,
            "type": "integer",
            "description": "Secondary market royalty rate in basis points (100 bps = 1%). This value cannot exceed 10,000 bps."
          },
          "royalties_address": {
            "title": "Royalties Address",
            "type": "string",
            "description": "Address that will have access to the balance of royalties paid. Defaults to `owner_address` if not set."
          }
        },
        "example": {
          "chain": "polygon",
          "name": "CRYPTOPUNKS",
          "symbol": "C",
          "max_supply": 100,
          "team_reserve": 0,
          "mint_price": 0.1,
          "presale_mint_price": 0,
          "tokens_per_mint": 10,
          "owner_address": "",
          "treasury_address": "",
          "public_mint_start_date": "2022-02-08T11:30:48+00:00",
          "metadata_updatable": true,
          "base_uri": "",
          "prereveal_token_uri": "ipfs://bafkreiedsysj5xeyulisdjrjh37tz2y47dlwzwiwfagmqng3melxtigaie",
          "presale_mint_start_date": "2022-02-08T11:30:48+00:00",
          "presale_whitelisted_addresses": [
            "0x5FDd0881Ef284D6fBB2Ed97b01cb13d707f91e42"
          ]
        }
      },
      "DeployContractCollectionsResponse": {
        "title": "DeployContractCollectionsResponse",
        "required": [
          "response",
          "chain",
          "transaction_hash",
          "transaction_external_url",
          "owner_address"
        ],
        "type": "object",
        "properties": {
          "response": {
            "title": "Response",
            "type": "string",
            "description": "Response status, either OK or NOK."
          },
          "chain": {
            "title": "Chain",
            "enum": ["ethereum", "polygon", "goerli"],
            "type": "string",
            "description": "Blockchain where the contract has been created."
          },
          "transaction_hash": {
            "title": "Transaction Hash",
            "type": "string",
            "description": "Deployed contract transaction hash which is a unique string of characters that is given to every transaction that is added to the blockchain."
          },
          "transaction_external_url": {
            "title": "Transaction External Url",
            "type": "string",
            "description": "Transaction URL in an external blockchain explorer."
          },
          "owner_address": {
            "title": "Owner Address",
            "type": "string",
            "description": "Owner address of the deployed NFT contract."
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Name of the deployed NFT contract."
          },
          "symbol": {
            "title": "Symbol",
            "type": "string",
            "description": "Symbol of the deployed NFT contract."
          }
        },
        "example": {
          "response": "OK",
          "chain": "polygon",
          "transaction_hash": "0x773ea27408d521898aaf20067e6b8e252b6aa5f0067878da6e2f22fe6fe3eee8",
          "transaction_external_url": "https://polygonscan.com/tx/0xb1ffb9907e4b72cd89b81e00c4c233d1cc7c661f96f65979048eb6332deb467e",
          "owner_address": "0x5FDd0881Ef284D6fBB2Ed97b01cb13d707f91e42",
          "name": "CRYPTOPUNKS",
          "symbol": "C"
        }
      },
      "DeployContractRequestWithAddress": {
        "title": "DeployContractRequestWithAddress",
        "required": ["chain", "name", "symbol", "owner_address"],
        "type": "object",
        "properties": {
          "chain": {
            "title": "Chain",
            "enum": ["polygon", "goerli", "ethereum"],
            "type": "string",
            "description": "Blockchain to deploy the contract to.  **Cannot be changed later.**"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Name of the NFT contract. **Cannot be changed later.**"
          },
          "symbol": {
            "title": "Symbol",
            "type": "string",
            "description": "Symbol of the NFT contract. **Cannot be changed later.**"
          },
          "owner_address": {
            "title": "Owner Address",
            "type": "string",
            "description": "The contract owner address. If you wish to own the contract, then set it as your wallet address."
          },
          "type": {
            "title": "Type",
            "enum": ["erc721", "erc1155"],
            "type": "string",
            "description": "Type of deployed contract (erc721/erc1155). Default type is erc721."
          },
          "metadata_updatable": {
            "title": "Metadata Updatable",
            "type": "boolean",
            "description": "Default is `false`. If ```true```, the metadata of the NFTs minted in the specified contract can be updated after minting (token URIs are not frozen on the contract level). This is useful for creating dynamic NFTs or revealing the NFTs after the drop. If ```false```, all the NFTs minted in this contract are frozen by default which means token URIs are non-updatable. Metadata may also be frozen after deploying the contract on a contract and token level (see [Update a deployed contract for NFT products](https://docs.nftport.xyz/docs/nftport/b3A6MjU2NTIyMTM-update-a-deployed-contract) & [Update a minted NFT](../3.json/paths/~1v0~1mints~1customizable/put))."
          },
          "base_uri": {
            "title": "Base Uri",
            "type": "string",
            "description": "Optional metadata base URI for tokens. If you specify this, then NFTs minted in this contract will have metadata format of ```base_uri``` + ```metadata_uri```. This is useful for creating dynamic NFTs or revealing the NFTs after the drop. ```base_uri``` can be changed with [Update a deployed contract for NFT products](https://docs.nftport.xyz/docs/nftport/b3A6MjU2NTIyMTM-update-a-deployed-contract) only if ```metadata_updatable``` is ```true``` and metadata hasn’t been frozen on the contract level. If an NFT’s metadata is frozen on the token level in [Update a minted NFT](../3.json/paths/~1v0~1mints~1customizable/put) the ```base_uri``` can still be updated."
          },
          "royalties_share": {
            "title": "Royalties Share",
            "maximum": 10000.0,
            "minimum": 0.0,
            "type": "integer",
            "description": "Secondary market royalty rate in basis points (100 bps = 1%). This value cannot exceed 10,000 bps."
          },
          "royalties_address": {
            "title": "Royalties Address",
            "type": "string",
            "description": "Address for royalties. Defaults to `owner_address` if not set."
          },
          "roles": {
            "title": "Roles",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RolesItem"
            },
            "description": "List of granular permissions for different wallet addresses set on the contract level. ```owner_address``` has all of the permissions."
          }
        },
        "example": {
          "chain": "polygon",
          "name": "CRYPTOPUNKS",
          "symbol": "C",
          "owner_address": "",
          "metadata_updatable": false,
          "type": "erc721",
          "roles": [
            {
              "role": "mint",
              "addresses": ["0xMockAddress1", "0xMockAddress2"],
              "freeze": false
            }
          ]
        }
      },
      "DeployContractResponse": {
        "title": "DeployContractResponse",
        "required": [
          "response",
          "chain",
          "transaction_hash",
          "transaction_external_url",
          "owner_address",
          "type"
        ],
        "type": "object",
        "properties": {
          "response": {
            "title": "Response",
            "type": "string",
            "description": "Response status, either OK or NOK."
          },
          "chain": {
            "title": "Chain",
            "enum": ["polygon", "ethereum", "goerli"],
            "type": "string",
            "description": "Blockchain where the contract has been created."
          },
          "transaction_hash": {
            "title": "Transaction Hash",
            "type": "string",
            "description": "Deployed contract transaction hash which is a unique string of characters that is given to every transaction that is added to the blockchain."
          },
          "transaction_external_url": {
            "title": "Transaction External Url",
            "type": "string",
            "description": "Transaction URL in an external blockchain explorer."
          },
          "owner_address": {
            "title": "Owner Address",
            "type": "string",
            "description": "Owner address of the deployed NFT contract."
          },
          "type": {
            "title": "Type",
            "enum": ["erc721", "erc1155"],
            "type": "string",
            "description": "Type of deployed contract (erc721/erc1155). Default type is erc721."
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Name of the deployed NFT contract."
          },
          "symbol": {
            "title": "Symbol",
            "type": "string",
            "description": "Symbol of the deployed NFT contract."
          }
        },
        "example": {
          "response": "OK",
          "chain": "polygon",
          "transaction_hash": "0x773ea27408d521898aaf20067e6b8e252b6aa5f0067878da6e2f22fe6fe3eee8",
          "transaction_external_url": "https://polygonscan.com/tx/0xb1ffb9907e4b72cd89b81e00c4c233d1cc7c661f96f65979048eb6332deb467e",
          "owner_address": "0x5FDd0881Ef284D6fBB2Ed97b01cb13d707f91e42",
          "type": "erc721",
          "name": "CRYPTOPUNKS",
          "symbol": "C"
        }
      },
      "DuplicateNFTResponseModel": {
        "title": "DuplicateNFTResponseModel",
        "required": ["contract_address", "token_id", "chain", "similarity"],
        "type": "object",
        "properties": {
          "contract_address": {
            "title": "Contract Address",
            "type": "string",
            "description": "Contract address of the NFT."
          },
          "token_id": {
            "title": "Token Id",
            "type": "string",
            "description": "A unique ```uint256``` ID inside the contract. The contract address and token ID pair is a globally unique and fully-qualified identifier for a specific NFT on chain."
          },
          "chain": {
            "title": "Chain",
            "enum": ["ethereum", "polygon"],
            "type": "string",
            "description": "Blockchain where the NFT has been minted."
          },
          "similarity": {
            "title": "Similarity",
            "type": "number",
            "description": "Similarity of the input image to the NFT (0 to 1)."
          },
          "file_url": {
            "title": "File Url",
            "type": "string",
            "description": "File (image, video, etc) url of the NFT."
          },
          "cached_file_url": {
            "title": "Cached File Url",
            "type": "string",
            "description": "Cached file (image, video, etc) in NFTPort's cloud with no access restrictions and without IPFS issues."
          },
          "metadata_url": {
            "title": "Metadata Url",
            "type": "string",
            "description": "Metadata URL inside the contract for a given token, also known as the token URI. For ERC-721 it is the token_uri() function and for ERC-1155 it is the uri() function in the smart contract."
          },
          "metadata": {
            "title": "Metadata",
            "type": "object",
            "description": "Raw NFT metadata downloaded from the metadata_url i.e. token URI. It usually includes the name, description and attributes along with any other data added by the creator."
          },
          "mint_date": {
            "title": "Mint Date",
            "type": "string",
            "description": "Date when the NFT was minted (ISO)."
          }
        },
        "example": {
          "contract_address": "0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb",
          "token_id": "3100",
          "chain": "ethereum",
          "similarity": 0.999998,
          "file_url": "https://www.larvalabs.com/cryptopunks/cryptopunk3100.png",
          "cached_file_url": "https://storage.googleapis.com/sentinel-nft/raw-assets/c_0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb_t_3100_raw_asset.png",
          "metadata_url": "https://api.niftygateway.com/beeple/100030071/",
          "metadata": {
            "description": "ok first off it's a fucking dollar, if you need extra convincing from some BS artist's notes wether you want to spend a dollar on this i will punch you in the god damn face. smash the buy button ya jabroni.",
            "background_color": "ffffff",
            "external_url": "https://niftygateway.com/#/",
            "image": "https://res.cloudinary.com/nifty-gateway/video/upload/v1603975889/Beeple/POLITICAL_BULLSHIT_uqbc8x.png",
            "name": "POLITICS IS BULLSHIT #71/100",
            "animation_url": "https://res.cloudinary.com/nifty-gateway/video/upload/v1603975889/Beeple/POLITICAL_BULLSHIT_uqbc8x.mp4"
          },
          "mint_date": "2020-10-29T15:03:54.838612"
        }
      },
      "EasyMintNftRequest": {
        "title": "EasyMintNftRequest",
        "required": [
          "chain",
          "name",
          "description",
          "file_url",
          "mint_to_address"
        ],
        "type": "object",
        "properties": {
          "chain": {
            "title": "Chain",
            "enum": ["polygon", "goerli"],
            "type": "string",
            "description": "Blockchain to mint the NFT on."
          },
          "name": {
            "title": "Name",
            "maxLength": 400,
            "minLength": 1,
            "type": "string",
            "description": "Name of the NFT."
          },
          "description": {
            "title": "Description",
            "maxLength": 2000,
            "minLength": 1,
            "type": "string",
            "description": "Text description of the NFT which will be seen on NFT marketplaces, etc."
          },
          "file_url": {
            "title": "File Url",
            "type": "string",
            "description": "URL that points to the image/video or any other file format as long as it returns a Content-Length and Content-Type header or contains the file extension. HTML files are not supported."
          },
          "mint_to_address": {
            "title": "Mint To Address",
            "type": "string",
            "description": "Account address where the NFT will be sent. For example, your Metamask wallet address if you wish to send it to yourself."
          }
        },
        "example": {
          "chain": "polygon",
          "name": "Type your NFT name here",
          "description": "Type your NFT description here",
          "file_url": "Add your file URL here",
          "mint_to_address": "Add your wallet address here"
        }
      },
      "GetBatchMintedNftResponse": {
        "title": "GetBatchMintedNftResponse",
        "required": ["response", "chain", "contract_address", "token_ids"],
        "type": "object",
        "properties": {
          "response": {
            "title": "Response",
            "type": "string",
            "description": "Response status, either OK or NOK."
          },
          "chain": {
            "title": "Chain",
            "enum": ["polygon", "ethereum", "goerli"],
            "type": "string",
            "description": "Blockchain the NFT was minted on."
          },
          "contract_address": {
            "title": "Contract Address",
            "type": "string",
            "description": "NFT contract address which has been successfully deployed to the blockchain."
          },
          "token_ids": {
            "title": "Token Ids",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A unique ```uint256``` IDs list inside the contract. The contract address and token ID pair is a globally unique and fully-qualified identifier for a specific NFT on chain."
          }
        },
        "example": {
          "response": "OK",
          "chain": "polygon",
          "contract_address": "0x47c7ff137d7a6644a9a96f1d44f5a6f857d9023f",
          "token_ids": ["2"]
        }
      },
      "GetContractNftsRequestInclude": {
        "title": "GetContractNftsRequestInclude",
        "enum": ["default", "metadata", "all"],
        "type": "string",
        "description": "An enumeration."
      },
      "GetDeployedContractResponse": {
        "title": "GetDeployedContractResponse",
        "required": [
          "response",
          "chain",
          "contract_address",
          "transaction_hash"
        ],
        "type": "object",
        "properties": {
          "response": {
            "title": "Response",
            "type": "string",
            "description": "Response status, either OK or NOK."
          },
          "chain": {
            "title": "Chain",
            "enum": ["ethereum", "polygon", "goerli"],
            "type": "string",
            "description": "Blockchain where the contract has been created."
          },
          "contract_address": {
            "title": "Contract Address",
            "type": "string",
            "description": "NFT contract address which has been successfully deployed to the blockchain."
          },
          "transaction_hash": {
            "title": "Transaction Hash",
            "type": "string",
            "description": "Transaction hash generated during the execution of deploying the contract."
          }
        },
        "example": {
          "response": "OK",
          "chain": "polygon",
          "contract_address": "0x38a554984cf2205f7903123adeb6d560f46625e8",
          "transaction_hash": "0x19ff77a6faebb740168689dfbf0feb63dc4c4b3797235fc8111716f2383e1715"
        }
      },
      "GetMintedNftResponse": {
        "title": "GetMintedNftResponse",
        "required": ["response", "chain", "contract_address", "token_id"],
        "type": "object",
        "properties": {
          "response": {
            "title": "Response",
            "type": "string",
            "description": "Response status, either OK or NOK."
          },
          "chain": {
            "title": "Chain",
            "enum": ["polygon", "ethereum", "goerli"],
            "type": "string",
            "description": "Blockchain the NFT was minted on."
          },
          "contract_address": {
            "title": "Contract Address",
            "type": "string",
            "description": "NFT contract address which has been successfully deployed to the blockchain."
          },
          "token_id": {
            "title": "Token Id",
            "type": "string",
            "description": "A unique ```uint256``` ID inside the contract. The contract address and token ID pair is a globally unique and fully-qualified identifier for a specific NFT on chain."
          }
        },
        "example": {
          "response": "OK",
          "chain": "polygon",
          "contract_address": "0x47c7ff137d7a6644a9a96f1d44f5a6f857d9023f",
          "token_id": "2"
        }
      },
      "GetNftsRequestInclude": {
        "title": "GetNftsRequestInclude",
        "enum": [
          "default",
          "metadata",
          "file_information",
          "contract_information",
          "all"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "GetUserProfileContractsABIsResponse": {
        "title": "GetUserProfileContractsABIsResponse",
        "required": ["response", "abi"],
        "type": "object",
        "properties": {
          "response": {
            "title": "Response",
            "type": "string",
            "description": "Response status, either OK or NOK."
          },
          "abi": {
            "title": "Abi",
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "Contract ABI, used for making direct, on chain, calls to a contract."
          }
        },
        "example": {
          "response": "OK",
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "caller",
                  "type": "address"
                },
                {
                  "internalType": "string",
                  "name": "tokenURI",
                  "type": "string"
                }
              ],
              "name": "mintToCaller",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ]
        }
      },
      "GetUserProfileContractsCollectionsResponse": {
        "title": "GetUserProfileContractsCollectionsResponse",
        "required": ["response", "contracts"],
        "type": "object",
        "properties": {
          "response": {
            "title": "Response",
            "type": "string",
            "description": "Response status, either OK or NOK."
          },
          "contracts": {
            "title": "Contracts",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserProfileContractCollectionsDetails"
            },
            "description": "Details of the deployed contracts."
          }
        },
        "example": {
          "response": "OK",
          "contracts": [
            {
              "name": "Good Company Tokens",
              "symbol": "GCT",
              "transaction_hash": "0x124141or0f10140112381381dd",
              "transaction_external_url": "https://rinkeby.etherscan.io/tx/0xf9bd460983cbd6cf974ac380760a914696bb68dd2b2cb38d1dbc4ba2358a83b0",
              "chain": "rinkeby",
              "address": "0x12f28e2106ce8fd8464885b80ea865e98b465149",
              "owner_address": "0x5FDd0881Ef284D6fBB2Ed97b01cb13d707f91e42",
              "creation_date": "2021-08-23T17:25:03.501703",
              "metadata_frozen": true,
              "max_supply": 10000,
              "team_reserve": 10,
              "mint_price": 0.5,
              "tokens_per_mint": 10,
              "treasury_address": "0x5FDd0881Ef284D6fBB2Ed97b01cb13d707f91e42",
              "public_mint_start": "2022-03-12T14:20:23.526784",
              "base_uri": "ipfs://c2fybeif3hkhukbitwkcsxzk5te6kc7yrtkxfy6epasg72dsozcpnkdcxv4/",
              "prereveal_token_uri": "ipfs://bafybeif3hkhukbitwkcsxzk5te6kc7yrtkxfy6epasg72dsozcpnkdcxv4",
              "presale_mint_start": "2022-03-10T14:20:23.526784",
              "presale_whitelisted_addresses": [
                "0x5FDd0881Ef284D6fBB2Ed97b01cb13d707f91e42",
                "0x7f7631fA2C3E7b78aD8CEA99E08844440c7626f0"
              ],
              "presale_merkle_root": "f2c78c6bfba8dd539947c90750bf070feb989f955352a287da2a643be805a9b4",
              "royalties_share": 500,
              "royalties_address": "0x5FDd0881Ef284D6fBB2Ed97b01cb13d707f91e42",
              "merkle_proofs": {
                "0x5FDd0881Ef284D6fBB2Ed97b01cb13d707f91e42": [
                  "0xf2c78c6bfba8dd539947c90750bf070feb989f955352a287da2a643be805a9b4",
                  "0x8b82aec4291a11f74942b91e0b303598148a382e6a1f43556b6dff54f1f4972d"
                ],
                "0x7f7631fA2C3E7b78aD8CEA99E08844440c7626f0": [
                  "0xae9ff8919803844591e5320995dfae011d1d02cbb9e8505a9e0e57cb0397e1aa",
                  "0xfa7ad740f89fff5fbda6aa7096f0a904be4dc54abf3d7ba067bccb6afb138d04"
                ]
              }
            }
          ]
        }
      },
      "GetUserProfileContractsResponse": {
        "title": "GetUserProfileContractsResponse",
        "required": ["response", "contracts"],
        "type": "object",
        "properties": {
          "response": {
            "title": "Response",
            "type": "string",
            "description": "Response status, either OK or NOK."
          },
          "contracts": {
            "title": "Contracts",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserProfileContractDetails"
            },
            "description": "Details of the deployed contracts."
          }
        },
        "example": {
          "response": "OK",
          "contracts": [
            {
              "name": "Good Company Tokens",
              "symbol": "GCT",
              "transaction_hash": "0x124141or0f10140112381381dd",
              "transaction_external_url": "https://rinkeby.etherscan.io/tx/0xf9bd460983cbd6cf974ac380760a914696bb68dd2b2cb38d1dbc4ba2358a83b0",
              "chain": "rinkeby",
              "address": "0x12f28e2106ce8fd8464885b80ea865e98b465149",
              "owner_address": "0x5FDd0881Ef284D6fBB2Ed97b01cb13d707f91e42",
              "creation_date": "2021-08-23T17:25:03.501703",
              "metadata_frozen": true,
              "type": "erc721",
              "roles": [
                {
                  "role": "mint",
                  "addresses": ["0xMockAddress1", "0xMockAddress2"],
                  "freeze": false
                }
              ],
              "royalties_share": 500,
              "royalties_address": "0x5FDd0881Ef284D6fBB2Ed97b01cb13d707f91e42",
              "exited_nftport": false
            }
          ]
        }
      },
      "GetUserProfileMintedNftsResponse": {
        "title": "GetUserProfileMintedNftsResponse",
        "required": ["response", "total", "minted_nfts"],
        "type": "object",
        "properties": {
          "response": {
            "title": "Response",
            "type": "string",
            "description": "Response status, either OK or NOK."
          },
          "total": {
            "title": "Total",
            "type": "integer",
            "description": "Total number of NFTs minted."
          },
          "minted_nfts": {
            "title": "Minted Nfts",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserMintedNftResponse"
            },
            "description": "Details of the NFTs minted by you."
          }
        },
        "example": {
          "response": "OK",
          "total": 1,
          "minted_nfts": [
            {
              "chain": "polygon",
              "transaction_hash": "0x124141or0f10140112381381dd",
              "transaction_external_url": "https://polygonscan.com/tx/0xcbbe6072d7aa48b9774ed8b15e7f298489c5e965b32aa468ca520b30aba649a1",
              "contract_name": "My NFTPort contract",
              "contract_address": "0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb",
              "type": "erc721",
              "token_id": "6473",
              "mint_to_address": "0xc155f9bd6b71e9f71d0236b689ad7c2c5d16febf",
              "metadata_uri": "ipfs://bafkreiedsysj5xeyulisdjrjh37tz2y47dlwzwiwfagmqng3melxtigaie",
              "quantity": "1",
              "burned_transferred_amount": "0",
              "metadata_frozen": true,
              "mint_date": "2021-08-23T17:25:03.501703"
            }
          ]
        }
      },
      "GetUserProfileSettingsResponse": {
        "title": "GetUserProfileSettingsResponse",
        "required": ["response"],
        "type": "object",
        "properties": {
          "response": {
            "title": "Response",
            "type": "string",
            "description": "Response status, either OK or NOK."
          },
          "profile": {
            "title": "Profile",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserProfileResponseModel"
              }
            ],
            "description": "Your user profile."
          },
          "subscription_period": {
            "title": "Subscription Period",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserSubscriptionPeriodResponseModel"
              }
            ],
            "description": "Your subscription period."
          },
          "data_usage_and_limits": {
            "title": "Data Usage And Limits",
            "allOf": [
              {
                "$ref": "#/components/schemas/NFTDataLimitsResponseModel"
              }
            ],
            "description": "Your NFT Data usage and limits."
          },
          "minting_usage_and_limits": {
            "title": "Minting Usage And Limits",
            "allOf": [
              {
                "$ref": "#/components/schemas/MintingAndContractChainResponseModel"
              }
            ],
            "description": "Your minting and contract deployment usage and limits."
          }
        },
        "example": {
          "response": "OK",
          "profile": {
            "name": "Satoshi Nakamoto",
            "email": "satoshi@bitcoin.org",
            "joined_date": "2021-10-17T00:00:00+00:00"
          },
          "subscription_period": {
            "start_date": "2022-01-18T12:40:51.519608",
            "end_date": "2022-02-17T12:40:51.519613"
          },
          "data_usage_and_limits": {
            "data_usage": {
              "subscription_data_requests_made": 1234
            },
            "data_limits": {
              "subscription_data_requests_included": 150000,
              "max_data_requests_per_second": 10,
              "max_data_requests_per_month": 500000
            }
          },
          "minting_usage_and_limits": {
            "polygon": {
              "minting_usage": {
                "total_nfts_minted": 12856,
                "subscription_nfts_minted": 2856
              },
              "minting_limits": {
                "subscription_mints_included": 500
              },
              "contract_deployment_usage": {
                "total_contracts_deployed": 18,
                "subscription_contracts_deployed": 4
              },
              "contract_deployment_limits": {
                "subscription_contracts_included": 15
              }
            },
            "rinkeby": {
              "minting_usage": {
                "total_nfts_minted": 9895,
                "subscription_nfts_minted": 1100
              },
              "minting_limits": {
                "subscription_mints_included": 500
              },
              "contract_deployment_usage": {
                "total_contracts_deployed": 8,
                "subscription_contracts_deployed": 6
              },
              "contract_deployment_limits": {
                "subscription_contracts_included": 15
              }
            }
          }
        }
      },
      "GetUserProfileStorageResponse": {
        "title": "GetUserProfileStorageResponse",
        "required": ["response", "storage"],
        "type": "object",
        "properties": {
          "response": {
            "title": "Response",
            "type": "string",
            "description": "Response status, either OK or NOK."
          },
          "storage": {
            "title": "Storage",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/UserFileModel"
                },
                {
                  "$ref": "#/components/schemas/UserMetadataModel"
                },
                {
                  "$ref": "#/components/schemas/UserMetadataDirectoryModel"
                }
              ]
            },
            "description": "Details of the data uploaded to IPFS by you."
          }
        },
        "example": {
          "response": "OK",
          "storage": [
            {
              "storage_type": "file",
              "file_name": "my_cool_art.jpeg",
              "ipfs_uri": "ipfs://QmRModSr9gQTSZrbfbLis6mw21HycZyqMA3j8YMRD11nAQ",
              "ipfs_url": "https://ipfs.io/ipfs/QmRModSr9gQTSZrbfbLis6mw21HycZyqMA3j8YMRD11nAQ",
              "uploaded_date": "2021-08-23T17:25:03.501703",
              "content_type": "image/jpeg",
              "file_size": 85138,
              "file_size_mb": 0.0812
            }
          ]
        }
      },
      "HTTPValidationError": {
        "title": "HTTPValidationError",
        "type": "object",
        "properties": {
          "detail": {
            "title": "Detail",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            }
          }
        }
      },
      "IpfsFileUploadResponse": {
        "title": "IpfsFileUploadResponse",
        "required": ["response", "ipfs_url"],
        "type": "object",
        "properties": {
          "response": {
            "title": "Response",
            "type": "string",
            "description": "Response status, either OK or NOK."
          },
          "ipfs_url": {
            "title": "Ipfs Url",
            "type": "string",
            "description": "IPFS URL of the uploaded file."
          },
          "file_name": {
            "title": "File Name",
            "type": "string",
            "description": "Name of the uploaded file."
          },
          "content_type": {
            "title": "Content Type",
            "type": "string",
            "description": "Content type (MIME type / media type) of the uploaded file (e.g. image/jpeg)."
          },
          "file_size": {
            "title": "File Size",
            "type": "integer",
            "description": "Size of the uploaded file in bytes."
          },
          "file_size_mb": {
            "title": "File Size Mb",
            "type": "number",
            "description": "Size of the uploaded file in MB."
          }
        },
        "example": {
          "response": "OK",
          "ipfs_url": "https://ipfs.io/ipfs/QmRModSr9gQTSZrbfbLis6mw21HycZyqMA3j8YMRD11nAQ",
          "file_name": "name.jpeg",
          "content_type": "image/jpeg",
          "file_size": 85138,
          "file_size_mb": 0.0812
        }
      },
      "IpfsMetadataDirectoryUploadResponse": {
        "title": "IpfsMetadataDirectoryUploadResponse",
        "required": ["response"],
        "type": "object",
        "properties": {
          "response": {
            "title": "Response",
            "type": "string",
            "description": "Response status, either OK or NOK."
          },
          "metadata_directory_ipfs_uri": {
            "title": "Metadata Directory Ipfs Uri",
            "type": "string",
            "description": "IPFS URI of the directory containing the uploaded metadata files which you can use as the `base_uri` in [Collection contracts](../3.json/paths/~1v0~1contracts~1collections/post)."
          },
          "metadata_directory_ipfs_url": {
            "title": "Metadata Directory Ipfs Url",
            "type": "string",
            "description": "IPFS URL of the directory containing the uploaded metadata files. You can view the directory along with all the uploaded files in this URL."
          }
        },
        "example": {
          "response": "OK",
          "metadata_directory_ipfs_uri": "ipfs://bafybeif3hkhukbitwkcsxzk5te6kc7yrtkxfy6epasg72dsozcpnkdcxv4/",
          "metadata_directory_ipfs_url": "https://ipfs.io/ipfs/bafybeif3hkhukbitwkcsxzk5te6kc7yrtkxfy6epasg72dsozcpnkdcxv4"
        }
      },
      "IpfsMetadataUploadRequest": {
        "title": "IpfsMetadataUploadRequest",
        "required": ["name", "description", "file_url"],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "maxLength": 400,
            "minLength": 1,
            "type": "string",
            "description": "Name of the NFT."
          },
          "description": {
            "title": "Description",
            "maxLength": 2000,
            "minLength": 1,
            "type": "string",
            "description": "Description of the NFT."
          },
          "file_url": {
            "title": "File Url",
            "minLength": 1,
            "type": "string",
            "description": "URL of the file that you wish to link with the metadata and turn into an NFT."
          },
          "external_url": {
            "title": "External Url",
            "minLength": 1,
            "type": "string",
            "description": "URL that will appear below the NFT on some of the NFT marketplaces such as OpenSea."
          },
          "animation_url": {
            "title": "Animation Url",
            "minLength": 1,
            "type": "string",
            "description": "URL to a multimedia attachment with all filetypes supported. If you want to make sure the file is supported by OpenSea, then see their [docs](https://docs.opensea.io/docs/metadata-standards#metadata-structure). When using ```animation_url```, set the ```file_url``` as the multimedia preview which will be displayed on the NFT marketplaces e.g. if your ```animation_url``` is a video then set ```file_url``` as the preview image for it."
          },
          "custom_fields": {
            "title": "Custom Fields",
            "type": "object",
            "description": "A dictionary which allows you to extend the metadata schema with your own arbitrary fields. You can pass anything here as long as it is follows “key”: “value” format inside a dictionary. All of the fields will be flattened and added to the top-level namespace e.g. like ```name```, ```description```, etc. Read more about [Metadata Schema](https://nftschool.dev/reference/metadata-schemas/#intro-to-json-schemas). Example:\n\n                    {\n                        \"youtube_url\": \"https://www.youtube.com/watch?v=M2mBg7xHmY8&t=1s\",\n                        \"background_color\": \"ffffff\",\n                        \"random_key\": \"random_value\"\n                    }\n                    "
          },
          "attributes": {
            "title": "Attributes",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MetadataAttribute"
            },
            "description": "Optional list of NFT attributes. See [OpenSea docs](https://docs.opensea.io/docs/metadata-standards#attributes) for more information. Example:\n\n                    \"attributes\": [\n                        {\n                          \"trait_type\": \"Background\", \n                          \"value\": \"Clean\"\n                        }, \n                        {\n                          \"trait_type\": \"Type\", \n                          \"value\": \"Rare\"\n                        }, \n                        {\n                          \"trait_type\": \"Packaging\", \n                          \"value\": \"Clean\"\n                        },\n                        {\n                          \"trait_type\": \"Personality\", \n                          \"value\": \"OG\"\n                        }\n                    ]\n                    "
          }
        },
        "example": {
          "name": "My Art",
          "description": "This is my custom art piece",
          "file_url": "https://ipfs.io/ipfs/QmRModSr9gQTSZrbfbLis6mw21HycZyqMA3j8YMRD11nAQ"
        }
      },
      "IpfsMetadataUploadResponse": {
        "title": "IpfsMetadataUploadResponse",
        "required": ["response", "metadata_uri"],
        "type": "object",
        "properties": {
          "response": {
            "title": "Response",
            "type": "string",
            "description": "Response status, either OK or NOK."
          },
          "metadata_uri": {
            "title": "Metadata Uri",
            "type": "string",
            "description": "Uploaded metadata URI (also known as token URI) which you can use in [Customizable minting](../3.json/paths/~1v0~1mints~1customizable/post)."
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Name of the NFT."
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "Description of the NFT."
          },
          "file_url": {
            "title": "File Url",
            "type": "string",
            "description": "URL of the file that is linked with the metadata and can be turned into an NFT."
          },
          "external_url": {
            "title": "External Url",
            "type": "string",
            "description": "URL that will appear below the NFT on some of the NFT marketplaces such as OpenSea."
          },
          "animation_url": {
            "title": "Animation Url",
            "type": "string",
            "description": "URL to a multimedia attachment."
          },
          "custom_fields": {
            "title": "Custom Fields",
            "type": "object",
            "description": "Custom fields added to the metadata."
          },
          "attributes": {
            "title": "Attributes",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MetadataAttribute"
            },
            "description": "NFT attributes."
          }
        },
        "example": {
          "response": "OK",
          "metadata_uri": "ipfs://bafkreiedsysj5xeyulisdjrjh37tz2y47dlwzwiwfagmqng3melxtigaie",
          "name": "My Art",
          "description": "This is my custom art piece",
          "file_url": "https://ipfs.io/ipfs/QmRModSr9gQTSZrbfbLis6mw21HycZyqMA3j8YMRD11nAQ"
        }
      },
      "Listings": {
        "title": "Listings",
        "required": [
          "type",
          "lister_address",
          "nft",
          "price_details",
          "transaction_date"
        ],
        "type": "object",
        "properties": {
          "type": {
            "title": "Type",
            "enum": ["list", "cancel_list"],
            "type": "string",
            "description": "Activity type."
          },
          "lister_address": {
            "title": "Lister Address",
            "type": "string",
            "description": "Account address of the lister."
          },
          "nft": {
            "title": "Nft",
            "allOf": [
              {
                "$ref": "#/components/schemas/src__service__transactions__entities__Nft"
              }
            ],
            "description": "Details of the listed NFT."
          },
          "quantity": {
            "title": "Quantity",
            "type": "integer",
            "description": "Number of NFTs listed (can be more than 1 NFT for ERC1155)."
          },
          "price_details": {
            "title": "Price Details",
            "allOf": [
              {
                "$ref": "#/components/schemas/PriceDetails"
              }
            ],
            "description": "Price details of the listing."
          },
          "transaction_hash": {
            "title": "Transaction Hash",
            "type": "string",
            "description": "A unique 66-character identifier that is generated when a transaction is executed on the blockchain."
          },
          "block_hash": {
            "title": "Block Hash",
            "type": "string",
            "description": "The hash of the block header in which the transaction is recorded."
          },
          "block_number": {
            "title": "Block Number",
            "type": "integer",
            "description": "Number of the block in which the transaction is recorded"
          },
          "transaction_date": {
            "title": "Transaction Date",
            "type": "string",
            "description": "Date of the transaction (ISO)."
          },
          "marketplace": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Marketplace"
              }
            ],
            "description": "Marketplace where the NFT was listed."
          }
        },
        "example": {
          "type": "list",
          "lister_address": "0xb4cdc8dfd9ce9bf647f38cd8278036c0aacdc91e",
          "nft": {
            "contract_type": "ERC1155_lazy",
            "contract_address": "0xb66a603f4cfe17e3d27b87a8bfcad319856518b8",
            "token_id": "15358604318467100856391476616408347066873708425523410565866333184395837440001",
            "metadata_url": "ipfs://QmUNeWBXz4pJkBzMAaPTXS4dUXkHyVNsrfVTbN4bEsJnW1",
            "creators": [
              {
                "account_address": "0x21f4a9780a52c7a8ca5e30bac89a6b0e2722bf65",
                "creator_share": "10000"
              }
            ],
            "royalties": [
              {
                "account_address": "0x21f4a9780a52c7a8ca5e30bac89a6b0e2722bf65",
                "royalty_share": "1000"
              }
            ],
            "signatures": [
              "0xde8ee69a90450466de44e0025aec715d621afbcc1ad11361cc9d63666a7e3f3e33eb72d48f2753f6e5d414967ba5ae06d00e39d1f53e99d419038011c2f159f51b"
            ],
            "total": 5000
          },
          "quantity": 1,
          "listing_details": {
            "asset_type": "ERC20",
            "contract_address": "0xaa75b8c9e01ac2e9fc041a39d36a6536540b2072",
            "price": "0.071",
            "price_usd": 271.5
          },
          "transaction_date": "2021-12-03T01:28:55.961",
          "marketplace": "opensea"
        }
      },
      "Marketplace": {
        "title": "Marketplace",
        "enum": ["opensea", "rarible"],
        "type": "string",
        "description": "An enumeration."
      },
      "MetadataAttribute": {
        "title": "MetadataAttribute",
        "required": ["trait_type", "value"],
        "type": "object",
        "properties": {
          "trait_type": {
            "title": "Trait Type",
            "type": "string",
            "description": "Trait name."
          },
          "value": {
            "title": "String or numeric value of the attribute.",
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ]
          },
          "max_value": {
            "title": "Max Value",
            "type": "integer",
            "description": "Maximum value for a numeric value."
          },
          "display_type": {
            "title": "Display Type",
            "enum": ["boost_number", "boost_percentage", "number", "date"],
            "type": "string",
            "description": "Display type of the attribute (None for string values)."
          }
        }
      },
      "MintBatchNftRequest": {
        "title": "MintBatchNftRequest",
        "required": ["chain", "contract_address", "tokens"],
        "type": "object",
        "properties": {
          "chain": {
            "title": "Chain",
            "enum": ["polygon", "goerli"],
            "type": "string",
            "description": "Blockchain where to mint the NFT."
          },
          "contract_address": {
            "title": "Contract Address",
            "type": "string",
            "description": "The NFT will be minted inside this contract. It must be your own contract. If you don’t have one, see [Deploy a contract for NFT products](../3.json/paths/~1v0~1contracts/post)."
          },
          "tokens": {
            "title": "Tokens",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MintBatchTokenItem"
            },
            "description": "List of tokens to be minted. Each record contains mint_to_address, token ID, metadata_uri and quantity. Maximum length is 50."
          }
        },
        "example": {
          "chain": "polygon",
          "contract_address": "0xC8D297D7b496f86673551c933815B47973FC4a0e",
          "tokens": [
            {
              "mint_to_address": "0x5FDd0881Ef284D6fBB2Ed97b01cb13d707f91e42",
              "token_id": "123",
              "metadata_uri": "ipfs://bafkreiedsysj5xeyulisdjrjh37tz2y47dlwzwiwfagmqng3melxtigaie",
              "quantity": "1"
            }
          ]
        }
      },
      "MintBatchResponse": {
        "title": "MintBatchResponse",
        "required": [
          "response",
          "chain",
          "contract_address",
          "transaction_hash",
          "transaction_external_url",
          "tokens"
        ],
        "type": "object",
        "properties": {
          "response": {
            "title": "Response",
            "type": "string",
            "description": "Response status, either OK or NOK."
          },
          "chain": {
            "title": "Chain",
            "enum": ["polygon", "goerli"],
            "type": "string",
            "description": "Blockchain the NFTs were minted on."
          },
          "contract_address": {
            "title": "Contract Address",
            "type": "string",
            "description": "The contract address where the NFT were minted."
          },
          "transaction_hash": {
            "title": "Transaction Hash",
            "type": "string",
            "description": "The transaction hash which is returned by the blockchain after minting."
          },
          "transaction_external_url": {
            "title": "Transaction External Url",
            "type": "string",
            "description": "Transaction URL in an external blockchain explorer."
          },
          "tokens": {
            "title": "Tokens",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MintBatchTokenResponseItem"
            },
            "description": "List of minted tokens."
          }
        },
        "example": {
          "response": "OK",
          "chain": "polygon",
          "contract_address": "0xC8D297D7b496f86673551c933815B47973FC4a0e",
          "transaction_hash": "0xcbbe6072d7aa48b9774ed8b15e7f298489c5e965b32aa468ca520b30aba649a1",
          "transaction_external_url": "https://polygonscan.com/tx/0xcbbe6072d7aa48b9774ed8b15e7f298489c5e965b32aa468ca520b30aba649a1",
          "tokens": [
            {
              "mint_to_address": "0x5FDd0881Ef284D6fBB2Ed97b01cb13d707f91e42",
              "token_id": "123",
              "metadata_uri": "ipfs://bafkreiedsysj5xeyulisdjrjh37tz2y47dlwzwiwfagmqng3melxtigaie",
              "quantity": "1"
            }
          ]
        }
      },
      "MintBatchTokenItem": {
        "title": "MintBatchTokenItem",
        "required": ["mint_to_address", "token_id", "metadata_uri", "quantity"],
        "type": "object",
        "properties": {
          "mint_to_address": {
            "title": "Mint To Address",
            "type": "string",
            "description": "Account address where the NFTs will be sent. For example, your Metamask wallet address if you wish to send them to yourself."
          },
          "token_id": {
            "title": "Token Id",
            "type": "string",
            "description": "Customizable token ID for the NFTs. If not set, will be chosen randomly. Maximum length is 76 digit number (2^256 - 1)."
          },
          "metadata_uri": {
            "title": "Metadata Uri",
            "minLength": 1,
            "type": "string",
            "description": "Metadata URI which will be linked with your NFTs. If you don't have one, see [Upload metadata to IPFS](../3.json/paths/~1v0~1metadata/post)."
          },
          "quantity": {
            "title": "Quantity",
            "type": "integer",
            "description": "The quantity of the NFTs. Maximum quantity is 76 digit integer (2^256 - 1)"
          }
        }
      },
      "MintBatchTokenResponseItem": {
        "title": "MintBatchTokenResponseItem",
        "required": ["mint_to_address", "token_id", "metadata_uri", "quantity"],
        "type": "object",
        "properties": {
          "mint_to_address": {
            "title": "Mint To Address",
            "type": "string",
            "description": "Account address where the NFTs were minted."
          },
          "token_id": {
            "title": "Token Id",
            "type": "string",
            "description": "Token ID of the NFTs."
          },
          "metadata_uri": {
            "title": "Metadata Uri",
            "type": "string",
            "description": "Metadata URI linked with the NFTs."
          },
          "quantity": {
            "title": "Quantity",
            "type": "integer",
            "description": "The quantity of the NFTs."
          }
        }
      },
      "MintNftRequest": {
        "title": "MintNftRequest",
        "required": [
          "chain",
          "contract_address",
          "metadata_uri",
          "mint_to_address"
        ],
        "type": "object",
        "properties": {
          "chain": {
            "title": "Chain",
            "enum": ["polygon", "goerli", "ethereum"],
            "type": "string",
            "description": "Blockchain where to mint the NFT."
          },
          "contract_address": {
            "title": "Contract Address",
            "type": "string",
            "description": "The NFT will be minted inside this contract. It must be your own contract. If you don’t have one, see [Deploy a contract for NFT products](../3.json/paths/~1v0~1contracts/post)."
          },
          "metadata_uri": {
            "title": "Metadata Uri",
            "minLength": 1,
            "type": "string",
            "description": "Metadata URI which will be linked with your NFT. If you don't have one, see [Upload metadata to IPFS](../3.json/paths/~1v0~1metadata/post)."
          },
          "mint_to_address": {
            "title": "Mint To Address",
            "type": "string",
            "description": "Account address where the NFT will be sent. For example, your Metamask wallet address if you wish to send it to yourself."
          },
          "token_id": {
            "title": "Token Id",
            "type": "string",
            "description": "Customizable token ID for the NFT. If not set, will be chosen randomly. Maximum length is 76 digit number (2^256 - 1)."
          }
        },
        "example": {
          "chain": "polygon",
          "contract_address": "0xC8D297D7b496f86673551c933815B47973FC4a0e",
          "metadata_uri": "ipfs://bafkreiedsysj5xeyulisdjrjh37tz2y47dlwzwiwfagmqng3melxtigaie",
          "mint_to_address": "0x5FDd0881Ef284D6fBB2Ed97b01cb13d707f91e42"
        }
      },
      "MintNftResponse": {
        "title": "MintNftResponse",
        "required": [
          "response",
          "chain",
          "contract_address",
          "transaction_hash",
          "transaction_external_url",
          "metadata_uri",
          "mint_to_address"
        ],
        "type": "object",
        "properties": {
          "response": {
            "title": "Response",
            "type": "string",
            "description": "Response status, either OK or NOK."
          },
          "chain": {
            "title": "Chain",
            "enum": ["polygon", "ethereum", "goerli"],
            "type": "string",
            "description": "Blockchain the NFT was minted on."
          },
          "contract_address": {
            "title": "Contract Address",
            "type": "string",
            "description": "The contract address where the NFT was minted."
          },
          "transaction_hash": {
            "title": "Transaction Hash",
            "type": "string",
            "description": "The transaction hash which is returned by the blockchain after minting."
          },
          "transaction_external_url": {
            "title": "Transaction External Url",
            "type": "string",
            "description": "Transaction URL in an external blockchain explorer."
          },
          "metadata_uri": {
            "title": "Metadata Uri",
            "type": "string",
            "description": "Metadata URI linked with the NFT."
          },
          "mint_to_address": {
            "title": "Mint To Address",
            "type": "string",
            "description": "Account address where the NFT was sent."
          }
        },
        "example": {
          "response": "OK",
          "chain": "polygon",
          "contract_address": "0xC8D297D7b496f86673551c933815B47973FC4a0e",
          "transaction_hash": "0xcbbe6072d7aa48b9774ed8b15e7f298489c5e965b32aa468ca520b30aba649a1",
          "transaction_external_url": "https://polygonscan.com/tx/0xcbbe6072d7aa48b9774ed8b15e7f298489c5e965b32aa468ca520b30aba649a1",
          "metadata_uri": "ipfs://bafkreiedsysj5xeyulisdjrjh37tz2y47dlwzwiwfagmqng3melxtigaie",
          "mint_to_address": "0x5FDd0881Ef284D6fBB2Ed97b01cb13d707f91e42"
        }
      },
      "MintNftWithUploadResponse": {
        "title": "MintNftWithUploadResponse",
        "required": [
          "response",
          "chain",
          "contract_address",
          "transaction_hash",
          "transaction_external_url",
          "mint_to_address"
        ],
        "type": "object",
        "properties": {
          "response": {
            "title": "Response",
            "type": "string",
            "description": "Response status, either OK or NOK."
          },
          "chain": {
            "title": "Chain",
            "enum": ["polygon", "goerli"],
            "type": "string",
            "description": "Blockchain the NFT was minted on."
          },
          "contract_address": {
            "title": "Contract Address",
            "type": "string",
            "description": "The contract address where the NFT was minted."
          },
          "transaction_hash": {
            "title": "Transaction Hash",
            "type": "string",
            "description": "The transaction hash which is returned by the blockchain after minting."
          },
          "transaction_external_url": {
            "title": "Transaction External Url",
            "type": "string",
            "description": "Transaction URL in an external blockchain explorer."
          },
          "mint_to_address": {
            "title": "Mint To Address",
            "type": "string",
            "description": "Account address where the NFT was sent."
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Name of the NFT."
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "Description of the NFT."
          }
        },
        "example": {
          "response": "OK",
          "chain": "polygon",
          "contract_address": "0x47c7ff137d7a6644a9a96f1d44f5a6f857d9023f",
          "transaction_hash": "0x6eb71286f4875bf48be7834c1ff285910583705714f5a5acff67489f94e14954",
          "transaction_external_url": "https://polygonscan.com/tx/0x6eb71286f4875bf48be7834c1ff285910583705714f5a5acff67489f94e14954",
          "mint_to_address": "0x5FDd0881Ef284D6fBB2Ed97b01cb13d707f91e42",
          "name": "NFTPort.xyz",
          "description": "One-Stop & Simple NFT Infrastructure & APIs for Developers"
        }
      },
      "MintingAndContractChainResponseModel": {
        "title": "MintingAndContractChainResponseModel",
        "required": ["polygon", "rinkeby", "goerli", "ethereum"],
        "type": "object",
        "properties": {
          "polygon": {
            "title": "Polygon",
            "allOf": [
              {
                "$ref": "#/components/schemas/MintingUsageAndLimitsResponseModel"
              }
            ],
            "description": "Your minting and contract deployment usage and limits on Polygon."
          },
          "rinkeby": {
            "title": "Rinkeby",
            "allOf": [
              {
                "$ref": "#/components/schemas/MintingUsageAndLimitsResponseModel"
              }
            ],
            "description": "Your minting and contract deployment usage and limits on Rinkeby."
          },
          "goerli": {
            "title": "Goerli",
            "allOf": [
              {
                "$ref": "#/components/schemas/MintingUsageAndLimitsResponseModel"
              }
            ],
            "description": "Your minting and contract deployment usage and limits on Goerli."
          },
          "ethereum": {
            "title": "Ethereum",
            "allOf": [
              {
                "$ref": "#/components/schemas/MintingUsageAndLimitsResponseModel"
              }
            ],
            "description": "Your minting and contract deployment usage and limits on Ethereum."
          }
        }
      },
      "MintingUsageAndLimitsResponseModel": {
        "title": "MintingUsageAndLimitsResponseModel",
        "type": "object",
        "properties": {
          "minting_usage": {
            "title": "Minting Usage",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserMintingUsageResponseModel"
              }
            ],
            "description": "Your minting usage."
          },
          "minting_limits": {
            "title": "Minting Limits",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserMintingLimitsResponseModel"
              }
            ],
            "description": "Your minting limits."
          },
          "contract_deployment_usage": {
            "title": "Contract Deployment Usage",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserContractUsageResponseModel"
              }
            ],
            "description": "Your contract deployment usage."
          },
          "contract_deployment_limits": {
            "title": "Contract Deployment Limits",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserContractLimitsResponseModel"
              }
            ],
            "description": "Your contract deployment limits."
          }
        }
      },
      "NFTDataLimitsResponseModel": {
        "title": "NFTDataLimitsResponseModel",
        "required": ["data_usage", "data_limits"],
        "type": "object",
        "properties": {
          "data_usage": {
            "title": "Data Usage",
            "allOf": [
              {
                "$ref": "#/components/schemas/DataUsageModel"
              }
            ],
            "description": "Subscription data usage."
          },
          "data_limits": {
            "title": "Data Limits",
            "allOf": [
              {
                "$ref": "#/components/schemas/DataLimitsModel"
              }
            ],
            "description": "Data usage limits."
          }
        }
      },
      "NftDetails": {
        "title": "NftDetails",
        "required": ["chain", "contract_address", "token_id"],
        "type": "object",
        "properties": {
          "chain": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NftsRequestSupportedChain"
              }
            ],
            "description": "Blockchain where the NFT has been minted."
          },
          "contract_address": {
            "title": "Contract Address",
            "type": "string",
            "description": "The contract address of the NFT."
          },
          "token_id": {
            "title": "Token Id",
            "type": "string",
            "description": "A unique ```uint256``` ID inside the contract. The contract address and token ID pair is a globally unique and fully-qualified identifier for a specific NFT on chain."
          },
          "metadata_url": {
            "title": "Metadata Url",
            "type": "string",
            "description": "Metadata URL inside the contract for a given token, also known as the token URI. For ERC-721 it is the token_uri() function and for ERC-1155 it is the uri() function in the smart contract."
          },
          "metadata": {
            "title": "Metadata",
            "type": "object",
            "description": "Raw NFT metadata downloaded from the metadata_url i.e. token URI. It usually includes the name, description and attributes along with any other data added by the creator."
          },
          "file_information": {
            "title": "File Information",
            "allOf": [
              {
                "$ref": "#/components/schemas/src__service__nfts__entities__NftAssetMetadata"
              }
            ],
            "description": "Extra information of the NFT’s file."
          },
          "file_url": {
            "title": "File Url",
            "type": "string",
            "description": "Original file (image, video, etc) URL of the NFT."
          },
          "animation_url": {
            "title": "Animation Url",
            "type": "string",
            "description": "URL of multi-media file set in the NFT metadata. Most commonly used file types are GLTF, GLB, WEBM, MP4, M4V, OGV, OGG, along with audio MP3, WAV, and OGA. Also HTML pages, allowing to build rich experiences and interactive NFTs using JavaScript canvas, WebGL, and more."
          },
          "cached_file_url": {
            "title": "Cached File Url",
            "type": "string",
            "description": "Cached file (image, video, etc) in NFTPort's cloud with no access restrictions, low latency and high availability."
          },
          "cached_animation_url": {
            "title": "Cached Animation Url",
            "type": "string",
            "description": "Cached URL of animated file (video, gif, etc) as set in the NFT metadata. This URL points to a file cached in NFTPort's cloud storage with no access restrictions, low latency and high availability."
          },
          "mint_date": {
            "title": "Mint Date",
            "type": "string",
            "description": "Date when the NFT was minted (ISO)."
          },
          "updated_date": {
            "title": "Updated Date",
            "type": "string",
            "description": "Date when the NFT’s metadata was last downloaded or updated/refreshed."
          }
        },
        "example": {
          "chain": "ethereum",
          "contract_address": "0x23581767a106ae21c074b2276d25e5c3e136a68b",
          "token_id": "6889",
          "metadata_url": "https://live---metadata-5covpqijaa-uc.a.run.app/metadata/6889",
          "metadata": {
            "attributes": [
              {
                "trait_type": "Eyes",
                "value": "Open"
              },
              {
                "trait_type": "Body",
                "value": "Tabby"
              },
              {
                "trait_type": "Feathers",
                "value": "Gray"
              },
              {
                "trait_type": "Background",
                "value": "Purple"
              },
              {
                "trait_type": "Beak",
                "value": "Small"
              }
            ],
            "external_url": "https://moonbirds.xyz/",
            "image": "https://live---metadata-5covpqijaa-uc.a.run.app/images/6889",
            "name": "#6889",
            "x_debug": ["orig:9745"]
          },
          "file_information": {
            "height": 1008,
            "width": 1008,
            "file_size": 6411
          },
          "file_url": "https://live---metadata-5covpqijaa-uc.a.run.app/images/6889",
          "cached_file_url": "https://storage.googleapis.com/sentinel-nft/raw-assets/30152540c5651ff250c662f1565beefb7bf7ad7523ece35d2e42b6fcbfbc0d94.png",
          "mint_date": "2022-04-16T16:21:43",
          "updated_date": "2022-09-27T17:27:09.096295"
        }
      },
      "NftDetailsResponse": {
        "title": "NftDetailsResponse",
        "required": ["response"],
        "type": "object",
        "properties": {
          "response": {
            "title": "Response",
            "type": "string",
            "description": "Response status, either OK or NOK."
          },
          "nft": {
            "title": "Nft",
            "allOf": [
              {
                "$ref": "#/components/schemas/NftDetails"
              }
            ],
            "description": "Details of the NFT."
          },
          "owner": {
            "title": "Owner",
            "type": "string",
            "description": "Current owner of the NFT."
          },
          "contract": {
            "title": "Contract",
            "allOf": [
              {
                "$ref": "#/components/schemas/ContractInfoResponse"
              }
            ],
            "description": "Information of the NFT’s contract."
          },
          "status": {
            "title": "Status",
            "enum": ["ADDED", "PROCESSING", "PENDING", "REFRESHED_RECENTLY"],
            "type": "string",
            "description": "Status of the contract tokens in the metadata refresh queue."
          },
          "status_message": {
            "title": "Status Message",
            "type": "string",
            "description": "Detailed description of the ```status```."
          }
        },
        "example": {
          "response": "OK",
          "nft": {
            "chain": "ethereum",
            "contract_address": "0x23581767a106ae21c074b2276d25e5c3e136a68b",
            "token_id": "6889",
            "metadata_url": "https://live---metadata-5covpqijaa-uc.a.run.app/metadata/6889",
            "metadata": {
              "attributes": [
                {
                  "trait_type": "Eyes",
                  "value": "Open"
                },
                {
                  "trait_type": "Body",
                  "value": "Tabby"
                },
                {
                  "trait_type": "Feathers",
                  "value": "Gray"
                },
                {
                  "trait_type": "Background",
                  "value": "Purple"
                },
                {
                  "trait_type": "Beak",
                  "value": "Small"
                }
              ],
              "external_url": "https://moonbirds.xyz/",
              "image": "https://live---metadata-5covpqijaa-uc.a.run.app/images/6889",
              "name": "#6889",
              "x_debug": ["orig:9745"]
            },
            "file_information": {
              "height": 1008,
              "width": 1008,
              "file_size": 6411
            },
            "file_url": "https://live---metadata-5covpqijaa-uc.a.run.app/images/6889",
            "cached_file_url": "https://storage.googleapis.com/sentinel-nft/raw-assets/30152540c5651ff250c662f1565beefb7bf7ad7523ece35d2e42b6fcbfbc0d94.png",
            "mint_date": "2022-04-16T16:21:43",
            "updated_date": "2022-09-27T17:27:09.096295"
          },
          "owner": "0xAb5801a7D398351b8bE11C439e05C5B3259aeC9B",
          "contract": {
            "name": "Moonbirds",
            "symbol": "MOONBIRD",
            "type": "ERC721",
            "metadata": {
              "description": "A collection of 10,000 utility-enabled PFPs that feature a richly diverse and unique pool of rarity-powered traits. What's more, each Moonbird unlocks private club membership and additional benefits the longer you hold them. We call it nesting – because, obviously.",
              "thumbnail_url": "https://i.seadn.io/gae/H-eyNE1MwL5ohL-tCfn_Xa1Sl9M9B4612tLYeUlQubzt4ewhr4huJIR5OLuyO3Z5PpJFSwdm7rq-TikAh7f5eUw338A2cy6HRH75?w=500&auto=format",
              "cached_thumbnail_url": "https://storage.googleapis.com/sentinel-nft/raw-assets/e317daadcd67dede885ecda7023275dcf2714c7d9093ebdadd9923a129f0d635.png",
              "banner_url": "https://i.seadn.io/gae/ouzjfA0LotbHC92vuDph9JDeg7Z4ZFo12Pr9GJpfSAZSrnXDOubJn0eTvinwzUTPsWhnLLq5ocjcDSrpNV0_MYIjueVJrzFlE6p0?w=500&auto=format",
              "cached_banner_url": "https://storage.googleapis.com/sentinel-nft/raw-assets/2aa3577c4f1dff4303cf3c340197cf84e6155597ee49a20bffdd3e3fc82ea128.png"
            }
          }
        }
      },
      "NftsRequestSupportedChain": {
        "title": "NftsRequestSupportedChain",
        "enum": ["ethereum", "polygon", "rinkeby", "goerli"],
        "type": "string",
        "description": "An enumeration."
      },
      "NftsResponse": {
        "title": "NftsResponse",
        "required": ["response"],
        "type": "object",
        "properties": {
          "response": {
            "title": "Response",
            "type": "string",
            "description": "Response status, either OK or NOK."
          },
          "nfts": {
            "title": "Nfts",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/src__service__nfts__entities__Nft"
            },
            "description": "Details of the NFTs."
          },
          "continuation": {
            "title": "Continuation",
            "type": "string",
            "description": "Continuation ID for next page."
          }
        },
        "example": {
          "response": "OK",
          "nfts": [
            {
              "chain": "ethereum",
              "contract_address": "0x23581767a106ae21c074b2276d25e5c3e136a68b",
              "token_id": "6889",
              "metadata_url": "https://live---metadata-5covpqijaa-uc.a.run.app/metadata/6889",
              "metadata": {
                "attributes": [
                  {
                    "trait_type": "Eyes",
                    "value": "Open"
                  },
                  {
                    "trait_type": "Body",
                    "value": "Tabby"
                  },
                  {
                    "trait_type": "Feathers",
                    "value": "Gray"
                  },
                  {
                    "trait_type": "Background",
                    "value": "Purple"
                  },
                  {
                    "trait_type": "Beak",
                    "value": "Small"
                  }
                ],
                "external_url": "https://moonbirds.xyz/",
                "image": "https://live---metadata-5covpqijaa-uc.a.run.app/images/6889",
                "name": "#6889",
                "x_debug": ["orig:9745"]
              },
              "file_information": {
                "height": 1008,
                "width": 1008,
                "file_size": 6411
              },
              "file_url": "https://live---metadata-5covpqijaa-uc.a.run.app/images/6889",
              "cached_file_url": "https://storage.googleapis.com/sentinel-nft/raw-assets/30152540c5651ff250c662f1565beefb7bf7ad7523ece35d2e42b6fcbfbc0d94.png",
              "mint_date": "2022-04-16T16:21:43",
              "updated_date": "2022-09-27T17:27:09.096295",
              "contract": {
                "name": "Moonbirds",
                "symbol": "MOONBIRD",
                "type": "ERC721",
                "metadata": {
                  "description": "A collection of 10,000 utility-enabled PFPs that feature a richly diverse and unique pool of rarity-powered traits. What's more, each Moonbird unlocks private club membership and additional benefits the longer you hold them. We call it nesting – because, obviously.",
                  "thumbnail_url": "https://i.seadn.io/gae/H-eyNE1MwL5ohL-tCfn_Xa1Sl9M9B4612tLYeUlQubzt4ewhr4huJIR5OLuyO3Z5PpJFSwdm7rq-TikAh7f5eUw338A2cy6HRH75?w=500&auto=format",
                  "cached_thumbnail_url": "https://storage.googleapis.com/sentinel-nft/raw-assets/e317daadcd67dede885ecda7023275dcf2714c7d9093ebdadd9923a129f0d635.png",
                  "banner_url": "https://i.seadn.io/gae/ouzjfA0LotbHC92vuDph9JDeg7Z4ZFo12Pr9GJpfSAZSrnXDOubJn0eTvinwzUTPsWhnLLq5ocjcDSrpNV0_MYIjueVJrzFlE6p0?w=500&auto=format",
                  "cached_banner_url": "https://storage.googleapis.com/sentinel-nft/raw-assets/2aa3577c4f1dff4303cf3c340197cf84e6155597ee49a20bffdd3e3fc82ea128.png"
                }
              }
            }
          ],
          "continuation": "MHg0Zjg5Y2QwY2FlMWU1NGQ5OGRiNmE4MDE1MGE4MjRhNTMzNTAyZWVhXzI0MzU="
        }
      },
      "PriceDetails": {
        "title": "PriceDetails",
        "type": "object",
        "properties": {
          "asset_type": {
            "title": "Asset Type",
            "enum": ["ETH", "ERC20"],
            "type": "string",
            "description": "Type of the asset the NFT is traded for."
          },
          "contract_address": {
            "title": "Contract Address",
            "type": "string",
            "description": "Contract address (for `ERC20`)."
          },
          "price": {
            "title": "Price",
            "type": "number",
            "description": "Price in `asset_type`- `ETH` or `ERC20`."
          },
          "price_usd": {
            "title": "Price Usd",
            "type": "number",
            "description": "Price in USD."
          }
        },
        "example": {
          "asset_type": "ERC20",
          "contract_address": "0xaa75b8c9e01ac2e9fc041a39d36a6536540b2072",
          "price": "0.071",
          "price_usd": 271.5
        }
      },
      "ReportTypes": {
        "title": "ReportTypes",
        "enum": ["uris"],
        "type": "string",
        "description": "An enumeration."
      },
      "ReportURIResponse": {
        "title": "ReportURIResponse",
        "required": ["response"],
        "type": "object",
        "properties": {
          "response": {
            "title": "Response",
            "enum": ["OK", "NOK"],
            "type": "string",
            "description": "Response status, either OK or NOK."
          },
          "report": {
            "title": "Report",
            "type": "object"
          },
          "last_updated_at": {
            "title": "Last Updated At",
            "type": "string"
          },
          "error": {
            "title": "Error",
            "type": "string",
            "description": "Error response."
          }
        },
        "example": {
          "response": "OK",
          "last_updated_at": "2022-08-02 13:44:02",
          "report": {
            "animation_uri_stats": {
              "http_centralized": {
                "count_failed": 44520,
                "count_successful": 819890,
                "floor_price_failed": 22243.16,
                "floor_price_successful": 45146357.81
              },
              "ipfs_cid": {
                "count_failed": 38186,
                "count_successful": 192870,
                "floor_price_failed": 69696969711128.08,
                "floor_price_successful": 139394140121173.48
              }
            }
          }
        }
      },
      "RoleType": {
        "title": "RoleType",
        "enum": ["mint", "update_contract", "update_token", "burn", "transfer"],
        "type": "string",
        "description": "An enumeration."
      },
      "RolesItem": {
        "title": "RolesItem",
        "required": ["role", "addresses", "freeze"],
        "type": "object",
        "properties": {
          "role": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RoleType"
              }
            ],
            "description": "Permission set for the given wallet addresses. ```mint``` role allows the address to mint to the contract. ```update_contract``` role allows the address to update the contract with [Update a deployed contract for NFT products](https://docs.nftport.xyz/docs/nftport/b3A6MjU2NTIyMTM-update-a-deployed-contract-for-nft-products). ```update_token``` role allows the address to update the NFT with [Update a minted NFT](../3.json/paths/~1v0~1mints~1customizable/put). ```burn``` role allows the address to burn NFTs owned by the contract. ```transfer``` role allows the address to transfer NFTs owned by the contract."
          },
          "addresses": {
            "title": "Addresses",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of wallet addresses or a single address which will have this role."
          },
          "freeze": {
            "title": "Freeze",
            "type": "boolean",
            "description": "If ```true```, this role/addresses list is frozen on a contract level and cannot be updated."
          }
        }
      },
      "Royalties": {
        "title": "Royalties",
        "required": ["account_address", "royalty_share"],
        "type": "object",
        "properties": {
          "account_address": {
            "title": "Account Address",
            "type": "string",
            "description": "Account address where royalty is paid."
          },
          "royalty_share": {
            "title": "Royalty Share",
            "type": "integer",
            "description": "Royalty share (Range: 1-100000 i.e., 0.01%-100%)."
          }
        },
        "example": {
          "account_address": "0x21f4a9780a52c7a8ca5e30bac89a6b0e2722bf65",
          "royalty_share": "1000"
        }
      },
      "Sales": {
        "title": "Sales",
        "required": [
          "type",
          "seller_address",
          "nft",
          "price_details",
          "transaction_hash",
          "block_hash",
          "block_number",
          "transaction_date"
        ],
        "type": "object",
        "properties": {
          "type": {
            "title": "Type",
            "enum": ["sale"],
            "type": "string",
            "description": "Activity type."
          },
          "buyer_address": {
            "title": "Buyer Address",
            "type": "string",
            "description": "Account address of the buyer."
          },
          "seller_address": {
            "title": "Seller Address",
            "type": "string",
            "description": "Account address of the seller."
          },
          "nft": {
            "title": "Nft",
            "allOf": [
              {
                "$ref": "#/components/schemas/src__service__transactions__entities__Nft"
              }
            ],
            "description": "Details of the sold NFT."
          },
          "quantity": {
            "title": "Quantity",
            "type": "integer",
            "description": "Number of NFT units (can be more than 1 NFT for ERC1155)."
          },
          "price_details": {
            "title": "Price Details",
            "allOf": [
              {
                "$ref": "#/components/schemas/PriceDetails"
              }
            ],
            "description": "Price details of the sale."
          },
          "transaction_hash": {
            "title": "Transaction Hash",
            "type": "string",
            "description": "A unique 66-character identifier that is generated when a transaction is executed on the blockchain."
          },
          "block_hash": {
            "title": "Block Hash",
            "type": "string",
            "description": "The hash of the block header in which the transaction is recorded."
          },
          "block_number": {
            "title": "Block Number",
            "type": "integer",
            "description": "Number of the block in which the transaction is recorded."
          },
          "transaction_date": {
            "title": "Transaction Date",
            "type": "string",
            "description": "Date of the transaction (ISO)."
          },
          "marketplace": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Marketplace"
              }
            ],
            "description": "Marketplace where the sale took place."
          }
        },
        "example": {
          "type": "sale",
          "buyer_address": "0xc2d131a52a7bc75f6558588d010d649e02710115",
          "seller_address": "0xc2d131a52a7bc75f6558588d010d649e02710115",
          "nft": {
            "contract_type": "ERC1155_lazy",
            "contract_address": "0xb66a603f4cfe17e3d27b87a8bfcad319856518b8",
            "token_id": "15358604318467100856391476616408347066873708425523410565866333184395837440001",
            "metadata_url": "ipfs://QmUNeWBXz4pJkBzMAaPTXS4dUXkHyVNsrfVTbN4bEsJnW1",
            "creators": [
              {
                "account_address": "0x21f4a9780a52c7a8ca5e30bac89a6b0e2722bf65",
                "creator_share": "10000"
              }
            ],
            "royalties": [
              {
                "account_address": "0x21f4a9780a52c7a8ca5e30bac89a6b0e2722bf65",
                "royalty_share": "1000"
              }
            ],
            "signatures": [
              "0xde8ee69a90450466de44e0025aec715d621afbcc1ad11361cc9d63666a7e3f3e33eb72d48f2753f6e5d414967ba5ae06d00e39d1f53e99d419038011c2f159f51b"
            ],
            "total": 5000
          },
          "quantity": 1,
          "price_details": {
            "asset_type": "ERC20",
            "contract_address": "0xaa75b8c9e01ac2e9fc041a39d36a6536540b2072",
            "price": "0.071",
            "price_usd": 271.5
          },
          "transaction_hash": "0x1c3b3e05961e5010e1b13d60a550ee9e14f9f3ef99a4d81e266b2b2067d6df87",
          "block_hash": "0x8ad765098c04fa1b566b35848e951e99257a161a50a8732f06aef393f4e18dae",
          "block_number": 13733126,
          "transaction_date": "2021-12-03T10:37:41",
          "marketplace": "opensea"
        }
      },
      "SearchResult": {
        "title": "SearchResult",
        "required": ["response"],
        "type": "object",
        "properties": {
          "response": {
            "title": "Response",
            "type": "string",
            "description": "Response status, either OK or NOK."
          },
          "nfts": {
            "title": "Nfts",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SearchResultImage"
            },
            "description": "nfts"
          }
        },
        "example": {
          "response": "OK",
          "nfts": [
            {
              "chain": "ethereum",
              "contract_address": "0x12f28e2106ce8fd8464885b80ea865e98b465149",
              "token_id": "100030071",
              "cached_file_url": "https://storage.googleapis.com/sentinel-nft/raw-assets/c_0x12f28e2106ce8fd8464885b80ea865e98b465149_t_100030071_raw_asset.png",
              "metadata": {
                "description": "ok first off it's a fucking dollar, if you need extra convincing from some BS artist's notes wether you want to spend a dollar on this i will punch you in the god damn face. smash the buy button ya jabroni.",
                "background_color": "ffffff",
                "external_url": "https://niftygateway.com/#/",
                "image": "https://res.cloudinary.com/nifty-gateway/video/upload/v1603975889/Beeple/POLITICAL_BULLSHIT_uqbc8x.png",
                "name": "POLITICS IS BULLSHIT #71/100",
                "animation_url": "https://res.cloudinary.com/nifty-gateway/video/upload/v1603975889/Beeple/POLITICAL_BULLSHIT_uqbc8x.mp4"
              }
            }
          ]
        }
      },
      "SearchResultImage": {
        "title": "SearchResultImage",
        "required": ["chain", "contract_address", "token_id"],
        "type": "object",
        "properties": {
          "chain": {
            "title": "Chain",
            "enum": ["ethereum", "polygon"],
            "type": "string",
            "description": "Blockchain where the NFT has been minted."
          },
          "contract_address": {
            "title": "Contract Address",
            "type": "string",
            "description": "The contract address of the NFT."
          },
          "token_id": {
            "title": "Token Id",
            "type": "string",
            "description": "A unique ```uint256``` ID inside the contract. The contract address and token ID pair is a globally unique and fully-qualified identifier for a specific NFT on chain."
          },
          "cached_file_url": {
            "title": "Cached File Url",
            "type": "string",
            "description": "Cached file (image, video, etc) in NFTPort's cloud with no access restrictions and without IPFS issues."
          },
          "metadata": {
            "title": "Metadata",
            "type": "object",
            "description": "Raw NFT metadata downloaded from the metadata_url i.e. token URI. It usually includes the name, description and attributes along with any other data added by the creator."
          }
        },
        "example": {
          "chain": "ethereum",
          "contract_address": "0x12f28e2106ce8fd8464885b80ea865e98b465149",
          "token_id": "100030071",
          "cached_file_url": "https://storage.googleapis.com/sentinel-nft/raw-assets/c_0x12f28e2106ce8fd8464885b80ea865e98b465149_t_100030071_raw_asset.png",
          "metadata": {
            "description": "ok first off it's a fucking dollar, if you need extra convincing from some BS artist's notes wether you want to spend a dollar on this i will punch you in the god damn face. smash the buy button ya jabroni.",
            "background_color": "ffffff",
            "external_url": "https://niftygateway.com/#/",
            "image": "https://res.cloudinary.com/nifty-gateway/video/upload/v1603975889/Beeple/POLITICAL_BULLSHIT_uqbc8x.png",
            "name": "POLITICS IS BULLSHIT #71/100",
            "animation_url": "https://res.cloudinary.com/nifty-gateway/video/upload/v1603975889/Beeple/POLITICAL_BULLSHIT_uqbc8x.mp4"
          }
        }
      },
      "SearchUrlRequest": {
        "title": "SearchUrlRequest",
        "required": ["url"],
        "type": "object",
        "properties": {
          "url": {
            "title": "Url",
            "maxLength": 500,
            "minLength": 1,
            "type": "string",
            "description": "Image URL. Supports .JPG, .JPEG, .PNG, .WebP file formats."
          },
          "page_number": {
            "title": "Page Number",
            "minimum": 1.0,
            "type": "integer",
            "description": "The page number of the results to return. The first page is 1.",
            "default": 1
          },
          "page_size": {
            "title": "Page Size",
            "maximum": 50.0,
            "minimum": 1.0,
            "type": "integer",
            "description": "The number of results returned per page. Limit can range between 1 and 50, and the default is 50.",
            "default": 50
          }
        },
        "example": {
          "url": "https://supermariorun.com/assets/img/stage/obj_mode1.png",
          "page_number": 1,
          "page_size": 50
        }
      },
      "SolanaAccountCollectionsRequestType": {
        "title": "SolanaAccountCollectionsRequestType",
        "enum": ["owns_collections_nfts"],
        "type": "string",
        "description": "An enumeration."
      },
      "SolanaAccountCollectionsResponse": {
        "title": "SolanaAccountCollectionsResponse",
        "required": ["response"],
        "type": "object",
        "properties": {
          "response": {
            "title": "Response",
            "enum": ["OK", "NOK"],
            "type": "string",
            "description": "Response status, either OK or NOK."
          },
          "collections": {
            "title": "Collections",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SolanaCollectionsModelResponse"
            }
          },
          "continuation": {
            "title": "Continuation",
            "type": "string",
            "description": "Continuation ID for the next page."
          },
          "total": {
            "title": "Total",
            "type": "integer",
            "description": "Total number of Collections the given account owns NFTs in."
          }
        },
        "example": {
          "response": "OK",
          "collections": [
            {
              "collection_id": "okay-bears-3fb117dd",
              "on_chain_collection_key": "3saAedkM9o5g1u5DCqsuMZuC4GRqPB4TuMkvSsSVvGQ3",
              "name": "Okay Bears",
              "description": "Okay Bears is a culture shift. A clean collection of 10,000 diverse bears building a virtuous community that will transcend the internet into the real world.",
              "num_nfts_owned": 3
            }
          ]
        }
      },
      "SolanaAccountNftsResponse": {
        "title": "SolanaAccountNftsResponse",
        "required": ["response"],
        "type": "object",
        "properties": {
          "response": {
            "title": "Response",
            "enum": ["OK", "NOK"],
            "type": "string",
            "description": "Response status, either OK or NOK."
          },
          "nfts": {
            "title": "Nfts",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SolanaNft"
            },
            "description": "Details of the NFTs."
          },
          "total": {
            "title": "Total",
            "type": "integer",
            "description": "Total number of NFTs owned by the address."
          },
          "continuation": {
            "title": "Continuation",
            "type": "string",
            "description": "Continuation ID for the next page.",
            "default": ""
          }
        },
        "example": {
          "response": "OK",
          "nfts": [
            {
              "mint_address": "GStvBquP3vmBeHV1KsAcnocN4Sf634GWMtLgNiBjDSs4",
              "collection_id": "okay-bears-3fb117dd",
              "on_chain_collection_key": "3saAedkM9o5g1u5DCqsuMZuC4GRqPB4TuMkvSsSVvGQ3",
              "metadata": {
                "description": "Okay Bears is a culture shift. A clean collection of 10,000 diverse bears building a virtuous community that will transcend the internet into the real world.",
                "background_color": "ffffff",
                "external_url": "https://www.okaybears.com/",
                "image": "https://bafybeie6axzmpeqswiugsuim2d7d3mptwgviwnt5o6k5wuyxfkd357sk24.ipfs.nftstorage.link/4973.png?ext=png",
                "name": "Okay Bear #4974"
              },
              "metadata_url": "https://bafybeigtouebpxhlaps7f3mlvo7lwortfc7umg7dp2q6uut3muiwarslee.ipfs.nftstorage.link/4973.json",
              "file_url": "https://bafybeie6axzmpeqswiugsuim2d7d3mptwgviwnt5o6k5wuyxfkd357sk24.ipfs.nftstorage.link/4973.png?ext=png",
              "animation_url": "https://res.cloudinary.com/nifty-gateway/video/upload/v1603975889/Beeple/POLITICAL_BULLSHIT_uqbc8x.mp4",
              "cached_file_url": "https://storage.googleapis.com/sentinel-nft/raw-assets/d4df91472cfdf2bc0853d37db097c805f81fd29a7e140fb582421c83dc52c975.png",
              "cached_animation_url": "https://storage.googleapis.com/sentinel-nft/raw-assets/e129f89af4022209258d1a547f421583f0701b54572c4616e50b59d3294ba8fb.mp4",
              "mint_date": "2022-04-26T18:10:40",
              "file_information": {
                "height": 512,
                "width": 512,
                "file_size": 310751
              },
              "updated_date": "2021-10-19T15:03:54.838612"
            }
          ],
          "total": 12
        }
      },
      "SolanaAccountRequestInclude": {
        "title": "SolanaAccountRequestInclude",
        "enum": ["default", "metadata"],
        "type": "string",
        "description": "An enumeration."
      },
      "SolanaBids": {
        "title": "SolanaBids",
        "required": ["type", "nft", "price_details"],
        "type": "object",
        "properties": {
          "type": {
            "title": "Type",
            "enum": ["bid", "cancel_bid"],
            "type": "string",
            "description": "Activity type."
          },
          "bidder_address": {
            "title": "Bidder Address",
            "type": "string",
            "description": "Account address of the bidder."
          },
          "nft": {
            "title": "Nft",
            "allOf": [
              {
                "$ref": "#/components/schemas/SolanaTransactionNft"
              }
            ],
            "description": "Details of the NFT."
          },
          "quantity": {
            "title": "Quantity",
            "type": "integer",
            "description": "Number of NFTs bid on."
          },
          "price_details": {
            "title": "Price Details",
            "allOf": [
              {
                "$ref": "#/components/schemas/SolanaPriceDetails"
              }
            ],
            "description": "Price details of the bid."
          },
          "transaction_signature": {
            "title": "Transaction Signature",
            "type": "string",
            "description": "A unique 66-character identifier that is generated when a transaction is executed on the blockchain."
          },
          "slot_number": {
            "title": "Slot Number",
            "type": "string",
            "description": "The hash of the block header in which the transaction is recorded."
          },
          "transaction_date": {
            "title": "Transaction Date",
            "type": "string",
            "description": "Date of the transaction (ISO)."
          },
          "marketplace": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SolanaMarketplace"
              }
            ],
            "description": "Marketplace where the bid was made."
          }
        },
        "example": {
          "type": "bid",
          "bidder_address": "9S4PcAyZMGfHyLTc5AGsFFEahNmrCErGKKaz1i1FYBYL",
          "nft": {
            "mint_address": "GStvBquP3vmBeHV1KsAcnocN4Sf634GWMtLgNiBjDSs4",
            "collection_id": "okay-bears-3fb117dd",
            "on_chain_collection_key": "3saAedkM9o5g1u5DCqsuMZuC4GRqPB4TuMkvSsSVvGQ3"
          },
          "quantity": 1,
          "transaction_signature": "gMFPCs8e7TgMs2JPfQdrw1B6S2GEti2JxF5r3oeVxJeXkPyBz8dLp1s5SozjsEeUMdxjEmrfkygyhZgyYagAarB",
          "slot_number": 13732674,
          "price_details": {
            "price": "0.071",
            "price_usd": 271.5
          },
          "transaction_date": "2021-12-03T01:28:55.961",
          "marketplace": "magiceden"
        }
      },
      "SolanaCollectionNft": {
        "title": "SolanaCollectionNft",
        "required": ["mint_address"],
        "type": "object",
        "properties": {
          "mint_address": {
            "title": "Mint Address",
            "type": "string",
            "description": "The mint address of the NFT."
          },
          "collection_id": {
            "title": "Collection Id",
            "type": "string",
            "description": "The collection ID of the NFT. This is an off-chain ID generated by NFTPort."
          },
          "on_chain_collection_key": {
            "title": "On Chain Collection Key",
            "type": "string",
            "description": "The on-chain collection key of the NFT collection, i.e. public key of the mint account of the collection NFT. See [Metaplex Certified Collections](https://docs.metaplex.com/programs/token-metadata/certified-collections) for details."
          },
          "metadata": {
            "title": "Metadata",
            "type": "object",
            "description": "Raw NFT metadata downloaded from the metadata_url i.e. token URI. It usually includes the name, description and attributes along with any other data added by the creator."
          },
          "metadata_url": {
            "title": "Metadata Url",
            "type": "string",
            "description": "Metadata URL inside the contract for a given token, also known as the token URI."
          },
          "file_url": {
            "title": "File Url",
            "type": "string",
            "description": "Original file (image, video, etc) URL of the NFT."
          },
          "animation_url": {
            "title": "Animation Url",
            "type": "string",
            "description": "URL of multi-media file set in the NFT metadata. Most commonly used file types are GLTF, GLB, WEBM, MP4, M4V, OGV, OGG, along with audio MP3, WAV, and OGA. Also HTML pages, allowing to build rich experiences and interactive NFTs using JavaScript canvas, WebGL, and more."
          },
          "cached_file_url": {
            "title": "Cached File Url",
            "type": "string",
            "description": "Cached file (image, video, etc) in NFTPort's cloud with no access restrictions, low latency and high availability."
          },
          "cached_animation_url": {
            "title": "Cached Animation Url",
            "type": "string",
            "description": "Cached URL of animated file (video, gif, etc) as set in the NFT metadata. This URL points to a file cached in NFTPort's cloud storage with no access restrictions, low latency and high availability."
          },
          "mint_date": {
            "title": "Mint Date",
            "type": "string",
            "description": "Date when the NFT was minted (ISO)."
          },
          "file_information": {
            "title": "File Information",
            "allOf": [
              {
                "$ref": "#/components/schemas/src__service__solana__nfts__entities__NftAssetMetadata"
              }
            ],
            "description": "Extra information of the NFT’s file."
          },
          "updated_date": {
            "title": "Updated Date",
            "type": "string",
            "description": "Date when the NFT’s metadata was last downloaded or updated/refreshed."
          },
          "owner": {
            "title": "Owner",
            "type": "string",
            "description": "The address of the account that owns the NFT."
          }
        },
        "example": {
          "mint_address": "GStvBquP3vmBeHV1KsAcnocN4Sf634GWMtLgNiBjDSs4",
          "collection_id": "okay-bears-3fb117dd",
          "on_chain_collection_key": "3saAedkM9o5g1u5DCqsuMZuC4GRqPB4TuMkvSsSVvGQ3",
          "metadata": {
            "description": "Okay Bears is a culture shift. A clean collection of 10,000 diverse bears building a virtuous community that will transcend the internet into the real world.",
            "background_color": "ffffff",
            "external_url": "https://www.okaybears.com/",
            "image": "https://bafybeie6axzmpeqswiugsuim2d7d3mptwgviwnt5o6k5wuyxfkd357sk24.ipfs.nftstorage.link/4973.png?ext=png",
            "name": "Okay Bear #4974"
          },
          "metadata_url": "https://bafybeigtouebpxhlaps7f3mlvo7lwortfc7umg7dp2q6uut3muiwarslee.ipfs.nftstorage.link/4973.json",
          "file_url": "https://bafybeie6axzmpeqswiugsuim2d7d3mptwgviwnt5o6k5wuyxfkd357sk24.ipfs.nftstorage.link/4973.png?ext=png",
          "animation_url": "https://res.cloudinary.com/nifty-gateway/video/upload/v1603975889/Beeple/POLITICAL_BULLSHIT_uqbc8x.mp4",
          "cached_file_url": "https://storage.googleapis.com/sentinel-nft/raw-assets/d4df91472cfdf2bc0853d37db097c805f81fd29a7e140fb582421c83dc52c975.png",
          "cached_animation_url": "https://storage.googleapis.com/sentinel-nft/raw-assets/e129f89af4022209258d1a547f421583f0701b54572c4616e50b59d3294ba8fb.mp4",
          "mint_date": "2022-04-26T18:10:40",
          "file_information": {
            "height": 512,
            "width": 512,
            "file_size": 310751
          },
          "updated_date": "2021-10-19T15:03:54.838612",
          "owner": "6TijTE3WSTr2Z16LzB14kN8kECH3buYjmMyBQbg1S7bw"
        }
      },
      "SolanaCollectionNftsResponse": {
        "title": "SolanaCollectionNftsResponse",
        "required": ["response"],
        "type": "object",
        "properties": {
          "response": {
            "title": "Response",
            "enum": ["OK", "NOK"],
            "type": "string",
            "description": "Response status, either OK or NOK."
          },
          "nfts": {
            "title": "Nfts",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SolanaCollectionNft"
            },
            "description": "Details of the NFTs."
          },
          "total": {
            "title": "Total",
            "type": "integer",
            "description": "Total number of NFTs in the given collection."
          },
          "status": {
            "title": "Status",
            "enum": ["ADDED", "PROCESSING", "PENDING", "REFRESHED_RECENTLY"],
            "type": "string",
            "description": "Status of the contract tokens in the metadata refresh queue."
          },
          "status_message": {
            "title": "Status Message",
            "type": "string",
            "description": "Detailed description of the ```status```."
          }
        },
        "example": {
          "response": "OK",
          "nfts": [
            {
              "mint_address": "GStvBquP3vmBeHV1KsAcnocN4Sf634GWMtLgNiBjDSs4",
              "collection_id": "okay-bears-3fb117dd",
              "on_chain_collection_key": "3saAedkM9o5g1u5DCqsuMZuC4GRqPB4TuMkvSsSVvGQ3",
              "metadata": {
                "description": "Okay Bears is a culture shift. A clean collection of 10,000 diverse bears building a virtuous community that will transcend the internet into the real world.",
                "background_color": "ffffff",
                "external_url": "https://www.okaybears.com/",
                "image": "https://bafybeie6axzmpeqswiugsuim2d7d3mptwgviwnt5o6k5wuyxfkd357sk24.ipfs.nftstorage.link/4973.png?ext=png",
                "name": "Okay Bear #4974"
              },
              "metadata_url": "https://bafybeigtouebpxhlaps7f3mlvo7lwortfc7umg7dp2q6uut3muiwarslee.ipfs.nftstorage.link/4973.json",
              "file_url": "https://bafybeie6axzmpeqswiugsuim2d7d3mptwgviwnt5o6k5wuyxfkd357sk24.ipfs.nftstorage.link/4973.png?ext=png",
              "animation_url": "https://res.cloudinary.com/nifty-gateway/video/upload/v1603975889/Beeple/POLITICAL_BULLSHIT_uqbc8x.mp4",
              "cached_file_url": "https://storage.googleapis.com/sentinel-nft/raw-assets/d4df91472cfdf2bc0853d37db097c805f81fd29a7e140fb582421c83dc52c975.png",
              "cached_animation_url": "https://storage.googleapis.com/sentinel-nft/raw-assets/e129f89af4022209258d1a547f421583f0701b54572c4616e50b59d3294ba8fb.mp4",
              "mint_date": "2022-04-26T18:10:40",
              "file_information": {
                "height": 512,
                "width": 512,
                "file_size": 310751
              },
              "updated_date": "2021-10-19T15:03:54.838612",
              "owner": "6TijTE3WSTr2Z16LzB14kN8kECH3buYjmMyBQbg1S7bw"
            }
          ],
          "total": 102
        }
      },
      "SolanaCollectionsModelResponse": {
        "title": "SolanaCollectionsModelResponse",
        "required": ["collection_id", "num_nfts_owned"],
        "type": "object",
        "properties": {
          "collection_id": {
            "title": "Collection Id",
            "type": "string",
            "description": "ID of the collection."
          },
          "on_chain_collection_key": {
            "title": "On Chain Collection Key",
            "type": "string",
            "description": "The on-chain collection key of the NFT collection, i.e. public key of the mint account of the collection NFT. See [Metaplex Certified Collections](https://docs.metaplex.com/programs/token-metadata/certified-collections) for details."
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "ID of the collection."
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "Description of the collection."
          },
          "symbol": {
            "title": "Symbol",
            "type": "string",
            "description": "Symbol of the collection."
          },
          "num_nfts_owned": {
            "title": "Num Nfts Owned",
            "type": "integer",
            "description": "Number of NFTs that account address owns in this contract."
          }
        },
        "example": {
          "collection_id": "okay-bears-3fb117dd",
          "on_chain_collection_key": "3saAedkM9o5g1u5DCqsuMZuC4GRqPB4TuMkvSsSVvGQ3",
          "name": "Okay Bears",
          "description": "Okay Bears is a culture shift. A clean collection of 10,000 diverse bears building a virtuous community that will transcend the internet into the real world.",
          "num_nfts_owned": 3
        }
      },
      "SolanaCreatorNftsResponse": {
        "title": "SolanaCreatorNftsResponse",
        "required": ["response"],
        "type": "object",
        "properties": {
          "response": {
            "title": "Response",
            "enum": ["OK", "NOK"],
            "type": "string",
            "description": "Response status, either OK or NOK."
          },
          "nfts": {
            "title": "Nfts",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SolanaNft"
            },
            "description": "Details of the NFTs."
          },
          "total": {
            "title": "Total",
            "type": "integer",
            "description": "Total number of NFTs created by the address."
          },
          "continuation": {
            "title": "Continuation",
            "type": "string",
            "description": "Continuation ID for the next page."
          }
        },
        "example": {
          "response": "OK",
          "nfts": [
            {
              "mint_address": "GStvBquP3vmBeHV1KsAcnocN4Sf634GWMtLgNiBjDSs4",
              "collection_id": "okay-bears-3fb117dd",
              "on_chain_collection_key": "3saAedkM9o5g1u5DCqsuMZuC4GRqPB4TuMkvSsSVvGQ3",
              "metadata": {
                "description": "Okay Bears is a culture shift. A clean collection of 10,000 diverse bears building a virtuous community that will transcend the internet into the real world.",
                "background_color": "ffffff",
                "external_url": "https://www.okaybears.com/",
                "image": "https://bafybeie6axzmpeqswiugsuim2d7d3mptwgviwnt5o6k5wuyxfkd357sk24.ipfs.nftstorage.link/4973.png?ext=png",
                "name": "Okay Bear #4974"
              },
              "metadata_url": "https://bafybeigtouebpxhlaps7f3mlvo7lwortfc7umg7dp2q6uut3muiwarslee.ipfs.nftstorage.link/4973.json",
              "file_url": "https://bafybeie6axzmpeqswiugsuim2d7d3mptwgviwnt5o6k5wuyxfkd357sk24.ipfs.nftstorage.link/4973.png?ext=png",
              "animation_url": "https://res.cloudinary.com/nifty-gateway/video/upload/v1603975889/Beeple/POLITICAL_BULLSHIT_uqbc8x.mp4",
              "cached_file_url": "https://storage.googleapis.com/sentinel-nft/raw-assets/d4df91472cfdf2bc0853d37db097c805f81fd29a7e140fb582421c83dc52c975.png",
              "cached_animation_url": "https://storage.googleapis.com/sentinel-nft/raw-assets/e129f89af4022209258d1a547f421583f0701b54572c4616e50b59d3294ba8fb.mp4",
              "mint_date": "2022-04-26T18:10:40",
              "file_information": {
                "height": 512,
                "width": 512,
                "file_size": 310751
              },
              "updated_date": "2021-10-19T15:03:54.838612"
            }
          ],
          "total": 23
        }
      },
      "SolanaDetailsNft": {
        "title": "SolanaDetailsNft",
        "required": ["mint_address"],
        "type": "object",
        "properties": {
          "mint_address": {
            "title": "Mint Address",
            "type": "string",
            "description": "The mint address of the NFT."
          },
          "collection_id": {
            "title": "Collection Id",
            "type": "string",
            "description": "The collection ID of the NFT. This is an off-chain ID generated by NFTPort."
          },
          "on_chain_collection_key": {
            "title": "On Chain Collection Key",
            "type": "string",
            "description": "The on-chain collection key of the NFT collection, i.e. public key of the mint account of the collection NFT. See [Metaplex Certified Collections](https://docs.metaplex.com/programs/token-metadata/certified-collections) for details."
          },
          "metadata": {
            "title": "Metadata",
            "type": "object",
            "description": "Raw NFT metadata downloaded from the metadata_url i.e. token URI. It usually includes the name, description and attributes along with any other data added by the creator."
          },
          "metadata_url": {
            "title": "Metadata Url",
            "type": "string",
            "description": "Metadata URL inside the contract for a given token, also known as the token URI."
          },
          "file_url": {
            "title": "File Url",
            "type": "string",
            "description": "Original file (image, video, etc) URL of the NFT."
          },
          "animation_url": {
            "title": "Animation Url",
            "type": "string",
            "description": "URL of multi-media file set in the NFT metadata. Most commonly used file types are GLTF, GLB, WEBM, MP4, M4V, OGV, OGG, along with audio MP3, WAV, and OGA. Also HTML pages, allowing to build rich experiences and interactive NFTs using JavaScript canvas, WebGL, and more."
          },
          "cached_file_url": {
            "title": "Cached File Url",
            "type": "string",
            "description": "Cached file (image, video, etc) in NFTPort's cloud with no access restrictions, low latency and high availability."
          },
          "cached_animation_url": {
            "title": "Cached Animation Url",
            "type": "string",
            "description": "Cached URL of animated file (video, gif, etc) as set in the NFT metadata. This URL points to a file cached in NFTPort's cloud storage with no access restrictions, low latency and high availability."
          },
          "mint_date": {
            "title": "Mint Date",
            "type": "string",
            "description": "Date when the NFT was minted (ISO)."
          },
          "file_information": {
            "title": "File Information",
            "allOf": [
              {
                "$ref": "#/components/schemas/src__service__solana__nfts__entities__NftAssetMetadata"
              }
            ],
            "description": "Extra information of the NFT’s file."
          },
          "updated_date": {
            "title": "Updated Date",
            "type": "string",
            "description": "Date when the NFT’s metadata was last downloaded or updated/refreshed."
          },
          "owner": {
            "title": "Owner",
            "type": "string",
            "description": "The address of the account that owns the NFT."
          }
        },
        "example": {
          "mint_address": "GStvBquP3vmBeHV1KsAcnocN4Sf634GWMtLgNiBjDSs4",
          "collection_id": "okay-bears-3fb117dd",
          "metadata": {
            "description": "Okay Bears is a culture shift. A clean collection of 10,000 diverse bears building a virtuous community that will transcend the internet into the real world.",
            "background_color": "ffffff",
            "external_url": "https://www.okaybears.com/",
            "image": "https://bafybeie6axzmpeqswiugsuim2d7d3mptwgviwnt5o6k5wuyxfkd357sk24.ipfs.nftstorage.link/4973.png?ext=png",
            "name": "Okay Bear #4974"
          },
          "owner": "AzkXekh3xWsfj69zK4Wf9CUkGTzX2YHkfs73DAra8JTX",
          "metadata_url": "https://bafybeigtouebpxhlaps7f3mlvo7lwortfc7umg7dp2q6uut3muiwarslee.ipfs.nftstorage.link/4973.json",
          "file_url": "https://bafybeie6axzmpeqswiugsuim2d7d3mptwgviwnt5o6k5wuyxfkd357sk24.ipfs.nftstorage.link/4973.png?ext=png",
          "animation_url": "https://res.cloudinary.com/nifty-gateway/video/upload/v1603975889/Beeple/POLITICAL_BULLSHIT_uqbc8x.mp4",
          "cached_file_url": "https://storage.googleapis.com/sentinel-nft/raw-assets/d4df91472cfdf2bc0853d37db097c805f81fd29a7e140fb582421c83dc52c975.png",
          "cached_animation_url": "https://storage.googleapis.com/sentinel-nft/raw-assets/e129f89af4022209258d1a547f421583f0701b54572c4616e50b59d3294ba8fb.mp4",
          "mint_date": "2022-04-26T18:10:40",
          "file_information": {
            "height": 512,
            "width": 512,
            "file_size": 310751
          },
          "updated_date": "2021-10-19T15:03:54.838612"
        }
      },
      "SolanaGetCollectionNftsRequestInclude": {
        "title": "SolanaGetCollectionNftsRequestInclude",
        "enum": ["default", "metadata", "all"],
        "type": "string",
        "description": "An enumeration."
      },
      "SolanaGetNftsRequestInclude": {
        "title": "SolanaGetNftsRequestInclude",
        "enum": ["default", "metadata", "file_information", "all"],
        "type": "string",
        "description": "An enumeration."
      },
      "SolanaListings": {
        "title": "SolanaListings",
        "required": ["type", "nft", "price_details"],
        "type": "object",
        "properties": {
          "type": {
            "title": "Type",
            "enum": ["list", "cancel_list"],
            "type": "string",
            "description": "Activity type."
          },
          "lister_address": {
            "title": "Lister Address",
            "type": "string",
            "description": "Account address of the lister."
          },
          "nft": {
            "title": "Nft",
            "allOf": [
              {
                "$ref": "#/components/schemas/SolanaTransactionNft"
              }
            ],
            "description": "Details of the NFT."
          },
          "quantity": {
            "title": "Quantity",
            "type": "integer",
            "description": "Number of NFTs listed."
          },
          "price_details": {
            "title": "Price Details",
            "allOf": [
              {
                "$ref": "#/components/schemas/SolanaPriceDetails"
              }
            ],
            "description": "Price details of the listing."
          },
          "transaction_signature": {
            "title": "Transaction Signature",
            "type": "string",
            "description": "A unique 66-character identifier that is generated when a transaction is executed on the blockchain."
          },
          "slot_number": {
            "title": "Slot Number",
            "type": "string",
            "description": "The hash of the block header in which the transaction is recorded."
          },
          "transaction_date": {
            "title": "Transaction Date",
            "type": "string",
            "description": "Date of the transaction (ISO)."
          },
          "marketplace": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SolanaMarketplace"
              }
            ],
            "description": "Marketplace where the NFT was listed."
          }
        },
        "example": {
          "type": "list",
          "lister_address": "9S4PcAyZMGfHyLTc5AGsFFEahNmrCErGKKaz1i1FYBYL",
          "nft": {
            "mint_address": "GStvBquP3vmBeHV1KsAcnocN4Sf634GWMtLgNiBjDSs4",
            "collection_id": "okay-bears-3fb117dd",
            "on_chain_collection_key": "3saAedkM9o5g1u5DCqsuMZuC4GRqPB4TuMkvSsSVvGQ3"
          },
          "quantity": 1,
          "transaction_signature": "gMFPCs8e7TgMs2JPfQdrw1B6S2GEti2JxF5r3oeVxJeXkPyBz8dLp1s5SozjsEeUMdxjEmrfkygyhZgyYagAarB",
          "slot_number": 13732674,
          "listing_details": {
            "price": "0.071",
            "price_usd": 271.5
          },
          "transaction_date": "2021-12-03T01:28:55.961",
          "marketplace": "magiceden"
        }
      },
      "SolanaMarketplace": {
        "title": "SolanaMarketplace",
        "enum": ["magiceden"],
        "type": "string",
        "description": "An enumeration."
      },
      "SolanaNft": {
        "title": "SolanaNft",
        "required": ["mint_address"],
        "type": "object",
        "properties": {
          "mint_address": {
            "title": "Mint Address",
            "type": "string",
            "description": "The mint address of the NFT."
          },
          "collection_id": {
            "title": "Collection Id",
            "type": "string",
            "description": "The collection ID of the NFT. This is an off-chain ID generated by NFTPort."
          },
          "on_chain_collection_key": {
            "title": "On Chain Collection Key",
            "type": "string",
            "description": "The on-chain collection key of the NFT collection, i.e. public key of the mint account of the collection NFT. See [Metaplex Certified Collections](https://docs.metaplex.com/programs/token-metadata/certified-collections) for details."
          },
          "metadata": {
            "title": "Metadata",
            "type": "object",
            "description": "Raw NFT metadata downloaded from the metadata_url i.e. token URI. It usually includes the name, description and attributes along with any other data added by the creator."
          },
          "metadata_url": {
            "title": "Metadata Url",
            "type": "string",
            "description": "Metadata URL inside the contract for a given token, also known as the token URI."
          },
          "file_url": {
            "title": "File Url",
            "type": "string",
            "description": "Original file (image, video, etc) URL of the NFT."
          },
          "animation_url": {
            "title": "Animation Url",
            "type": "string",
            "description": "URL of multi-media file set in the NFT metadata. Most commonly used file types are GLTF, GLB, WEBM, MP4, M4V, OGV, OGG, along with audio MP3, WAV, and OGA. Also HTML pages, allowing to build rich experiences and interactive NFTs using JavaScript canvas, WebGL, and more."
          },
          "cached_file_url": {
            "title": "Cached File Url",
            "type": "string",
            "description": "Cached file (image, video, etc) in NFTPort's cloud with no access restrictions, low latency and high availability."
          },
          "cached_animation_url": {
            "title": "Cached Animation Url",
            "type": "string",
            "description": "Cached URL of animated file (video, gif, etc) as set in the NFT metadata. This URL points to a file cached in NFTPort's cloud storage with no access restrictions, low latency and high availability."
          },
          "mint_date": {
            "title": "Mint Date",
            "type": "string",
            "description": "Date when the NFT was minted (ISO)."
          },
          "file_information": {
            "title": "File Information",
            "allOf": [
              {
                "$ref": "#/components/schemas/src__service__solana__nfts__entities__NftAssetMetadata"
              }
            ],
            "description": "Extra information of the NFT’s file."
          },
          "updated_date": {
            "title": "Updated Date",
            "type": "string",
            "description": "Date when the NFT’s metadata was last downloaded or updated/refreshed."
          }
        },
        "example": {
          "mint_address": "GStvBquP3vmBeHV1KsAcnocN4Sf634GWMtLgNiBjDSs4",
          "collection_id": "okay-bears-3fb117dd",
          "on_chain_collection_key": "3saAedkM9o5g1u5DCqsuMZuC4GRqPB4TuMkvSsSVvGQ3",
          "metadata": {
            "description": "Okay Bears is a culture shift. A clean collection of 10,000 diverse bears building a virtuous community that will transcend the internet into the real world.",
            "background_color": "ffffff",
            "external_url": "https://www.okaybears.com/",
            "image": "https://bafybeie6axzmpeqswiugsuim2d7d3mptwgviwnt5o6k5wuyxfkd357sk24.ipfs.nftstorage.link/4973.png?ext=png",
            "name": "Okay Bear #4974"
          },
          "metadata_url": "https://bafybeigtouebpxhlaps7f3mlvo7lwortfc7umg7dp2q6uut3muiwarslee.ipfs.nftstorage.link/4973.json",
          "file_url": "https://bafybeie6axzmpeqswiugsuim2d7d3mptwgviwnt5o6k5wuyxfkd357sk24.ipfs.nftstorage.link/4973.png?ext=png",
          "animation_url": "https://res.cloudinary.com/nifty-gateway/video/upload/v1603975889/Beeple/POLITICAL_BULLSHIT_uqbc8x.mp4",
          "cached_file_url": "https://storage.googleapis.com/sentinel-nft/raw-assets/d4df91472cfdf2bc0853d37db097c805f81fd29a7e140fb582421c83dc52c975.png",
          "cached_animation_url": "https://storage.googleapis.com/sentinel-nft/raw-assets/e129f89af4022209258d1a547f421583f0701b54572c4616e50b59d3294ba8fb.mp4",
          "mint_date": "2022-04-26T18:10:40",
          "file_information": {
            "height": 512,
            "width": 512,
            "file_size": 310751
          },
          "updated_date": "2021-10-19T15:03:54.838612"
        }
      },
      "SolanaNftDetailsResponse": {
        "title": "SolanaNftDetailsResponse",
        "required": ["response"],
        "type": "object",
        "properties": {
          "response": {
            "title": "Response",
            "type": "string",
            "description": "Response status, either OK or NOK."
          },
          "nft": {
            "title": "Nft",
            "allOf": [
              {
                "$ref": "#/components/schemas/SolanaDetailsNft"
              }
            ],
            "description": "Details of the NFT."
          },
          "status": {
            "title": "Status",
            "enum": ["ADDED", "PROCESSING", "PENDING", "REFRESHED_RECENTLY"],
            "type": "string",
            "description": "Status of the contract tokens in the metadata refresh queue."
          },
          "status_message": {
            "title": "Status Message",
            "type": "string",
            "description": "Detailed description of the ```status```."
          }
        },
        "example": {
          "response": "OK",
          "nft": {
            "mint_address": "GStvBquP3vmBeHV1KsAcnocN4Sf634GWMtLgNiBjDSs4",
            "collection_id": "okay-bears-3fb117dd",
            "metadata": {
              "description": "Okay Bears is a culture shift. A clean collection of 10,000 diverse bears building a virtuous community that will transcend the internet into the real world.",
              "background_color": "ffffff",
              "external_url": "https://www.okaybears.com/",
              "image": "https://bafybeie6axzmpeqswiugsuim2d7d3mptwgviwnt5o6k5wuyxfkd357sk24.ipfs.nftstorage.link/4973.png?ext=png",
              "name": "Okay Bear #4974"
            },
            "owner": "AzkXekh3xWsfj69zK4Wf9CUkGTzX2YHkfs73DAra8JTX",
            "metadata_url": "https://bafybeigtouebpxhlaps7f3mlvo7lwortfc7umg7dp2q6uut3muiwarslee.ipfs.nftstorage.link/4973.json",
            "file_url": "https://bafybeie6axzmpeqswiugsuim2d7d3mptwgviwnt5o6k5wuyxfkd357sk24.ipfs.nftstorage.link/4973.png?ext=png",
            "animation_url": "https://res.cloudinary.com/nifty-gateway/video/upload/v1603975889/Beeple/POLITICAL_BULLSHIT_uqbc8x.mp4",
            "cached_file_url": "https://storage.googleapis.com/sentinel-nft/raw-assets/d4df91472cfdf2bc0853d37db097c805f81fd29a7e140fb582421c83dc52c975.png",
            "cached_animation_url": "https://storage.googleapis.com/sentinel-nft/raw-assets/e129f89af4022209258d1a547f421583f0701b54572c4616e50b59d3294ba8fb.mp4",
            "mint_date": "2022-04-26T18:10:40",
            "file_information": {
              "height": 512,
              "width": 512,
              "file_size": 310751
            },
            "updated_date": "2021-10-19T15:03:54.838612"
          }
        }
      },
      "SolanaNftsResponse": {
        "title": "SolanaNftsResponse",
        "required": ["response"],
        "type": "object",
        "properties": {
          "response": {
            "title": "Response",
            "type": "string",
            "description": "Response status, either OK or NOK."
          },
          "nfts": {
            "title": "Nfts",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SolanaNft"
            },
            "description": "Details of the NFTs."
          },
          "continuation": {
            "title": "Continuation",
            "type": "string",
            "description": "Continuation ID for next page."
          }
        },
        "example": {
          "response": "OK",
          "nfts": [
            {
              "mint_address": "GStvBquP3vmBeHV1KsAcnocN4Sf634GWMtLgNiBjDSs4",
              "collection_id": "okay-bears-3fb117dd",
              "on_chain_collection_key": "3saAedkM9o5g1u5DCqsuMZuC4GRqPB4TuMkvSsSVvGQ3",
              "metadata": {
                "description": "Okay Bears is a culture shift. A clean collection of 10,000 diverse bears building a virtuous community that will transcend the internet into the real world.",
                "background_color": "ffffff",
                "external_url": "https://www.okaybears.com/",
                "image": "https://bafybeie6axzmpeqswiugsuim2d7d3mptwgviwnt5o6k5wuyxfkd357sk24.ipfs.nftstorage.link/4973.png?ext=png",
                "name": "Okay Bear #4974"
              },
              "metadata_url": "https://bafybeigtouebpxhlaps7f3mlvo7lwortfc7umg7dp2q6uut3muiwarslee.ipfs.nftstorage.link/4973.json",
              "file_url": "https://bafybeie6axzmpeqswiugsuim2d7d3mptwgviwnt5o6k5wuyxfkd357sk24.ipfs.nftstorage.link/4973.png?ext=png",
              "animation_url": "https://res.cloudinary.com/nifty-gateway/video/upload/v1603975889/Beeple/POLITICAL_BULLSHIT_uqbc8x.mp4",
              "cached_file_url": "https://storage.googleapis.com/sentinel-nft/raw-assets/d4df91472cfdf2bc0853d37db097c805f81fd29a7e140fb582421c83dc52c975.png",
              "cached_animation_url": "https://storage.googleapis.com/sentinel-nft/raw-assets/e129f89af4022209258d1a547f421583f0701b54572c4616e50b59d3294ba8fb.mp4",
              "mint_date": "2022-04-26T18:10:40",
              "file_information": {
                "height": 512,
                "width": 512,
                "file_size": 310751
              },
              "updated_date": "2021-10-19T15:03:54.838612"
            }
          ],
          "continuation": "MHg0Zjg5Y2QwY2FlMWU1NGQ5OGRiNmE4MDE1MGE4MjRhNTMzNTAyZWVhXzI0MzU="
        }
      },
      "SolanaPriceDetails": {
        "title": "SolanaPriceDetails",
        "type": "object",
        "properties": {
          "price": {
            "title": "Price",
            "type": "number",
            "description": "Price in SOL"
          },
          "price_usd": {
            "title": "Price Usd",
            "type": "number",
            "description": "Price in USD."
          }
        },
        "example": {
          "price": "0.071",
          "price_usd": 271.5
        }
      },
      "SolanaSales": {
        "title": "SolanaSales",
        "required": ["type", "nft", "price_details", "transaction_date"],
        "type": "object",
        "properties": {
          "type": {
            "title": "Type",
            "enum": ["sale"],
            "type": "string",
            "description": "Activity type."
          },
          "buyer_address": {
            "title": "Buyer Address",
            "type": "string",
            "description": "Account address of the buyer."
          },
          "seller_address": {
            "title": "Seller Address",
            "type": "string",
            "description": "Account address of the seller."
          },
          "nft": {
            "title": "Nft",
            "allOf": [
              {
                "$ref": "#/components/schemas/SolanaTransactionNft"
              }
            ],
            "description": "Details of the NFT."
          },
          "quantity": {
            "title": "Quantity",
            "type": "integer",
            "description": "Number of NFT units."
          },
          "price_details": {
            "title": "Price Details",
            "allOf": [
              {
                "$ref": "#/components/schemas/SolanaPriceDetails"
              }
            ],
            "description": "Price details of the sale."
          },
          "transaction_signature": {
            "title": "Transaction Signature",
            "type": "string",
            "description": "A unique 66-character identifier that is generated when a transaction is executed on the blockchain."
          },
          "slot_number": {
            "title": "Slot Number",
            "type": "string",
            "description": "The hash of the block header in which the transaction is recorded."
          },
          "transaction_date": {
            "title": "Transaction Date",
            "type": "string",
            "description": "Date of the transaction (ISO)."
          },
          "marketplace": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SolanaMarketplace"
              }
            ],
            "description": "Marketplace where the sale took place."
          }
        },
        "example": {
          "type": "sale",
          "buyer_address": "9S4PcAyZMGfHyLTc5AGsFFEahNmrCErGKKaz1i1FYBYL",
          "seller_address": "AFsemt81MUiLLTUUThmJz8mv4H4MGn8t6NzfBUpHkdBA",
          "nft": {
            "mint_address": "GStvBquP3vmBeHV1KsAcnocN4Sf634GWMtLgNiBjDSs4",
            "collection_id": "okay-bears-3fb117dd",
            "on_chain_collection_key": "3saAedkM9o5g1u5DCqsuMZuC4GRqPB4TuMkvSsSVvGQ3"
          },
          "quantity": 1,
          "price_details": {
            "price": "0.071",
            "price_usd": 271.5
          },
          "transaction_signature": "gMFPCs8e7TgMs2JPfQdrw1B6S2GEti2JxF5r3oeVxJeXkPyBz8dLp1s5SozjsEeUMdxjEmrfkygyhZgyYagAarB",
          "slot_number": 13732674,
          "transaction_date": "2021-12-03T10:37:41",
          "marketplace": "magiceden"
        }
      },
      "SolanaTransactionNft": {
        "title": "SolanaTransactionNft",
        "required": ["mint_address"],
        "type": "object",
        "properties": {
          "mint_address": {
            "title": "Mint Address",
            "type": "string",
            "description": "The mint address of the NFT."
          },
          "collection_id": {
            "title": "Collection Id",
            "type": "string",
            "description": "The collection ID of the NFT. This is an off-chain ID generated by NFTPort."
          },
          "on_chain_collection_key": {
            "title": "On Chain Collection Key",
            "type": "string",
            "description": "The on-chain collection key of the NFT collection, i.e. public key of the mint account of the collection NFT. See [Metaplex Certified Collections](https://docs.metaplex.com/programs/token-metadata/certified-collections) for details."
          }
        },
        "example": {
          "mint_address": "GStvBquP3vmBeHV1KsAcnocN4Sf634GWMtLgNiBjDSs4",
          "collection_id": "okay-bears-3fb117dd",
          "on_chain_collection_key": "3saAedkM9o5g1u5DCqsuMZuC4GRqPB4TuMkvSsSVvGQ3"
        }
      },
      "SolanaTransactionsByAccountResponse": {
        "title": "SolanaTransactionsByAccountResponse",
        "required": ["response", "transactions", "total"],
        "type": "object",
        "properties": {
          "response": {
            "title": "Response",
            "enum": ["OK", "NOK"],
            "type": "string",
            "description": "Response status, either OK or NOK."
          },
          "transactions": {
            "title": "Transactions",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/SolanaTransfers"
                },
                {
                  "$ref": "#/components/schemas/SolanaSales"
                },
                {
                  "$ref": "#/components/schemas/SolanaBids"
                },
                {
                  "$ref": "#/components/schemas/SolanaListings"
                }
              ]
            },
            "description": "Transactions data."
          },
          "total": {
            "title": "Total",
            "type": "integer",
            "description": "Total number of transactions."
          },
          "continuation": {
            "title": "Continuation",
            "type": "string",
            "description": "Continuation ID for the next page."
          }
        },
        "example": {
          "response": "OK",
          "transactions": {
            "type": "sale",
            "buyer_address": "9S4PcAyZMGfHyLTc5AGsFFEahNmrCErGKKaz1i1FYBYL",
            "seller_address": "AFsemt81MUiLLTUUThmJz8mv4H4MGn8t6NzfBUpHkdBA",
            "nft": {
              "mint_address": "GStvBquP3vmBeHV1KsAcnocN4Sf634GWMtLgNiBjDSs4",
              "collection_id": "okay-bears-3fb117dd",
              "on_chain_collection_key": "3saAedkM9o5g1u5DCqsuMZuC4GRqPB4TuMkvSsSVvGQ3"
            },
            "quantity": 1,
            "price_details": {
              "price": "0.071",
              "price_usd": 271.5
            },
            "transaction_signature": "gMFPCs8e7TgMs2JPfQdrw1B6S2GEti2JxF5r3oeVxJeXkPyBz8dLp1s5SozjsEeUMdxjEmrfkygyhZgyYagAarB",
            "slot_number": 13732674,
            "transaction_date": "2021-12-03T10:37:41",
            "marketplace": "magiceden"
          },
          "total": 43,
          "continuation": "1638479526000_61a936bd60c2ce3a0c68cd6f"
        }
      },
      "SolanaTransactionsByCollectionResponse": {
        "title": "SolanaTransactionsByCollectionResponse",
        "required": ["response", "transactions"],
        "type": "object",
        "properties": {
          "response": {
            "title": "Response",
            "enum": ["OK", "NOK"],
            "type": "string",
            "description": "Response status, either OK or NOK."
          },
          "transactions": {
            "title": "Transactions",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/SolanaTransfers"
                },
                {
                  "$ref": "#/components/schemas/SolanaSales"
                },
                {
                  "$ref": "#/components/schemas/SolanaBids"
                },
                {
                  "$ref": "#/components/schemas/SolanaListings"
                }
              ]
            },
            "description": "Transactions data."
          },
          "total": {
            "title": "Total",
            "type": "integer",
            "description": "Total number of transactions."
          },
          "continuation": {
            "title": "Continuation",
            "type": "string",
            "description": "Continuation ID for the next page."
          }
        },
        "example": {
          "response": "OK",
          "transactions": {
            "type": "transfer",
            "transfer_from": "9S4PcAyZMGfHyLTc5AGsFFEahNmrCErGKKaz1i1FYBYL",
            "transfer_to": "AFsemt81MUiLLTUUThmJz8mv4H4MGn8t6NzfBUpHkdBA",
            "nft": {
              "mint_address": "GStvBquP3vmBeHV1KsAcnocN4Sf634GWMtLgNiBjDSs4",
              "collection_id": "okay-bears-3fb117dd",
              "on_chain_collection_key": "3saAedkM9o5g1u5DCqsuMZuC4GRqPB4TuMkvSsSVvGQ3"
            },
            "quantity": 1,
            "transaction_signature": "gMFPCs8e7TgMs2JPfQdrw1B6S2GEti2JxF5r3oeVxJeXkPyBz8dLp1s5SozjsEeUMdxjEmrfkygyhZgyYagAarB",
            "slot_number": 13732674,
            "transaction_date": "2021-12-03T09:00:46"
          },
          "total": 1563,
          "continuation": "1638479526000_61a936bd60c2ce3a0c68cd6f"
        }
      },
      "SolanaTransactionsByNftResponse": {
        "title": "SolanaTransactionsByNftResponse",
        "required": ["response", "transactions"],
        "type": "object",
        "properties": {
          "response": {
            "title": "Response",
            "enum": ["OK", "NOK"],
            "type": "string",
            "description": "Response status, either OK or NOK."
          },
          "transactions": {
            "title": "Transactions",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/SolanaTransfers"
                },
                {
                  "$ref": "#/components/schemas/SolanaSales"
                },
                {
                  "$ref": "#/components/schemas/SolanaBids"
                },
                {
                  "$ref": "#/components/schemas/SolanaListings"
                }
              ]
            },
            "description": "Transactions data."
          },
          "total": {
            "title": "Total",
            "type": "integer",
            "description": "Total number of transactions."
          },
          "continuation": {
            "title": "Continuation",
            "type": "string",
            "description": "Continuation ID for the next page."
          }
        },
        "example": {
          "response": "OK",
          "transactions": {
            "type": "transfer",
            "transfer_from": "9S4PcAyZMGfHyLTc5AGsFFEahNmrCErGKKaz1i1FYBYL",
            "transfer_to": "AFsemt81MUiLLTUUThmJz8mv4H4MGn8t6NzfBUpHkdBA",
            "nft": {
              "mint_address": "GStvBquP3vmBeHV1KsAcnocN4Sf634GWMtLgNiBjDSs4",
              "collection_id": "okay-bears-3fb117dd",
              "on_chain_collection_key": "3saAedkM9o5g1u5DCqsuMZuC4GRqPB4TuMkvSsSVvGQ3"
            },
            "quantity": 1,
            "transaction_signature": "gMFPCs8e7TgMs2JPfQdrw1B6S2GEti2JxF5r3oeVxJeXkPyBz8dLp1s5SozjsEeUMdxjEmrfkygyhZgyYagAarB",
            "slot_number": 13732674,
            "transaction_date": "2021-12-03T09:00:46"
          },
          "total": 1563,
          "continuation": "1638479526000_61a936bd60c2ce3a0c68cd6f"
        }
      },
      "SolanaTransactionsResponse": {
        "title": "SolanaTransactionsResponse",
        "required": ["response", "transactions"],
        "type": "object",
        "properties": {
          "response": {
            "title": "Response",
            "enum": ["OK", "NOK"],
            "type": "string",
            "description": "Response status, either OK or NOK."
          },
          "transactions": {
            "title": "Transactions",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/SolanaTransfers"
                },
                {
                  "$ref": "#/components/schemas/SolanaSales"
                },
                {
                  "$ref": "#/components/schemas/SolanaBids"
                },
                {
                  "$ref": "#/components/schemas/SolanaListings"
                }
              ]
            },
            "description": "Transactions data."
          },
          "continuation": {
            "title": "Continuation",
            "type": "string",
            "description": "Continuation ID for the next page."
          }
        },
        "example": {
          "response": "OK",
          "transactions": {
            "type": "transfer",
            "transfer_from": "9S4PcAyZMGfHyLTc5AGsFFEahNmrCErGKKaz1i1FYBYL",
            "transfer_to": "AFsemt81MUiLLTUUThmJz8mv4H4MGn8t6NzfBUpHkdBA",
            "nft": {
              "mint_address": "GStvBquP3vmBeHV1KsAcnocN4Sf634GWMtLgNiBjDSs4",
              "collection_id": "okay-bears-3fb117dd",
              "on_chain_collection_key": "3saAedkM9o5g1u5DCqsuMZuC4GRqPB4TuMkvSsSVvGQ3"
            },
            "quantity": 1,
            "transaction_signature": "gMFPCs8e7TgMs2JPfQdrw1B6S2GEti2JxF5r3oeVxJeXkPyBz8dLp1s5SozjsEeUMdxjEmrfkygyhZgyYagAarB",
            "slot_number": 13732674,
            "transaction_date": "2021-12-03T09:00:46"
          },
          "total": 156,
          "continuation": "MG=="
        }
      },
      "SolanaTransfers": {
        "title": "SolanaTransfers",
        "required": ["type"],
        "type": "object",
        "properties": {
          "type": {
            "title": "Type",
            "enum": ["transfer", "mint", "burn"],
            "type": "string",
            "description": "Activity type."
          },
          "owner_address": {
            "title": "Owner Address",
            "type": "string",
            "description": "NFT owner i.e. account address (for `type`- `mint` and `burn`)."
          },
          "transfer_from": {
            "title": "Transfer From",
            "type": "string",
            "description": "Account address the NFT was transferred from (for `type`- `transfer`)."
          },
          "transfer_to": {
            "title": "Transfer To",
            "type": "string",
            "description": "Account address the NFT was transferred to (for `type`- `transfer`)."
          },
          "nft": {
            "title": "Nft",
            "allOf": [
              {
                "$ref": "#/components/schemas/SolanaTransactionNft"
              }
            ],
            "description": "Details of the NFT."
          },
          "buyer_address": {
            "title": "Buyer Address",
            "type": "string",
            "description": "Account address of the buyer."
          },
          "seller_address": {
            "title": "Seller Address",
            "type": "string",
            "description": "Account address of the seller."
          },
          "quantity": {
            "title": "Quantity",
            "type": "integer",
            "description": "Number of NFTs transferred."
          },
          "transaction_signature": {
            "title": "Transaction Signature",
            "type": "string",
            "description": "A unique 66-character identifier that is generated when a transaction is executed on the blockchain."
          },
          "slot_number": {
            "title": "Slot Number",
            "type": "string",
            "description": "The hash of the block header in which the transaction is recorded."
          },
          "transaction_date": {
            "title": "Transaction Date",
            "type": "string",
            "description": "Date of the transaction (ISO)."
          }
        },
        "example": {
          "type": "transfer",
          "transfer_from": "9S4PcAyZMGfHyLTc5AGsFFEahNmrCErGKKaz1i1FYBYL",
          "transfer_to": "AFsemt81MUiLLTUUThmJz8mv4H4MGn8t6NzfBUpHkdBA",
          "nft": {
            "mint_address": "GStvBquP3vmBeHV1KsAcnocN4Sf634GWMtLgNiBjDSs4",
            "collection_id": "okay-bears-3fb117dd",
            "on_chain_collection_key": "3saAedkM9o5g1u5DCqsuMZuC4GRqPB4TuMkvSsSVvGQ3"
          },
          "quantity": 1,
          "transaction_signature": "gMFPCs8e7TgMs2JPfQdrw1B6S2GEti2JxF5r3oeVxJeXkPyBz8dLp1s5SozjsEeUMdxjEmrfkygyhZgyYagAarB",
          "slot_number": 13732674,
          "transaction_date": "2021-12-03T09:00:46"
        }
      },
      "StorageRequestType": {
        "title": "StorageRequestType",
        "enum": ["file", "metadata", "metadata_directory", "all"],
        "type": "string",
        "description": "An enumeration."
      },
      "TextSearchNft": {
        "title": "TextSearchNft",
        "required": [
          "chain",
          "contract_address",
          "token_id",
          "cached_file_url",
          "name",
          "description"
        ],
        "type": "object",
        "properties": {
          "chain": {
            "title": "Chain",
            "enum": ["polygon", "ethereum"],
            "type": "string",
            "description": "Blockchain where the NFT has been minted."
          },
          "contract_address": {
            "title": "Contract Address",
            "type": "string",
            "description": "The contract address of the NFT."
          },
          "token_id": {
            "title": "Token Id",
            "type": "string",
            "description": "A unique ```uint256``` ID inside the contract. The contract address and token ID pair is a globally unique and fully-qualified identifier for a specific NFT on chain."
          },
          "cached_file_url": {
            "title": "Cached File Url",
            "type": "string",
            "description": "Cached file (image, video, etc) in NFTPort's cloud with no access restrictions and without IPFS issues."
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Name of the NFT in the metadata."
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "Description of the NFT in the metadata."
          },
          "mint_date": {
            "title": "Mint Date",
            "type": "string",
            "description": "Date when the NFT was minted (ISO)."
          }
        },
        "example": {
          "chain": "ethereum",
          "contract_address": "0x12f28e2106ce8fd8464885b80ea865e98b465149",
          "token_id": "100030071",
          "cached_file_url": "https://storage.googleapis.com/sentinel-nft/raw-assets/c_0x12f28e2106ce8fd8464885b80ea865e98b465149_t_100030071_raw_asset.png",
          "name": "Name field value in NFT metadata",
          "description": "Description field value in NFT metadata",
          "mint_date": "2020-10-29T15:03:54.838612"
        }
      },
      "TextSearchRequestOrder": {
        "title": "TextSearchRequestOrder",
        "enum": ["relevance", "mint_date"],
        "type": "string",
        "description": "An enumeration."
      },
      "TextSearchRequestSortOrder": {
        "title": "TextSearchRequestSortOrder",
        "enum": ["desc", "asc"],
        "type": "string",
        "description": "An enumeration."
      },
      "TextSearchResponse": {
        "title": "TextSearchResponse",
        "required": ["response"],
        "type": "object",
        "properties": {
          "response": {
            "title": "Response",
            "enum": ["OK", "NOK"],
            "type": "string",
            "description": "Response status, either OK or NOK."
          },
          "search_results": {
            "title": "Search Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextSearchNft"
            }
          }
        },
        "example": {
          "response": "OK",
          "search_results": [
            {
              "chain": "ethereum",
              "contract_address": "0x12f28e2106ce8fd8464885b80ea865e98b465149",
              "token_id": "100030071",
              "cached_file_url": "https://storage.googleapis.com/sentinel-nft/raw-assets/c_0x12f28e2106ce8fd8464885b80ea865e98b465149_t_100030071_raw_asset.png",
              "name": "Name field value in NFT metadata",
              "description": "Description field value in NFT metadata",
              "mint_date": "2020-10-29T15:03:54.838612"
            }
          ]
        }
      },
      "TransactionsByAccountResponse": {
        "title": "TransactionsByAccountResponse",
        "required": ["response"],
        "type": "object",
        "properties": {
          "response": {
            "title": "Response",
            "type": "string",
            "description": "Response status, either OK or NOK."
          },
          "transactions": {
            "title": "Transactions",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Transfers"
                },
                {
                  "$ref": "#/components/schemas/Sales"
                },
                {
                  "$ref": "#/components/schemas/Bids"
                },
                {
                  "$ref": "#/components/schemas/Listings"
                }
              ]
            },
            "description": "Transactions data."
          },
          "continuation": {
            "title": "Continuation",
            "type": "string",
            "description": "Continuation string."
          }
        },
        "example": {
          "response": "OK",
          "transactions": {
            "type": "sale",
            "buyer_address": "0xc2d131a52a7bc75f6558588d010d649e02710115",
            "seller_address": "0xc2d131a52a7bc75f6558588d010d649e02710115",
            "nft": {
              "contract_type": "ERC1155_lazy",
              "contract_address": "0xb66a603f4cfe17e3d27b87a8bfcad319856518b8",
              "token_id": "15358604318467100856391476616408347066873708425523410565866333184395837440001",
              "metadata_url": "ipfs://QmUNeWBXz4pJkBzMAaPTXS4dUXkHyVNsrfVTbN4bEsJnW1",
              "creators": [
                {
                  "account_address": "0x21f4a9780a52c7a8ca5e30bac89a6b0e2722bf65",
                  "creator_share": "10000"
                }
              ],
              "royalties": [
                {
                  "account_address": "0x21f4a9780a52c7a8ca5e30bac89a6b0e2722bf65",
                  "royalty_share": "1000"
                }
              ],
              "signatures": [
                "0xde8ee69a90450466de44e0025aec715d621afbcc1ad11361cc9d63666a7e3f3e33eb72d48f2753f6e5d414967ba5ae06d00e39d1f53e99d419038011c2f159f51b"
              ],
              "total": 5000
            },
            "quantity": 1,
            "price_details": {
              "asset_type": "ERC20",
              "contract_address": "0xaa75b8c9e01ac2e9fc041a39d36a6536540b2072",
              "price": "0.071",
              "price_usd": 271.5
            },
            "transaction_hash": "0x1c3b3e05961e5010e1b13d60a550ee9e14f9f3ef99a4d81e266b2b2067d6df87",
            "block_hash": "0x8ad765098c04fa1b566b35848e951e99257a161a50a8732f06aef393f4e18dae",
            "block_number": 13733126,
            "transaction_date": "2021-12-03T10:37:41",
            "marketplace": "opensea"
          },
          "continuation": "1638479526000_61a936bd60c2ce3a0c68cd6f"
        }
      },
      "TransactionsByContractResponse": {
        "title": "TransactionsByContractResponse",
        "required": ["response"],
        "type": "object",
        "properties": {
          "response": {
            "title": "Response",
            "type": "string",
            "description": "Response status, either OK or NOK."
          },
          "transactions": {
            "title": "Transactions",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Transfers"
                },
                {
                  "$ref": "#/components/schemas/Sales"
                },
                {
                  "$ref": "#/components/schemas/Bids"
                },
                {
                  "$ref": "#/components/schemas/Listings"
                }
              ]
            },
            "description": "Transactions data."
          },
          "continuation": {
            "title": "Continuation",
            "type": "string",
            "description": "Continuation string."
          }
        },
        "example": {
          "response": "OK",
          "transactions": {
            "type": "transfer",
            "transfer_from": "0xaf8acfa2d093a3569f9b1a2fd3c596d3b5d8f69d",
            "transfer_to": "0xa42f6807522e4c786835e253c0735f130e58aa9d",
            "contract_address": "0xb66a603f4cfe17e3d27b87a8bfcad319856518b8",
            "token_id": "79400006447981872162108805936960249632419041130515543620398493819452073705492",
            "quantity": 1,
            "transaction_hash": "0x117cce93c9f67a19273f53caf6cba46485f9be03c04d0131b1df0f15ce005c90",
            "block_hash": "0x80907f3c8bcaa5bc313b2c4114750aa38d255e740427404cefb99c231ebf9fe5",
            "block_number": 13732674,
            "transaction_date": "2021-12-03T09:00:46"
          },
          "continuation": "1638479526000_61a936bd60c2ce3a0c68cd6f"
        }
      },
      "TransactionsByTokenResponse": {
        "title": "TransactionsByTokenResponse",
        "required": ["response"],
        "type": "object",
        "properties": {
          "response": {
            "title": "Response",
            "type": "string",
            "description": "Response status, either OK or NOK."
          },
          "transactions": {
            "title": "Transactions",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Transfers"
                },
                {
                  "$ref": "#/components/schemas/Sales"
                },
                {
                  "$ref": "#/components/schemas/Bids"
                },
                {
                  "$ref": "#/components/schemas/Listings"
                }
              ]
            },
            "description": "Transactions data."
          },
          "continuation": {
            "title": "Continuation",
            "type": "string",
            "description": "Continuation string."
          }
        },
        "example": {
          "response": "OK",
          "transactions": {
            "type": "list",
            "lister_address": "0xb4cdc8dfd9ce9bf647f38cd8278036c0aacdc91e",
            "nft": {
              "contract_type": "ERC1155_lazy",
              "contract_address": "0xb66a603f4cfe17e3d27b87a8bfcad319856518b8",
              "token_id": "15358604318467100856391476616408347066873708425523410565866333184395837440001",
              "metadata_url": "ipfs://QmUNeWBXz4pJkBzMAaPTXS4dUXkHyVNsrfVTbN4bEsJnW1",
              "creators": [
                {
                  "account_address": "0x21f4a9780a52c7a8ca5e30bac89a6b0e2722bf65",
                  "creator_share": "10000"
                }
              ],
              "royalties": [
                {
                  "account_address": "0x21f4a9780a52c7a8ca5e30bac89a6b0e2722bf65",
                  "royalty_share": "1000"
                }
              ],
              "signatures": [
                "0xde8ee69a90450466de44e0025aec715d621afbcc1ad11361cc9d63666a7e3f3e33eb72d48f2753f6e5d414967ba5ae06d00e39d1f53e99d419038011c2f159f51b"
              ],
              "total": 5000
            },
            "quantity": 1,
            "listing_details": {
              "asset_type": "ERC20",
              "contract_address": "0xaa75b8c9e01ac2e9fc041a39d36a6536540b2072",
              "price": "0.071",
              "price_usd": 271.5
            },
            "transaction_date": "2021-12-03T01:28:55.961",
            "marketplace": "opensea"
          },
          "continuation": "1638479526000_61a936bd60c2ce3a0c68cd6f"
        }
      },
      "TransactionsResponse": {
        "title": "TransactionsResponse",
        "required": ["response", "transactions"],
        "type": "object",
        "properties": {
          "response": {
            "title": "Response",
            "type": "string",
            "description": "Response status, either OK or NOK."
          },
          "transactions": {
            "title": "Transactions",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Transfers"
                },
                {
                  "$ref": "#/components/schemas/Sales"
                }
              ]
            },
            "description": "Transactions data."
          },
          "continuation": {
            "title": "Continuation",
            "type": "string",
            "description": "Continuation string."
          }
        },
        "example": {
          "response": "OK",
          "transactions": {
            "type": "transfer",
            "transfer_from": "0xaf8acfa2d093a3569f9b1a2fd3c596d3b5d8f69d",
            "transfer_to": "0xa42f6807522e4c786835e253c0735f130e58aa9d",
            "contract_address": "0xb66a603f4cfe17e3d27b87a8bfcad319856518b8",
            "token_id": "79400006447981872162108805936960249632419041130515543620398493819452073705492",
            "quantity": 1,
            "transaction_hash": "0x117cce93c9f67a19273f53caf6cba46485f9be03c04d0131b1df0f15ce005c90",
            "block_hash": "0x80907f3c8bcaa5bc313b2c4114750aa38d255e740427404cefb99c231ebf9fe5",
            "block_number": 13732674,
            "transaction_date": "2021-12-03T09:00:46"
          },
          "continuation": "1638479526000_61a936bd60c2ce3a0c68cd6f"
        }
      },
      "TransferBatchNftRequest": {
        "title": "TransferBatchNftRequest",
        "required": ["chain", "contract_address", "tokens"],
        "type": "object",
        "properties": {
          "chain": {
            "title": "Chain",
            "enum": ["polygon", "goerli", "ethereum"],
            "type": "string",
            "description": "Blockchain where the NFT is minted."
          },
          "contract_address": {
            "title": "Contract Address",
            "type": "string",
            "description": "Contract where the token is minted. It must be your own contract. If you don’t have one, see Deploy an NFT contract."
          },
          "tokens": {
            "title": "Tokens",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransferBatchTokenItem"
            },
            "description": "List of tokens to be transferred. Each record contains transfer_to_address (wallet adress to which the token will be transferred), token ID and quantity."
          }
        },
        "example": {
          "chain": "polygon",
          "contract_address": "0xC8D297D7b496f86673551c933815B47973FC4a0e",
          "tokens": [
            {
              "transfer_to_address": "0x5FDd0881Ef284D6fBB2Ed97b01cb13d707f91e42",
              "token_id": "1",
              "quantity": "1"
            }
          ]
        }
      },
      "TransferBatchTokenItem": {
        "title": "TransferBatchTokenItem",
        "required": ["transfer_to_address", "token_id", "quantity"],
        "type": "object",
        "properties": {
          "transfer_to_address": {
            "title": "Transfer To Address",
            "type": "string"
          },
          "token_id": {
            "title": "Token Id",
            "type": "string"
          },
          "quantity": {
            "title": "Quantity",
            "type": "integer"
          }
        }
      },
      "TransferNftRequest": {
        "title": "TransferNftRequest",
        "required": [
          "chain",
          "contract_address",
          "token_id",
          "transfer_to_address"
        ],
        "type": "object",
        "properties": {
          "chain": {
            "title": "Chain",
            "enum": ["polygon", "goerli", "ethereum"],
            "type": "string",
            "description": "Blockchain where the NFT is minted."
          },
          "contract_address": {
            "title": "Contract Address",
            "type": "string",
            "description": "Contract where the token is minted. It must be your own contract. If you don’t have one, see Deploy an NFT contract."
          },
          "token_id": {
            "title": "Token Id",
            "type": "string",
            "description": "Token ID of the NFT to be transferred."
          },
          "transfer_to_address": {
            "title": "Transfer To Address",
            "type": "string",
            "description": " Wallet address to which the NFT will be transferred."
          }
        },
        "example": {
          "chain": "polygon",
          "contract_address": "0xC8D297D7b496f86673551c933815B47973FC4a0e",
          "token_id": "1",
          "transfer_to_address": "0x5FDd0881Ef284D6fBB2Ed97b01cb13d707f91e42"
        }
      },
      "TransferNftResponse": {
        "title": "TransferNftResponse",
        "required": [
          "response",
          "chain",
          "contract_address",
          "transaction_hash",
          "transaction_external_url"
        ],
        "type": "object",
        "properties": {
          "response": {
            "title": "Response",
            "type": "string",
            "description": "Response status, either OK or NOK."
          },
          "chain": {
            "title": "Chain",
            "enum": ["polygon", "ethereum", "goerli"],
            "type": "string",
            "description": "Blockchain the NFT was transferred on."
          },
          "contract_address": {
            "title": "Contract Address",
            "type": "string",
            "description": "The contract address of the transferred NFT."
          },
          "transaction_hash": {
            "title": "Transaction Hash",
            "type": "string",
            "description": "The transaction hash which is returned by the blockchain after transferring."
          },
          "transaction_external_url": {
            "title": "Transaction External Url",
            "type": "string",
            "description": "Transaction URL in an external blockchain explorer."
          }
        },
        "example": {
          "response": "OK",
          "chain": "polygon",
          "contract_address": "0xC8D297D7b496f86673551c933815B47973FC4a0e",
          "transaction_hash": "0xcbbe6072d7aa48b9774ed8b15e7f298489c5e965b32aa468ca520b30aba649a1",
          "transaction_external_url": "https://polygonscan.com/tx/0xcbbe6072d7aa48b9774ed8b15e7f298489c5e965b32aa468ca520b30aba649a1"
        }
      },
      "Transfers": {
        "title": "Transfers",
        "required": [
          "type",
          "contract_address",
          "token_id",
          "quantity",
          "transaction_hash",
          "block_hash",
          "block_number",
          "transaction_date"
        ],
        "type": "object",
        "properties": {
          "type": {
            "title": "Type",
            "enum": ["transfer", "mint", "burn"],
            "type": "string",
            "description": "Activity type."
          },
          "owner_address": {
            "title": "Owner Address",
            "type": "string",
            "description": "NFT owner i.e. account address (for `type`- `mint` and `burn`)."
          },
          "transfer_from": {
            "title": "Transfer From",
            "type": "string",
            "description": "Account address the NFT was transferred from (for `type`- `transfer`)."
          },
          "transfer_to": {
            "title": "Transfer To",
            "type": "string",
            "description": "Account address the NFT was transferred to (for `type`- `transfer`)."
          },
          "contract_address": {
            "title": "Contract Address",
            "type": "string",
            "description": "Contract address of the NFT."
          },
          "token_id": {
            "title": "Token Id",
            "type": "string",
            "description": "A unique `uint256` ID inside the contract. The contract address and token ID pair is a globally unique and fully-qualified identifier for a specific NFT on chain."
          },
          "quantity": {
            "title": "Quantity",
            "type": "integer",
            "description": "Number of NFTs transferred (can be more than 1 NFT for ERC1155)."
          },
          "transaction_hash": {
            "title": "Transaction Hash",
            "type": "string",
            "description": "A unique 66-character identifier that is generated when a transaction is executed on the blockchain."
          },
          "block_hash": {
            "title": "Block Hash",
            "type": "string",
            "description": "The hash of the block header in which the transaction is recorded."
          },
          "block_number": {
            "title": "Block Number",
            "type": "integer",
            "description": "Number of the block in which the transaction is recorded."
          },
          "transaction_date": {
            "title": "Transaction Date",
            "type": "string",
            "description": "Date of the transaction (ISO)."
          }
        },
        "example": {
          "type": "transfer",
          "transfer_from": "0xaf8acfa2d093a3569f9b1a2fd3c596d3b5d8f69d",
          "transfer_to": "0xa42f6807522e4c786835e253c0735f130e58aa9d",
          "contract_address": "0xb66a603f4cfe17e3d27b87a8bfcad319856518b8",
          "token_id": "79400006447981872162108805936960249632419041130515543620398493819452073705492",
          "quantity": 1,
          "transaction_hash": "0x117cce93c9f67a19273f53caf6cba46485f9be03c04d0131b1df0f15ce005c90",
          "block_hash": "0x80907f3c8bcaa5bc313b2c4114750aa38d255e740427404cefb99c231ebf9fe5",
          "block_number": 13732674,
          "transaction_date": "2021-12-03T09:00:46"
        }
      },
      "UpdateContractCollectionsRequest": {
        "title": "UpdateContractCollectionsRequest",
        "required": ["chain", "contract_address"],
        "type": "object",
        "properties": {
          "chain": {
            "title": "Chain",
            "enum": ["polygon", "goerli", "ethereum"],
            "type": "string",
            "description": "Blockchain where the contract was deployed to."
          },
          "contract_address": {
            "title": "Contract Address",
            "type": "string",
            "description": "Address of the NFT contract."
          },
          "base_uri": {
            "title": "Base Uri",
            "type": "string",
            "description": "Metadata base URI for tokens. If you specify this, then the metadata location of NFTs minted in this contract will be of the format ```base_uri``` + ```token_id```. This is useful for creating dynamic NFTs or revealing the NFTs after the drop. "
          },
          "public_mint_start_date": {
            "title": "Public Mint Start Date",
            "type": "string",
            "description": "Public minting start time (ISO). Eg: 2022-02-08T11:30:48+00:00."
          },
          "freeze_metadata": {
            "title": "Freeze Metadata",
            "type": "boolean",
            "description": "If ```true```, freezes all token URIs inside the specified contract."
          },
          "prereveal_token_uri": {
            "title": "Prereveal Token Uri",
            "type": "string",
            "description": "Pre-reveal token URI for placeholder metadata. This will be returned for all token IDs until a `baseURI` has been set."
          },
          "presale_mint_start_date": {
            "title": "Presale Mint Start Date",
            "type": "string",
            "description": "Whitelisted/presale minting start time (ISO). Eg: 2022-02-08T11:30:48+00:00."
          },
          "presale_whitelisted_addresses": {
            "title": "Presale Whitelisted Addresses",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of addresses whitelisted for the presale. Maximum amount of addresses supported is 4000."
          },
          "royalties_share": {
            "title": "Royalties Share",
            "maximum": 10000.0,
            "minimum": 0.0,
            "type": "integer",
            "description": "Secondary market royalty rate in basis points (100 bps = 1%). This value cannot exceed 10,000 bps."
          },
          "royalties_address": {
            "title": "Royalties Address",
            "type": "string",
            "description": "Address that will have access to the balance of royalties paid."
          },
          "mint_price": {
            "title": "Mint Price",
            "minimum": 0.0,
            "type": "number",
            "description": "Minting price per NFT, in units of the chain's native token."
          },
          "freeze_mint_price": {
            "title": "Freeze Mint Price",
            "type": "boolean",
            "description": "If ```true```, then ```mint_price``` cannot be updated anymore. **Once frozen (```true```), cannot be changed any more.**"
          },
          "presale_mint_price": {
            "title": "Presale Mint Price",
            "type": "number",
            "description": "Minting price per NFT in the presale phase, in units of the chain's native token."
          },
          "freeze_presale_mint_price": {
            "title": "Freeze Presale Mint Price",
            "type": "boolean",
            "description": "If ```true```, then ```presale_mint_price``` cannot be updated anymore. **Once frozen (```true```), cannot be changed any more.**"
          }
        },
        "example": {
          "chain": "polygon",
          "contract_address": "0xC8D297D7b496f86673551c933815B47973FC4a0e",
          "public_mint_start_date": "2022-02-08T11:30:48+00:00",
          "freeze_metadata": false,
          "base_uri": "ipfs://",
          "presale_mint_start_date": "2022-02-08T11:30:48+00:00",
          "presale_whitelisted_addresses": [
            "0x5FDd0881Ef284D6fBB2Ed97b01cb13d707f91e42"
          ]
        }
      },
      "UpdateContractCollectionsResponse": {
        "title": "UpdateContractCollectionsResponse",
        "required": [
          "response",
          "chain",
          "transaction_hash",
          "transaction_external_url"
        ],
        "type": "object",
        "properties": {
          "response": {
            "title": "Response",
            "type": "string",
            "description": "Response status, either OK or NOK."
          },
          "chain": {
            "title": "Chain",
            "enum": ["ethereum", "polygon", "goerli"],
            "type": "string",
            "description": "Blockchain where the contract has been created."
          },
          "transaction_hash": {
            "title": "Transaction Hash",
            "type": "string",
            "description": "Transaction hash which is a unique string of characters that is given to every transaction that is added to the blockchain."
          },
          "transaction_external_url": {
            "title": "Transaction External Url",
            "type": "string",
            "description": "Transaction URL in an external blockchain explorer."
          }
        },
        "example": {
          "response": "OK",
          "chain": "polygon",
          "transaction_hash": "0x773ea27408d521898aaf20067e6b8e252b6aa5f0067878da6e2f22fe6fe3eee8",
          "transaction_external_url": "https://polygonscan.com/tx/0xb1ffb9907e4b72cd89b81e00c4c233d1cc7c661f96f65979048eb6332deb467e"
        }
      },
      "UpdateContractRequest": {
        "title": "UpdateContractRequest",
        "required": ["chain", "contract_address"],
        "type": "object",
        "properties": {
          "chain": {
            "title": "Chain",
            "enum": ["polygon", "goerli", "ethereum"],
            "type": "string",
            "description": "Blockchain where the contract was deployed to."
          },
          "contract_address": {
            "title": "Contract Address",
            "type": "string",
            "description": "Address of the NFT contract."
          },
          "freeze_metadata": {
            "title": "Freeze Metadata",
            "type": "boolean",
            "description": "If ```true```, freezes all token URIs inside the specified contract."
          },
          "base_uri": {
            "title": "Base Uri",
            "type": "string",
            "description": "Metadata base URI for tokens. Can only be changed if you deployed your contract with ```metadata_updatable``` as ```true``` and metadata hasn’t been frozen. If tokens are frozen separately in [Update a minted NFT](../3.json/paths/~1v0~1mints~1customizable/put) the ```base_uri``` can still be updated."
          },
          "royalties_share": {
            "title": "Royalties Share",
            "maximum": 10000.0,
            "minimum": 0.0,
            "type": "integer",
            "description": "Secondary market royalty rate in basis points (100 bps = 1%). This value cannot exceed 10,000 bps."
          },
          "royalties_address": {
            "title": "Royalties Address",
            "type": "string",
            "description": "Address for royalties."
          },
          "roles": {
            "title": "Roles",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RolesItem"
            },
            "description": "List of granular permissions for different wallet addresses set on the contract level. ```owner_address``` has all of the permissions. Only the specified roles are updated and to remove all the roles from a wallet address, the addresses list for that role must be an empty."
          },
          "exit_nftport": {
            "title": "Exit Nftport",
            "type": "boolean",
            "description": "Revoke NFTPort permissions from this contract. Default is ```false```"
          }
        },
        "example": {
          "chain": "polygon",
          "contract_address": "0xC8D297D7b496f86673551c933815B47973FC4a0e",
          "freeze_metadata": true,
          "owner_address": "0x5FDd0881Ef284D6fBB2Ed97b01cb13d707f91e42",
          "roles": [
            {
              "role": "mint",
              "addresses": ["0xMockAddress1", "0xMockAddress2"],
              "freeze": false
            }
          ]
        }
      },
      "UpdateContractResponse": {
        "title": "UpdateContractResponse",
        "required": [
          "response",
          "chain",
          "transaction_hash",
          "transaction_external_url"
        ],
        "type": "object",
        "properties": {
          "response": {
            "title": "Response",
            "type": "string",
            "description": "Response status, either OK or NOK."
          },
          "chain": {
            "title": "Chain",
            "enum": ["polygon", "ethereum", "goerli"],
            "type": "string",
            "description": "Blockchain where the contract has been created."
          },
          "transaction_hash": {
            "title": "Transaction Hash",
            "type": "string",
            "description": "Transaction hash which is a unique string of characters that is given to every transaction that is added to the blockchain."
          },
          "transaction_external_url": {
            "title": "Transaction External Url",
            "type": "string",
            "description": "Transaction URL in an external blockchain explorer."
          },
          "freeze_metadata": {
            "title": "Freeze Metadata",
            "type": "boolean",
            "description": "If ```true```, all token URIs inside the contract are frozen."
          }
        },
        "example": {
          "response": "OK",
          "chain": "polygon",
          "transaction_hash": "0x773ea27408d521898aaf20067e6b8e252b6aa5f0067878da6e2f22fe6fe3eee8",
          "transaction_external_url": "https://polygonscan.com/tx/0xb1ffb9907e4b72cd89b81e00c4c233d1cc7c661f96f65979048eb6332deb467e",
          "freeze_metadata": true
        }
      },
      "UpdateNftRequest": {
        "title": "UpdateNftRequest",
        "required": ["chain", "contract_address", "token_id"],
        "type": "object",
        "properties": {
          "chain": {
            "title": "Chain",
            "enum": ["polygon", "goerli", "ethereum"],
            "type": "string",
            "description": "Blockchain where the NFT is minted."
          },
          "contract_address": {
            "title": "Contract Address",
            "type": "string",
            "description": "Contract where token is minted. It must be your own contract. If you don’t have one, see [Deploy a contract for NFT products](../3.json/paths/~1v0~1contracts/post)."
          },
          "token_id": {
            "title": "Token Id",
            "type": "string",
            "description": "Token ID of the NFT that will be updated."
          },
          "metadata_uri": {
            "title": "Metadata Uri",
            "type": "string",
            "description": "Token URI for update."
          },
          "freeze_metadata": {
            "title": "Freeze Metadata",
            "type": "boolean",
            "description": "If ```true```, freezes the specified NFT token URI and further token metadata updates are blocked. You can still change the ```base_uri``` on contract level with [Update a deployed contract for NFT products](https://docs.nftport.xyz/docs/nftport/b3A6MjU2NTIyMTM-update-a-deployed-contract). If you wish to freeze all updates, then set ```freeze_metadata``` as ```true``` in Update a deployed product contract."
          }
        },
        "example": {
          "chain": "polygon",
          "contract_address": "0xC8D297D7b496f86673551c933815B47973FC4a0e",
          "token_id": "1",
          "metadata_uri": "ipfs://bafkreiedsysj5xeyulisdjrjh37tz2y47dlwzwiwfagmqng3melxtigaie"
        }
      },
      "UpdateNftResponse": {
        "title": "UpdateNftResponse",
        "required": [
          "response",
          "chain",
          "contract_address",
          "transaction_hash",
          "transaction_external_url"
        ],
        "type": "object",
        "properties": {
          "response": {
            "title": "Response",
            "type": "string",
            "description": "Response status, either OK or NOK."
          },
          "chain": {
            "title": "Chain",
            "enum": ["polygon", "ethereum", "goerli"],
            "type": "string",
            "description": "Blockchain the NFT was updated on."
          },
          "contract_address": {
            "title": "Contract Address",
            "type": "string",
            "description": "The contract address where the NFT was updated."
          },
          "transaction_hash": {
            "title": "Transaction Hash",
            "type": "string",
            "description": "The transaction hash which is returned by the blockchain after minting."
          },
          "transaction_external_url": {
            "title": "Transaction External Url",
            "type": "string",
            "description": "Transaction URL in an external blockchain explorer."
          }
        },
        "example": {
          "response": "OK",
          "chain": "polygon",
          "contract_address": "0xC8D297D7b496f86673551c933815B47973FC4a0e",
          "transaction_hash": "0xcbbe6072d7aa48b9774ed8b15e7f298489c5e965b32aa468ca520b30aba649a1",
          "transaction_external_url": "https://polygonscan.com/tx/0xcbbe6072d7aa48b9774ed8b15e7f298489c5e965b32aa468ca520b30aba649a1"
        }
      },
      "UserContractLimitsResponseModel": {
        "title": "UserContractLimitsResponseModel",
        "type": "object",
        "properties": {
          "subscription_contracts_included": {
            "title": "Subscription Contracts Included",
            "type": "integer",
            "description": "Contract deployments included in your subscription."
          },
          "max_contracts": {
            "title": "Max Contracts",
            "type": "integer",
            "description": "Contract deployment limit."
          }
        }
      },
      "UserContractUsageResponseModel": {
        "title": "UserContractUsageResponseModel",
        "required": ["total_contracts_deployed"],
        "type": "object",
        "properties": {
          "total_contracts_deployed": {
            "title": "Total Contracts Deployed",
            "type": "integer",
            "description": "Total number of contracts deployed."
          },
          "subscription_contracts_deployed": {
            "title": "Subscription Contracts Deployed",
            "type": "integer",
            "description": "Number of contracts deployed during your current subscription cycle."
          }
        }
      },
      "UserFileModel": {
        "title": "UserFileModel",
        "required": ["type", "ipfs_uri", "ipfs_url", "uploaded_date"],
        "type": "object",
        "properties": {
          "type": {
            "title": "Type",
            "enum": ["file"],
            "type": "string",
            "description": "Type of storage."
          },
          "file_name": {
            "title": "File Name",
            "type": "string",
            "description": "Name of the uploaded file."
          },
          "ipfs_uri": {
            "title": "Ipfs Uri",
            "type": "string",
            "description": "IPFS URI of the uploaded file."
          },
          "ipfs_url": {
            "title": "Ipfs Url",
            "type": "string",
            "description": "IPFS URL of the uploaded file."
          },
          "uploaded_date": {
            "title": "Uploaded Date",
            "type": "string",
            "description": "Date when the file was uploaded to IPFS (ISO)."
          },
          "content_type": {
            "title": "Content Type",
            "type": "string",
            "description": "Content type (MIME type / media type) of the uploaded file (e.g. image/jpeg)."
          },
          "file_size": {
            "title": "File Size",
            "type": "integer",
            "description": "Size of the uploaded file in bytes."
          },
          "file_size_mb": {
            "title": "File Size Mb",
            "type": "number",
            "description": "Size of the uploaded file in MB."
          }
        },
        "example": {
          "storage_type": "file",
          "file_name": "my_cool_art.jpeg",
          "ipfs_uri": "ipfs://QmRModSr9gQTSZrbfbLis6mw21HycZyqMA3j8YMRD11nAQ",
          "ipfs_url": "https://ipfs.io/ipfs/QmRModSr9gQTSZrbfbLis6mw21HycZyqMA3j8YMRD11nAQ",
          "uploaded_date": "2021-08-23T17:25:03.501703",
          "content_type": "image/jpeg",
          "file_size": 85138,
          "file_size_mb": 0.0812
        }
      },
      "UserMetadataDirectoryModel": {
        "title": "UserMetadataDirectoryModel",
        "required": ["type", "ipfs_uri", "ipfs_url", "uploaded_date"],
        "type": "object",
        "properties": {
          "type": {
            "title": "Type",
            "enum": ["metadata_directory"],
            "type": "string",
            "description": "Type of storage."
          },
          "ipfs_uri": {
            "title": "Ipfs Uri",
            "type": "string",
            "description": "IPFS URI of the uploaded directory."
          },
          "ipfs_url": {
            "title": "Ipfs Url",
            "type": "string",
            "description": "IPFS URL of the uploaded directory."
          },
          "uploaded_date": {
            "title": "Uploaded Date",
            "type": "string",
            "description": "Date when the file was uploaded to IPFS (ISO)."
          }
        },
        "example": {
          "storage_type": "metadata_directory",
          "ipfs_uri": "ipfs://bafybeif3hkhukbitwkcsxzk5te6kc7yrtkxfy6epasg72dsozcpnkdcxv4/",
          "ipfs_url": "https://ipfs.io/ipfs/bafybeif3hkhukbitwkcsxzk5te6kc7yrtkxfy6epasg72dsozcpnkdcxv4",
          "uploaded_date": "2021-12-13T17:25:03.501703"
        }
      },
      "UserMetadataModel": {
        "title": "UserMetadataModel",
        "required": [
          "type",
          "ipfs_uri",
          "ipfs_url",
          "uploaded_date",
          "metadata"
        ],
        "type": "object",
        "properties": {
          "type": {
            "title": "Type",
            "enum": ["metadata"],
            "type": "string",
            "description": "Type of storage."
          },
          "ipfs_uri": {
            "title": "Ipfs Uri",
            "type": "string",
            "description": "IPFS URI of the uploaded file."
          },
          "ipfs_url": {
            "title": "Ipfs Url",
            "type": "string",
            "description": "IPFS URL of the uploaded file."
          },
          "uploaded_date": {
            "title": "Uploaded Date",
            "type": "string",
            "description": "Date when the file was uploaded to IPFS (ISO)."
          },
          "metadata": {
            "title": "Metadata",
            "type": "object",
            "description": "JSON body of the metadata."
          }
        },
        "example": {
          "storage_type": "metadata",
          "ipfs_uri": "ipfs://QmRModSr9gQTSZrbfbLis6mw21HycZyqMA3j8YMRD11nAQ",
          "ipfs_url": "https://ipfs.io/ipfs/QmRModSr9gQTSZrbfbLis6mw21HycZyqMA3j8YMRD11nAQ",
          "uploaded_date": "2021-08-23T17:25:03.501703",
          "metadata": {
            "attributes": [
              {
                "trait_type": "DNA",
                "value": "Robot"
              },
              {
                "trait_type": "Hair",
                "value": "BLU Pigtails"
              },
              {
                "trait_type": "Clothing",
                "value": "BRWN TCTL Vest"
              },
              {
                "trait_type": "Mouth",
                "value": "ROBO"
              }
            ],
            "description": "🧬 CLONE X 🧬\n\n20,000 next-gen Avatars, by RTFKT and Takashi Murakami 🌸\n\nIf you own a clone without any Murakami trait please read the terms regarding RTFKT - Owned Content here: https://rtfkt.com/legal-2A\n\nYou are also entitled to a commercial license, please read the terms to that here: https://rtfkt.com/legal-2C",
            "image": "https://clonex-assets.rtfkt.com/images/899.png",
            "name": "CloneX #9400"
          }
        }
      },
      "UserMintedNftResponse": {
        "title": "UserMintedNftResponse",
        "required": [
          "chain",
          "transaction_hash",
          "transaction_external_url",
          "contract_name",
          "type",
          "mint_to_address",
          "quantity",
          "num_burned_or_transferred",
          "metadata_frozen",
          "mint_date"
        ],
        "type": "object",
        "properties": {
          "chain": {
            "title": "Chain",
            "enum": ["polygon", "rinkeby", "ethereum", "goerli"],
            "type": "string",
            "description": "Blockchain the NFT was minted on."
          },
          "transaction_hash": {
            "title": "Transaction Hash",
            "type": "string",
            "description": "The transaction hash which is returned by the blockchain after minting."
          },
          "transaction_external_url": {
            "title": "Transaction External Url",
            "type": "string",
            "description": "Transaction URL in an external blockchain explorer."
          },
          "contract_name": {
            "title": "Contract Name",
            "type": "string",
            "description": "Contract name of the minted NFT."
          },
          "contract_address": {
            "title": "Contract Address",
            "type": "string",
            "description": "Contract address of the minted NFT."
          },
          "type": {
            "title": "Type",
            "type": "string",
            "description": "Contract type (erc721 or erc1155)."
          },
          "token_id": {
            "title": "Token Id",
            "type": "string",
            "description": "A unique ```uint256``` ID inside the contract. The contract address and token ID pair is a globally unique and fully-qualified identifier for a specific NFT on chain."
          },
          "mint_to_address": {
            "title": "Mint To Address",
            "type": "string",
            "description": "Account address where the NFT was sent."
          },
          "metadata_uri": {
            "title": "Metadata Uri",
            "type": "string",
            "description": "IPFS URI containing the metadata linked with the minted NFT."
          },
          "quantity": {
            "title": "Quantity",
            "type": "integer",
            "description": "Quantity of minted tokens. For erc721 contract type it's always 1."
          },
          "num_burned_or_transferred": {
            "title": "Num Burned Or Transferred",
            "type": "integer",
            "description": "Quantity of tokens that were burned/transferred."
          },
          "metadata_frozen": {
            "title": "Metadata Frozen",
            "type": "boolean",
            "description": "If ```true``` than the metadata can not be updated."
          },
          "mint_date": {
            "title": "Mint Date",
            "type": "string",
            "description": "Date when the NFT was minted (ISO)."
          }
        },
        "example": {
          "chain": "polygon",
          "transaction_hash": "0x124141or0f10140112381381dd",
          "transaction_external_url": "https://polygonscan.com/tx/0xcbbe6072d7aa48b9774ed8b15e7f298489c5e965b32aa468ca520b30aba649a1",
          "contract_name": "My NFTPort contract",
          "contract_address": "0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb",
          "type": "erc721",
          "token_id": "6473",
          "mint_to_address": "0xc155f9bd6b71e9f71d0236b689ad7c2c5d16febf",
          "metadata_uri": "ipfs://bafkreiedsysj5xeyulisdjrjh37tz2y47dlwzwiwfagmqng3melxtigaie",
          "quantity": "1",
          "burned_transferred_amount": "0",
          "metadata_frozen": true,
          "mint_date": "2021-08-23T17:25:03.501703"
        }
      },
      "UserMintingLimitsResponseModel": {
        "title": "UserMintingLimitsResponseModel",
        "type": "object",
        "properties": {
          "subscription_mints_included": {
            "title": "Subscription Mints Included",
            "type": "integer",
            "description": "Mints included in your subscription."
          },
          "max_mints": {
            "title": "Max Mints",
            "type": "integer",
            "description": "Minting limit."
          }
        }
      },
      "UserMintingUsageResponseModel": {
        "title": "UserMintingUsageResponseModel",
        "required": ["total_nfts_minted"],
        "type": "object",
        "properties": {
          "total_nfts_minted": {
            "title": "Total Nfts Minted",
            "type": "integer",
            "description": "Total number of NFTs minted."
          },
          "subscription_nfts_minted": {
            "title": "Subscription Nfts Minted",
            "type": "integer",
            "description": "Number of NFTs minted during your current subscription cycle."
          }
        }
      },
      "UserProfileContractCollectionsDetails": {
        "title": "UserProfileContractCollectionsDetails",
        "required": [
          "name",
          "symbol",
          "transaction_hash",
          "transaction_external_url",
          "chain",
          "address",
          "creation_date",
          "metadata_frozen",
          "max_supply",
          "team_reserve",
          "mint_price",
          "mint_price_frozen",
          "presale_mint_price",
          "presale_mint_price_frozen",
          "tokens_per_mint",
          "public_mint_start"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Contract name."
          },
          "symbol": {
            "title": "Symbol",
            "type": "string",
            "description": "Contract symbol."
          },
          "transaction_hash": {
            "title": "Transaction Hash",
            "type": "string",
            "description": "Deployed contract transaction hash which is a unique string of characters that is given to every transaction that is added to the blockchain."
          },
          "transaction_external_url": {
            "title": "Transaction External Url",
            "type": "string",
            "description": "Transaction URL in an external blockchain explorer."
          },
          "chain": {
            "title": "Chain",
            "enum": ["ethereum", "polygon", "rinkeby", "goerli"],
            "type": "string",
            "description": "Blockchain where the contract has been created."
          },
          "address": {
            "title": "Address",
            "type": "string",
            "description": "NFT contract address which has been successfully deployed to the blockchain."
          },
          "owner_address": {
            "title": "Owner Address",
            "type": "string",
            "description": "Owner address of the deployed NFT contract."
          },
          "creation_date": {
            "title": "Creation Date",
            "type": "string",
            "description": "Date when the contract was created (ISO)."
          },
          "metadata_frozen": {
            "title": "Metadata Frozen",
            "type": "boolean",
            "description": "If ```true``` then the metadata URIs of the tokens can't be changed."
          },
          "max_supply": {
            "title": "Max Supply",
            "type": "integer",
            "description": "The maximum number of NFTs that can be minted in this collection."
          },
          "team_reserve": {
            "title": "Team Reserve",
            "type": "integer",
            "description": "The number of NFTs that can only be minted by the collection owner."
          },
          "mint_price": {
            "title": "Mint Price",
            "type": "number",
            "description": "Minting price per NFT, in units of the chain's native token."
          },
          "mint_price_frozen": {
            "title": "Mint Price Frozen",
            "type": "boolean",
            "description": "If ```true``` then the mint price can't be changed."
          },
          "presale_mint_price": {
            "title": "Presale Mint Price",
            "type": "number",
            "description": "Minting price per NFT in the presale phase, in units of the chain's native token."
          },
          "presale_mint_price_frozen": {
            "title": "Presale Mint Price Frozen",
            "type": "boolean",
            "description": "If ```true``` then the presale mint price can't be changed."
          },
          "tokens_per_mint": {
            "title": "Tokens Per Mint",
            "type": "integer",
            "description": "The maximum number of NFTs a user can mint in a single transaction."
          },
          "treasury_address": {
            "title": "Treasury Address",
            "type": "string",
            "description": "The treasury address: the balance of paid minting prices can be withdrawn to this address. Use `withdrawFees()` to transfer the entire balance to the treasury address."
          },
          "public_mint_start": {
            "title": "Public Mint Start",
            "type": "string",
            "description": "Public minting start time (ISO 8601 timestamp)."
          },
          "base_uri": {
            "title": "Base Uri",
            "type": "string",
            "description": "Metadata base URI for tokens."
          },
          "prereveal_token_uri": {
            "title": "Prereveal Token Uri",
            "type": "string",
            "description": "Pre-reveal token URI for placholder metadata."
          },
          "presale_mint_start": {
            "title": "Presale Mint Start",
            "type": "string",
            "description": "Whitelisted/presale minting start time (ISO 8601 timestamp)."
          },
          "presale_whitelisted_addresses": {
            "title": "Presale Whitelisted Addresses",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of addresses whitelisted for the presale."
          },
          "presale_merkle_root": {
            "title": "Presale Merkle Root",
            "type": "string",
            "description": "Merkle tree root of addresses whitelisted for the presale."
          },
          "royalties_share": {
            "title": "Royalties Share",
            "type": "integer",
            "description": "Secondary market royalty rate in basis points (100 bps = 1%). This value cannot exceed 10,000 bps."
          },
          "royalties_address": {
            "title": "Royalties Address",
            "type": "string",
            "description": "Address for royalties."
          },
          "merkle_proofs": {
            "title": "Merkle Proofs",
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Merkle proofs of the whitelisted addresses."
          }
        },
        "example": {
          "name": "Good Company Tokens",
          "symbol": "GCT",
          "transaction_hash": "0x124141or0f10140112381381dd",
          "transaction_external_url": "https://rinkeby.etherscan.io/tx/0xf9bd460983cbd6cf974ac380760a914696bb68dd2b2cb38d1dbc4ba2358a83b0",
          "chain": "rinkeby",
          "address": "0x12f28e2106ce8fd8464885b80ea865e98b465149",
          "owner_address": "0x5FDd0881Ef284D6fBB2Ed97b01cb13d707f91e42",
          "creation_date": "2021-08-23T17:25:03.501703",
          "metadata_frozen": true,
          "max_supply": 10000,
          "team_reserve": 10,
          "mint_price": 0.5,
          "tokens_per_mint": 10,
          "treasury_address": "0x5FDd0881Ef284D6fBB2Ed97b01cb13d707f91e42",
          "public_mint_start": "2022-03-12T14:20:23.526784",
          "base_uri": "ipfs://c2fybeif3hkhukbitwkcsxzk5te6kc7yrtkxfy6epasg72dsozcpnkdcxv4/",
          "prereveal_token_uri": "ipfs://bafybeif3hkhukbitwkcsxzk5te6kc7yrtkxfy6epasg72dsozcpnkdcxv4",
          "presale_mint_start": "2022-03-10T14:20:23.526784",
          "presale_whitelisted_addresses": [
            "0x5FDd0881Ef284D6fBB2Ed97b01cb13d707f91e42",
            "0x7f7631fA2C3E7b78aD8CEA99E08844440c7626f0"
          ],
          "presale_merkle_root": "f2c78c6bfba8dd539947c90750bf070feb989f955352a287da2a643be805a9b4",
          "royalties_share": 500,
          "royalties_address": "0x5FDd0881Ef284D6fBB2Ed97b01cb13d707f91e42",
          "merkle_proofs": {
            "0x5FDd0881Ef284D6fBB2Ed97b01cb13d707f91e42": [
              "0xf2c78c6bfba8dd539947c90750bf070feb989f955352a287da2a643be805a9b4",
              "0x8b82aec4291a11f74942b91e0b303598148a382e6a1f43556b6dff54f1f4972d"
            ],
            "0x7f7631fA2C3E7b78aD8CEA99E08844440c7626f0": [
              "0xae9ff8919803844591e5320995dfae011d1d02cbb9e8505a9e0e57cb0397e1aa",
              "0xfa7ad740f89fff5fbda6aa7096f0a904be4dc54abf3d7ba067bccb6afb138d04"
            ]
          }
        }
      },
      "UserProfileContractDetails": {
        "title": "UserProfileContractDetails",
        "required": [
          "name",
          "symbol",
          "transaction_hash",
          "transaction_external_url",
          "chain",
          "address",
          "creation_date",
          "base_uri",
          "metadata_frozen",
          "tokens_burnable",
          "tokens_transferable",
          "type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Contract name."
          },
          "symbol": {
            "title": "Symbol",
            "type": "string",
            "description": "Contract symbol."
          },
          "transaction_hash": {
            "title": "Transaction Hash",
            "type": "string",
            "description": "Deployed contract transaction hash which is a unique string of characters that is given to every transaction that is added to the blockchain."
          },
          "transaction_external_url": {
            "title": "Transaction External Url",
            "type": "string",
            "description": "Transaction URL in an external blockchain explorer."
          },
          "chain": {
            "title": "Chain",
            "enum": ["polygon", "rinkeby", "ethereum", "goerli"],
            "type": "string",
            "description": "Blockchain where the contract has been created."
          },
          "address": {
            "title": "Address",
            "type": "string",
            "description": "NFT contract address which has been successfully deployed to the blockchain."
          },
          "owner_address": {
            "title": "Owner Address",
            "type": "string",
            "description": "Owner address of the deployed NFT contract."
          },
          "creation_date": {
            "title": "Creation Date",
            "type": "string",
            "description": "Date when the contract was created (ISO)."
          },
          "base_uri": {
            "title": "Base Uri",
            "type": "string",
            "description": "Metadata base URI for tokens."
          },
          "metadata_frozen": {
            "title": "Metadata Frozen",
            "type": "boolean",
            "description": "If ```true``` than the metadata URIs of the tokens can't be changed."
          },
          "tokens_burnable": {
            "title": "Tokens Burnable",
            "type": "boolean",
            "description": "If ```true```, tokens may be burned by contract owner."
          },
          "tokens_transferable": {
            "title": "Tokens Transferable",
            "type": "boolean",
            "description": "If ```true```, tokens may be transferred by contract owner."
          },
          "type": {
            "title": "Type",
            "type": "string",
            "description": "Contract type (erc721 or erc1155)."
          },
          "royalties_share": {
            "title": "Royalties Share",
            "type": "integer",
            "description": "Secondary market royalty rate in basis points (100 bps = 1%). This value cannot exceed 10,000 bps."
          },
          "royalties_address": {
            "title": "Royalties Address",
            "type": "string",
            "description": "Address for royalties"
          },
          "roles": {
            "title": "Roles",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RolesItem"
            },
            "description": "List of granular permissions for different wallet addresses set on the contract level. ```owner_address``` has all of the permissions."
          },
          "exited_nftport": {
            "title": "Exited Nftport",
            "type": "boolean",
            "description": "If ```true```, contract can not be called by NFTPort API anymore."
          }
        },
        "example": {
          "name": "Good Company Tokens",
          "symbol": "GCT",
          "transaction_hash": "0x124141or0f10140112381381dd",
          "transaction_external_url": "https://rinkeby.etherscan.io/tx/0xf9bd460983cbd6cf974ac380760a914696bb68dd2b2cb38d1dbc4ba2358a83b0",
          "chain": "rinkeby",
          "address": "0x12f28e2106ce8fd8464885b80ea865e98b465149",
          "owner_address": "0x5FDd0881Ef284D6fBB2Ed97b01cb13d707f91e42",
          "creation_date": "2021-08-23T17:25:03.501703",
          "metadata_frozen": true,
          "type": "erc721",
          "roles": [
            {
              "role": "mint",
              "addresses": ["0xMockAddress1", "0xMockAddress2"],
              "freeze": false
            }
          ],
          "royalties_share": 500,
          "royalties_address": "0x5FDd0881Ef284D6fBB2Ed97b01cb13d707f91e42",
          "exited_nftport": false
        }
      },
      "UserProfileContractsCollectionsInclude": {
        "title": "UserProfileContractsCollectionsInclude",
        "enum": ["default", "merkle_proofs"],
        "type": "string",
        "description": "An enumeration."
      },
      "UserProfileResponseModel": {
        "title": "UserProfileResponseModel",
        "required": ["name", "email", "joined_date"],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Your name."
          },
          "email": {
            "title": "Email",
            "type": "string",
            "description": "Your email ID."
          },
          "joined_date": {
            "title": "Joined Date",
            "type": "string",
            "description": "Date when you signed up (ISO)."
          }
        }
      },
      "UserSubscriptionPeriodResponseModel": {
        "title": "UserSubscriptionPeriodResponseModel",
        "required": ["start_date", "end_date"],
        "type": "object",
        "properties": {
          "start_date": {
            "title": "Start Date",
            "type": "string",
            "description": "Date when your subscription started (ISO)."
          },
          "end_date": {
            "title": "End Date",
            "type": "string",
            "description": "Date when your subscription will end (ISO)."
          }
        }
      },
      "ValidationError": {
        "title": "ValidationError",
        "required": ["loc", "msg", "type"],
        "type": "object",
        "properties": {
          "loc": {
            "title": "Location",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "msg": {
            "title": "Message",
            "type": "string"
          },
          "type": {
            "title": "Error Type",
            "type": "string"
          }
        }
      },
      "src__service__nfts__entities__Nft": {
        "title": "Nft",
        "required": ["chain", "contract_address", "token_id"],
        "type": "object",
        "properties": {
          "chain": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NftsRequestSupportedChain"
              }
            ],
            "description": "Blockchain where the NFT has been minted."
          },
          "contract_address": {
            "title": "Contract Address",
            "type": "string",
            "description": "The contract address of the NFT."
          },
          "token_id": {
            "title": "Token Id",
            "type": "string",
            "description": "A unique ```uint256``` ID inside the contract. The contract address and token ID pair is a globally unique and fully-qualified identifier for a specific NFT on chain."
          },
          "metadata_url": {
            "title": "Metadata Url",
            "type": "string",
            "description": "Metadata URL inside the contract for a given token, also known as the token URI. For ERC-721 it is the token_uri() function and for ERC-1155 it is the uri() function in the smart contract."
          },
          "metadata": {
            "title": "Metadata",
            "type": "object",
            "description": "Raw NFT metadata downloaded from the metadata_url i.e. token URI. It usually includes the name, description and attributes along with any other data added by the creator."
          },
          "file_information": {
            "title": "File Information",
            "allOf": [
              {
                "$ref": "#/components/schemas/src__service__nfts__entities__NftAssetMetadata"
              }
            ],
            "description": "Extra information of the NFT’s file."
          },
          "file_url": {
            "title": "File Url",
            "type": "string",
            "description": "Original file (image, video, etc) URL of the NFT."
          },
          "animation_url": {
            "title": "Animation Url",
            "type": "string",
            "description": "URL of multi-media file set in the NFT metadata. Most commonly used file types are GLTF, GLB, WEBM, MP4, M4V, OGV, OGG, along with audio MP3, WAV, and OGA. Also HTML pages, allowing to build rich experiences and interactive NFTs using JavaScript canvas, WebGL, and more."
          },
          "cached_file_url": {
            "title": "Cached File Url",
            "type": "string",
            "description": "Cached file (image, video, etc) in NFTPort's cloud with no access restrictions, low latency and high availability."
          },
          "cached_animation_url": {
            "title": "Cached Animation Url",
            "type": "string",
            "description": "Cached URL of animated file (video, gif, etc) as set in the NFT metadata. This URL points to a file cached in NFTPort's cloud storage with no access restrictions, low latency and high availability."
          },
          "mint_date": {
            "title": "Mint Date",
            "type": "string",
            "description": "Date when the NFT was minted (ISO)."
          },
          "updated_date": {
            "title": "Updated Date",
            "type": "string",
            "description": "Date when the NFT’s metadata was last downloaded or updated/refreshed."
          },
          "contract": {
            "title": "Contract",
            "allOf": [
              {
                "$ref": "#/components/schemas/ContractInfoResponse"
              }
            ],
            "description": "Information of the NFT’s contract."
          }
        },
        "example": {
          "chain": "ethereum",
          "contract_address": "0x23581767a106ae21c074b2276d25e5c3e136a68b",
          "token_id": "6889",
          "metadata_url": "https://live---metadata-5covpqijaa-uc.a.run.app/metadata/6889",
          "metadata": {
            "attributes": [
              {
                "trait_type": "Eyes",
                "value": "Open"
              },
              {
                "trait_type": "Body",
                "value": "Tabby"
              },
              {
                "trait_type": "Feathers",
                "value": "Gray"
              },
              {
                "trait_type": "Background",
                "value": "Purple"
              },
              {
                "trait_type": "Beak",
                "value": "Small"
              }
            ],
            "external_url": "https://moonbirds.xyz/",
            "image": "https://live---metadata-5covpqijaa-uc.a.run.app/images/6889",
            "name": "#6889",
            "x_debug": ["orig:9745"]
          },
          "file_information": {
            "height": 1008,
            "width": 1008,
            "file_size": 6411
          },
          "file_url": "https://live---metadata-5covpqijaa-uc.a.run.app/images/6889",
          "cached_file_url": "https://storage.googleapis.com/sentinel-nft/raw-assets/30152540c5651ff250c662f1565beefb7bf7ad7523ece35d2e42b6fcbfbc0d94.png",
          "mint_date": "2022-04-16T16:21:43",
          "updated_date": "2022-09-27T17:27:09.096295",
          "contract": {
            "name": "Moonbirds",
            "symbol": "MOONBIRD",
            "type": "ERC721",
            "metadata": {
              "description": "A collection of 10,000 utility-enabled PFPs that feature a richly diverse and unique pool of rarity-powered traits. What's more, each Moonbird unlocks private club membership and additional benefits the longer you hold them. We call it nesting – because, obviously.",
              "thumbnail_url": "https://i.seadn.io/gae/H-eyNE1MwL5ohL-tCfn_Xa1Sl9M9B4612tLYeUlQubzt4ewhr4huJIR5OLuyO3Z5PpJFSwdm7rq-TikAh7f5eUw338A2cy6HRH75?w=500&auto=format",
              "cached_thumbnail_url": "https://storage.googleapis.com/sentinel-nft/raw-assets/e317daadcd67dede885ecda7023275dcf2714c7d9093ebdadd9923a129f0d635.png",
              "banner_url": "https://i.seadn.io/gae/ouzjfA0LotbHC92vuDph9JDeg7Z4ZFo12Pr9GJpfSAZSrnXDOubJn0eTvinwzUTPsWhnLLq5ocjcDSrpNV0_MYIjueVJrzFlE6p0?w=500&auto=format",
              "cached_banner_url": "https://storage.googleapis.com/sentinel-nft/raw-assets/2aa3577c4f1dff4303cf3c340197cf84e6155597ee49a20bffdd3e3fc82ea128.png"
            }
          }
        }
      },
      "src__service__nfts__entities__NftAssetMetadata": {
        "title": "NftAssetMetadata",
        "required": ["height", "width", "file_size"],
        "type": "object",
        "properties": {
          "height": {
            "title": "Height",
            "type": "integer",
            "description": "Image height in pixels."
          },
          "width": {
            "title": "Width",
            "type": "integer",
            "description": "Image width in pixels."
          },
          "file_size": {
            "title": "File Size",
            "type": "integer",
            "description": "File size in bytes."
          }
        },
        "example": {
          "height": 1008,
          "width": 1008,
          "file_size": 6411
        }
      },
      "src__service__solana__nfts__entities__NftAssetMetadata": {
        "title": "NftAssetMetadata",
        "required": ["height", "width", "file_size"],
        "type": "object",
        "properties": {
          "height": {
            "title": "Height",
            "type": "integer",
            "description": "Image height in pixels."
          },
          "width": {
            "title": "Width",
            "type": "integer",
            "description": "Image width in pixels."
          },
          "file_size": {
            "title": "File Size",
            "type": "integer",
            "description": "File size in bytes."
          }
        },
        "example": {
          "height": 512,
          "width": 512,
          "file_size": 310751
        }
      },
      "src__service__transactions__entities__Nft": {
        "title": "Nft",
        "type": "object",
        "properties": {
          "contract_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ContractType"
              }
            ],
            "description": "Contract type."
          },
          "contract_address": {
            "title": "Contract Address",
            "type": "string",
            "description": "Contract address of the NFT."
          },
          "token_id": {
            "title": "Token Id",
            "type": "string",
            "description": "A unique `uint256` ID inside the contract. The contract address and token ID pair is a globally unique and fully-qualified identifier for a specific NFT on chain."
          },
          "metadata_url": {
            "title": "Metadata Url",
            "type": "string",
            "description": "Metadata URL inside the contract for a given token, also known as the token URI. For ERC-721 it is the token_uri() function and for ERC-1155 it is the uri() function in the smart contract."
          },
          "creators": {
            "title": "Creators",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Creators"
            },
            "description": "Details of the creators of the NFT."
          },
          "royalties": {
            "title": "Royalties",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Royalties"
            },
            "description": "Details of the royalty payments."
          },
          "signatures": {
            "title": "Signatures",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An array of wallet approval signatures for the transaction from every creator of the NFT (for `contract_type`- `ERC721_lazy` and `ERC1155_lazy`)."
          },
          "total": {
            "title": "Total",
            "type": "integer",
            "description": "Total supply of the minted NFTs."
          }
        },
        "example": {
          "contract_type": "ERC1155_lazy",
          "contract_address": "0xb66a603f4cfe17e3d27b87a8bfcad319856518b8",
          "token_id": "15358604318467100856391476616408347066873708425523410565866333184395837440001",
          "metadata_url": "ipfs://QmUNeWBXz4pJkBzMAaPTXS4dUXkHyVNsrfVTbN4bEsJnW1",
          "creators": [
            {
              "account_address": "0x21f4a9780a52c7a8ca5e30bac89a6b0e2722bf65",
              "creator_share": "10000"
            }
          ],
          "royalties": [
            {
              "account_address": "0x21f4a9780a52c7a8ca5e30bac89a6b0e2722bf65",
              "royalty_share": "1000"
            }
          ],
          "signatures": [
            "0xde8ee69a90450466de44e0025aec715d621afbcc1ad11361cc9d63666a7e3f3e33eb72d48f2753f6e5d414967ba5ae06d00e39d1f53e99d419038011c2f159f51b"
          ],
          "total": 5000
        }
      }
    },
    "securitySchemes": {
      "APIKeyHeader": {
        "type": "apiKey",
        "in": "header",
        "name": "Authorization"
      }
    }
  }
}
